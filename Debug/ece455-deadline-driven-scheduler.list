
ece455-deadline-driven-scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000034  20000000  080040c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
  6 .bss          00007a4c  20000034  20000034  00020034  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20007a80  20007a80  00020034  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e75b  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000025a8  00000000  00000000  0002e7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c88  00000000  00000000  00030d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b50  00000000  00000000  000319f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000059d7  00000000  00000000  00032540  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000465c  00000000  00000000  00037f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003c573  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000032f4  00000000  00000000  0003c5f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000034 	.word	0x20000034
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080040a4 	.word	0x080040a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000038 	.word	0x20000038
 80001cc:	080040a4 	.word	0x080040a4

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	20007870 	.word	0x20007870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000050 	.word	0x20000050
 8000530:	20000054 	.word	0x20000054
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 fcf0 	bl	8002004 <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	20007870 	.word	0x20007870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 fc0c 	bl	8001e8c <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000030 	.word	0x20000030
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000050 	.word	0x20000050
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	20000054 	.word	0x20000054

08000760 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800076c:	f001 fad4 	bl	8001d18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000770:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <pvPortMalloc+0x178>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000778:	f000 f91c 	bl	80009b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800077c:	4b57      	ldr	r3, [pc, #348]	; (80008dc <pvPortMalloc+0x17c>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4013      	ands	r3, r2
 8000784:	2b00      	cmp	r3, #0
 8000786:	f040 808c 	bne.w	80008a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d01c      	beq.n	80007ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8000790:	2208      	movs	r2, #8
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d013      	beq.n	80007ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f023 0307 	bic.w	r3, r3, #7
 80007a8:	3308      	adds	r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d009      	beq.n	80007ca <pvPortMalloc+0x6a>
 80007b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ba:	f383 8811 	msr	BASEPRI, r3
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	f3bf 8f4f 	dsb	sy
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e7fe      	b.n	80007c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d068      	beq.n	80008a2 <pvPortMalloc+0x142>
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <pvPortMalloc+0x180>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d863      	bhi.n	80008a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007da:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <pvPortMalloc+0x184>)
 80007dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007de:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <pvPortMalloc+0x184>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007e4:	e004      	b.n	80007f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d203      	bcs.n	8000802 <pvPortMalloc+0xa2>
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1f1      	bne.n	80007e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <pvPortMalloc+0x178>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000808:	429a      	cmp	r2, r3
 800080a:	d04a      	beq.n	80008a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2208      	movs	r2, #8
 8000812:	4413      	add	r3, r2
 8000814:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	685a      	ldr	r2, [r3, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1ad2      	subs	r2, r2, r3
 8000826:	2308      	movs	r3, #8
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	429a      	cmp	r2, r3
 800082c:	d91e      	bls.n	800086c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800082e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	2b00      	cmp	r3, #0
 800083e:	d009      	beq.n	8000854 <pvPortMalloc+0xf4>
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	e7fe      	b.n	8000852 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1ad2      	subs	r2, r2, r3
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000866:	69b8      	ldr	r0, [r7, #24]
 8000868:	f000 f906 	bl	8000a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <pvPortMalloc+0x180>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <pvPortMalloc+0x180>)
 8000878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <pvPortMalloc+0x180>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <pvPortMalloc+0x188>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d203      	bcs.n	800088e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <pvPortMalloc+0x180>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <pvPortMalloc+0x188>)
 800088c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <pvPortMalloc+0x17c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	431a      	orrs	r2, r3
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80008a2:	f001 fa47 	bl	8001d34 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d101      	bne.n	80008b0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80008ac:	f003 f820 	bl	80038f0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d009      	beq.n	80008ce <pvPortMalloc+0x16e>
 80008ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008be:	f383 8811 	msr	BASEPRI, r3
 80008c2:	f3bf 8f6f 	isb	sy
 80008c6:	f3bf 8f4f 	dsb	sy
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	e7fe      	b.n	80008cc <pvPortMalloc+0x16c>
	return pvReturn;
 80008ce:	69fb      	ldr	r3, [r7, #28]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20007860 	.word	0x20007860
 80008dc:	2000786c 	.word	0x2000786c
 80008e0:	20007864 	.word	0x20007864
 80008e4:	20007858 	.word	0x20007858
 80008e8:	20007868 	.word	0x20007868

080008ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d046      	beq.n	800098c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008fe:	2308      	movs	r3, #8
 8000900:	425b      	negs	r3, r3
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	4413      	add	r3, r2
 8000906:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <vPortFree+0xa8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4013      	ands	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d109      	bne.n	800092e <vPortFree+0x42>
 800091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e7fe      	b.n	800092c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d009      	beq.n	800094a <vPortFree+0x5e>
 8000936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093a:	f383 8811 	msr	BASEPRI, r3
 800093e:	f3bf 8f6f 	isb	sy
 8000942:	f3bf 8f4f 	dsb	sy
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	e7fe      	b.n	8000948 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <vPortFree+0xa8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4013      	ands	r3, r2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d019      	beq.n	800098c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d115      	bne.n	800098c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <vPortFree+0xa8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	43db      	mvns	r3, r3
 800096a:	401a      	ands	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000970:	f001 f9d2 	bl	8001d18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <vPortFree+0xac>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4413      	add	r3, r2
 800097e:	4a06      	ldr	r2, [pc, #24]	; (8000998 <vPortFree+0xac>)
 8000980:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000982:	6938      	ldr	r0, [r7, #16]
 8000984:	f000 f878 	bl	8000a78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000988:	f001 f9d4 	bl	8001d34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000786c 	.word	0x2000786c
 8000998:	20007864 	.word	0x20007864

0800099c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <xPortGetFreeHeapSize+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20007864 	.word	0x20007864

080009b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009ba:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80009be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <prvHeapInit+0xac>)
 80009c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00c      	beq.n	80009e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3307      	adds	r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f023 0307 	bic.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <prvHeapInit+0xac>)
 80009e4:	4413      	add	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <prvHeapInit+0xb0>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <prvHeapInit+0xb0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a00:	2208      	movs	r2, #8
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f023 0307 	bic.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <prvHeapInit+0xb4>)
 8000a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <prvHeapInit+0xb4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <prvHeapInit+0xb4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	1ad2      	subs	r2, r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <prvHeapInit+0xb4>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <prvHeapInit+0xb8>)
 8000a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <prvHeapInit+0xbc>)
 8000a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <prvHeapInit+0xc0>)
 8000a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	20000058 	.word	0x20000058
 8000a64:	20007858 	.word	0x20007858
 8000a68:	20007860 	.word	0x20007860
 8000a6c:	20007868 	.word	0x20007868
 8000a70:	20007864 	.word	0x20007864
 8000a74:	2000786c 	.word	0x2000786c

08000a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <prvInsertBlockIntoFreeList+0xac>)
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e002      	b.n	8000a8c <prvInsertBlockIntoFreeList+0x14>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3f7      	bcc.n	8000a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	441a      	add	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d108      	bne.n	8000aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	441a      	add	r2, r3
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d118      	bne.n	8000b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d00d      	beq.n	8000af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	e008      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e003      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d002      	beq.n	8000b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20007858 	.word	0x20007858
 8000b28:	20007860 	.word	0x20007860

08000b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <xQueueGenericReset+0x28>
 8000b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	e7fe      	b.n	8000b52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000b54:	f7ff fcf4 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b60:	68f9      	ldr	r1, [r7, #12]
 8000b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b64:	fb01 f303 	mul.w	r3, r1, r3
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2200      	movs	r2, #0
 8000b72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b84:	3b01      	subs	r3, #1
 8000b86:	68f9      	ldr	r1, [r7, #12]
 8000b88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b8a:	fb01 f303 	mul.w	r3, r1, r3
 8000b8e:	441a      	add	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	22ff      	movs	r2, #255	; 0xff
 8000b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d114      	bne.n	8000bd4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d01a      	beq.n	8000be8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3310      	adds	r3, #16
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 faf2 	bl	80021a0 <xTaskRemoveFromEventList>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d012      	beq.n	8000be8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <xQueueGenericReset+0xcc>)
 8000bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	f3bf 8f4f 	dsb	sy
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	e009      	b.n	8000be8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3310      	adds	r3, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff faf9 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3324      	adds	r3, #36	; 0x24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff faf4 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000be8:	f7ff fcd8 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000ed04 	.word	0xe000ed04

08000bfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	4613      	mov	r3, r2
 8000c08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d109      	bne.n	8000c24 <xQueueGenericCreate+0x28>
 8000c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c14:	f383 8811 	msr	BASEPRI, r3
 8000c18:	f3bf 8f6f 	isb	sy
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	e7fe      	b.n	8000c22 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e004      	b.n	8000c3a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3348      	adds	r3, #72	; 0x48
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fd8e 	bl	8000760 <pvPortMalloc>
 8000c44:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00b      	beq.n	8000c64 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	3348      	adds	r3, #72	; 0x48
 8000c50:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f000 f805 	bl	8000c6e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000c64:	69bb      	ldr	r3, [r7, #24]
	}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e002      	b.n	8000c90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	69b8      	ldr	r0, [r7, #24]
 8000ca0:	f7ff ff44 	bl	8000b2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	; 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d109      	bne.n	8000cdc <xQueueGenericSend+0x30>
 8000cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ccc:	f383 8811 	msr	BASEPRI, r3
 8000cd0:	f3bf 8f6f 	isb	sy
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cda:	e7fe      	b.n	8000cda <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d103      	bne.n	8000cea <xQueueGenericSend+0x3e>
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <xQueueGenericSend+0x42>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <xQueueGenericSend+0x44>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <xQueueGenericSend+0x5c>
 8000cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf8:	f383 8811 	msr	BASEPRI, r3
 8000cfc:	f3bf 8f6f 	isb	sy
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
 8000d06:	e7fe      	b.n	8000d06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d103      	bne.n	8000d16 <xQueueGenericSend+0x6a>
 8000d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d101      	bne.n	8000d1a <xQueueGenericSend+0x6e>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <xQueueGenericSend+0x70>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d109      	bne.n	8000d34 <xQueueGenericSend+0x88>
 8000d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d24:	f383 8811 	msr	BASEPRI, r3
 8000d28:	f3bf 8f6f 	isb	sy
 8000d2c:	f3bf 8f4f 	dsb	sy
 8000d30:	623b      	str	r3, [r7, #32]
 8000d32:	e7fe      	b.n	8000d32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d34:	f001 fbf0 	bl	8002518 <xTaskGetSchedulerState>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d102      	bne.n	8000d44 <xQueueGenericSend+0x98>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <xQueueGenericSend+0x9c>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <xQueueGenericSend+0x9e>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <xQueueGenericSend+0xb6>
 8000d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d52:	f383 8811 	msr	BASEPRI, r3
 8000d56:	f3bf 8f6f 	isb	sy
 8000d5a:	f3bf 8f4f 	dsb	sy
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	e7fe      	b.n	8000d60 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d62:	f7ff fbed 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d302      	bcc.n	8000d78 <xQueueGenericSend+0xcc>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d129      	bne.n	8000dcc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	68b9      	ldr	r1, [r7, #8]
 8000d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d7e:	f000 fa52 	bl	8001226 <prvCopyDataToQueue>
 8000d82:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d010      	beq.n	8000dae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8e:	3324      	adds	r3, #36	; 0x24
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 fa05 	bl	80021a0 <xTaskRemoveFromEventList>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d9c:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	f3bf 8f6f 	isb	sy
 8000dac:	e00a      	b.n	8000dc4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d007      	beq.n	8000dc4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000db4:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	f3bf 8f4f 	dsb	sy
 8000dc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000dc4:	f7ff fbea 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e063      	b.n	8000e94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d103      	bne.n	8000dda <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000dd2:	f7ff fbe3 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e05c      	b.n	8000e94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d106      	bne.n	8000dee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fa3d 	bl	8002264 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000dea:	2301      	movs	r3, #1
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000dee:	f7ff fbd5 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000df2:	f000 ff91 	bl	8001d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000df6:	f7ff fba3 	bl	8000540 <vPortEnterCritical>
 8000dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e06:	d103      	bne.n	8000e10 <xQueueGenericSend+0x164>
 8000e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d103      	bne.n	8000e26 <xQueueGenericSend+0x17a>
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e26:	f7ff fbb9 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e2a:	1d3a      	adds	r2, r7, #4
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fa3a 	bl	80022ac <xTaskCheckForTimeOut>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d124      	bne.n	8000e88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e40:	f000 fae9 	bl	8001416 <prvIsQueueFull>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d018      	beq.n	8000e7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4c:	3310      	adds	r3, #16
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 f956 	bl	8002104 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e5a:	f000 fa74 	bl	8001346 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000e5e:	f000 ff69 	bl	8001d34 <xTaskResumeAll>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f47f af7c 	bne.w	8000d62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	f3bf 8f4f 	dsb	sy
 8000e76:	f3bf 8f6f 	isb	sy
 8000e7a:	e772      	b.n	8000d62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e7e:	f000 fa62 	bl	8001346 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e82:	f000 ff57 	bl	8001d34 <xTaskResumeAll>
 8000e86:	e76c      	b.n	8000d62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e8a:	f000 fa5c 	bl	8001346 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e8e:	f000 ff51 	bl	8001d34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000e92:	2300      	movs	r3, #0
		}
	}
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3738      	adds	r7, #56	; 0x38
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	e000ed04 	.word	0xe000ed04

08000ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d109      	bne.n	8000ecc <xQueueGenericSendFromISR+0x2c>
 8000eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ebc:	f383 8811 	msr	BASEPRI, r3
 8000ec0:	f3bf 8f6f 	isb	sy
 8000ec4:	f3bf 8f4f 	dsb	sy
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eca:	e7fe      	b.n	8000eca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d103      	bne.n	8000eda <xQueueGenericSendFromISR+0x3a>
 8000ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <xQueueGenericSendFromISR+0x3e>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <xQueueGenericSendFromISR+0x40>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d109      	bne.n	8000ef8 <xQueueGenericSendFromISR+0x58>
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	623b      	str	r3, [r7, #32]
 8000ef6:	e7fe      	b.n	8000ef6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d103      	bne.n	8000f06 <xQueueGenericSendFromISR+0x66>
 8000efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <xQueueGenericSendFromISR+0x6a>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <xQueueGenericSendFromISR+0x6c>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d109      	bne.n	8000f24 <xQueueGenericSendFromISR+0x84>
 8000f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f14:	f383 8811 	msr	BASEPRI, r3
 8000f18:	f3bf 8f6f 	isb	sy
 8000f1c:	f3bf 8f4f 	dsb	sy
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e7fe      	b.n	8000f22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f24:	f7ff fbde 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000f28:	f3ef 8211 	mrs	r2, BASEPRI
 8000f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f30:	f383 8811 	msr	BASEPRI, r3
 8000f34:	f3bf 8f6f 	isb	sy
 8000f38:	f3bf 8f4f 	dsb	sy
 8000f3c:	61ba      	str	r2, [r7, #24]
 8000f3e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000f40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d302      	bcc.n	8000f56 <xQueueGenericSendFromISR+0xb6>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d12c      	bne.n	8000fb0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f66:	f000 f95e 	bl	8001226 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f72:	d112      	bne.n	8000f9a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d016      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7e:	3324      	adds	r3, #36	; 0x24
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 f90d 	bl	80021a0 <xTaskRemoveFromEventList>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00e      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e007      	b.n	8000faa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	b25a      	sxtb	r2, r3
 8000fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000faa:	2301      	movs	r3, #1
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000fae:	e001      	b.n	8000fb4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3738      	adds	r7, #56	; 0x38
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d109      	bne.n	8000ff8 <xQueueGenericReceive+0x30>
	__asm volatile
 8000fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe8:	f383 8811 	msr	BASEPRI, r3
 8000fec:	f3bf 8f6f 	isb	sy
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	e7fe      	b.n	8000ff6 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d103      	bne.n	8001006 <xQueueGenericReceive+0x3e>
 8000ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <xQueueGenericReceive+0x42>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <xQueueGenericReceive+0x44>
 800100a:	2300      	movs	r3, #0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d109      	bne.n	8001024 <xQueueGenericReceive+0x5c>
 8001010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001014:	f383 8811 	msr	BASEPRI, r3
 8001018:	f3bf 8f6f 	isb	sy
 800101c:	f3bf 8f4f 	dsb	sy
 8001020:	623b      	str	r3, [r7, #32]
 8001022:	e7fe      	b.n	8001022 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001024:	f001 fa78 	bl	8002518 <xTaskGetSchedulerState>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <xQueueGenericReceive+0x6c>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <xQueueGenericReceive+0x70>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <xQueueGenericReceive+0x72>
 8001038:	2300      	movs	r3, #0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <xQueueGenericReceive+0x8a>
 800103e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	e7fe      	b.n	8001050 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001052:	f7ff fa75 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105e:	2b00      	cmp	r3, #0
 8001060:	d046      	beq.n	80010f0 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800106c:	f000 f945 	bl	80012fa <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d121      	bne.n	80010ba <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	1e5a      	subs	r2, r3, #1
 800107a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800107e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d104      	bne.n	8001090 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001086:	f001 fb5f 	bl	8002748 <pvTaskIncrementMutexHeldCount>
 800108a:	4602      	mov	r2, r0
 800108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d027      	beq.n	80010e8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109a:	3310      	adds	r3, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f001 f87f 	bl	80021a0 <xTaskRemoveFromEventList>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01f      	beq.n	80010e8 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <xQueueGenericReceive+0x220>)
 80010aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	f3bf 8f4f 	dsb	sy
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	e016      	b.n	80010e8 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80010ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010be:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00f      	beq.n	80010e8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ca:	3324      	adds	r3, #36	; 0x24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 f867 	bl	80021a0 <xTaskRemoveFromEventList>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80010d8:	4b43      	ldr	r3, [pc, #268]	; (80011e8 <xQueueGenericReceive+0x220>)
 80010da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80010e8:	f7ff fa58 	bl	800059c <vPortExitCritical>
				return pdPASS;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e077      	b.n	80011e0 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d103      	bne.n	80010fe <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80010f6:	f7ff fa51 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e070      	b.n	80011e0 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4618      	mov	r0, r3
 800110a:	f001 f8ab 	bl	8002264 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800110e:	2301      	movs	r3, #1
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001112:	f7ff fa43 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001116:	f000 fdff 	bl	8001d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800111a:	f7ff fa11 	bl	8000540 <vPortEnterCritical>
 800111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001124:	b25b      	sxtb	r3, r3
 8001126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112a:	d103      	bne.n	8001134 <xQueueGenericReceive+0x16c>
 800112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800113a:	b25b      	sxtb	r3, r3
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d103      	bne.n	800114a <xQueueGenericReceive+0x182>
 8001142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800114a:	f7ff fa27 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800114e:	1d3a      	adds	r2, r7, #4
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f001 f8a8 	bl	80022ac <xTaskCheckForTimeOut>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d131      	bne.n	80011c6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001164:	f000 f941 	bl	80013ea <prvIsQueueEmpty>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d025      	beq.n	80011ba <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800116e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d108      	bne.n	8001188 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8001176:	f7ff f9e3 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800117a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f9e8 	bl	8002554 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001184:	f7ff fa0a 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118a:	3324      	adds	r3, #36	; 0x24
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f000 ffb7 	bl	8002104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001198:	f000 f8d5 	bl	8001346 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800119c:	f000 fdca 	bl	8001d34 <xTaskResumeAll>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f47f af55 	bne.w	8001052 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <xQueueGenericReceive+0x220>)
 80011aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	f3bf 8f6f 	isb	sy
 80011b8:	e74b      	b.n	8001052 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80011ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011bc:	f000 f8c3 	bl	8001346 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011c0:	f000 fdb8 	bl	8001d34 <xTaskResumeAll>
 80011c4:	e745      	b.n	8001052 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80011c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011c8:	f000 f8bd 	bl	8001346 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80011cc:	f000 fdb2 	bl	8001d34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011d2:	f000 f90a 	bl	80013ea <prvIsQueueEmpty>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f43f af3a 	beq.w	8001052 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80011de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3738      	adds	r7, #56	; 0x38
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	e000ed04 	.word	0xe000ed04

080011ec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <uxQueueMessagesWaiting+0x22>
 80011fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011fe:	f383 8811 	msr	BASEPRI, r3
 8001202:	f3bf 8f6f 	isb	sy
 8001206:	f3bf 8f4f 	dsb	sy
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	e7fe      	b.n	800120c <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800120e:	f7ff f997 	bl	8000540 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001216:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8001218:	f7ff f9c0 	bl	800059c <vPortExitCritical>

	return uxReturn;
 800121c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10d      	bne.n	8001260 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d14d      	bne.n	80012e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	f001 f9f5 	bl	8002640 <xTaskPriorityDisinherit>
 8001256:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	e043      	b.n	80012e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d119      	bne.n	800129a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6898      	ldr	r0, [r3, #8]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	461a      	mov	r2, r3
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	f002 fe87 	bl	8003f84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	441a      	add	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d32b      	bcc.n	80012e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e026      	b.n	80012e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	68d8      	ldr	r0, [r3, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	461a      	mov	r2, r3
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	f002 fe6d 	bl	8003f84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	425b      	negs	r3, r3
 80012b4:	441a      	add	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d207      	bcs.n	80012d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	425b      	negs	r3, r3
 80012d0:	441a      	add	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d105      	bne.n	80012e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80012f0:	697b      	ldr	r3, [r7, #20]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	2b00      	cmp	r3, #0
 800130a:	d018      	beq.n	800133e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	441a      	add	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	d303      	bcc.n	800132e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68d9      	ldr	r1, [r3, #12]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	461a      	mov	r2, r3
 8001338:	6838      	ldr	r0, [r7, #0]
 800133a:	f002 fe23 	bl	8003f84 <memcpy>
	}
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800134e:	f7ff f8f7 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001358:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800135a:	e011      	b.n	8001380 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	2b00      	cmp	r3, #0
 8001362:	d012      	beq.n	800138a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3324      	adds	r3, #36	; 0x24
 8001368:	4618      	mov	r0, r3
 800136a:	f000 ff19 	bl	80021a0 <xTaskRemoveFromEventList>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001374:	f000 fff8 	bl	8002368 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	3b01      	subs	r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001384:	2b00      	cmp	r3, #0
 8001386:	dce9      	bgt.n	800135c <prvUnlockQueue+0x16>
 8001388:	e000      	b.n	800138c <prvUnlockQueue+0x46>
					break;
 800138a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	22ff      	movs	r2, #255	; 0xff
 8001390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001394:	f7ff f902 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001398:	f7ff f8d2 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013a4:	e011      	b.n	80013ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d012      	beq.n	80013d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3310      	adds	r3, #16
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fef4 	bl	80021a0 <xTaskRemoveFromEventList>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80013be:	f000 ffd3 	bl	8002368 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80013c2:	7bbb      	ldrb	r3, [r7, #14]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	dce9      	bgt.n	80013a6 <prvUnlockQueue+0x60>
 80013d2:	e000      	b.n	80013d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80013d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	22ff      	movs	r2, #255	; 0xff
 80013da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80013de:	f7ff f8dd 	bl	800059c <vPortExitCritical>
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013f2:	f7ff f8a5 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80013fe:	2301      	movs	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e001      	b.n	8001408 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001408:	f7ff f8c8 	bl	800059c <vPortExitCritical>

	return xReturn;
 800140c:	68fb      	ldr	r3, [r7, #12]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800141e:	f7ff f88f 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142a:	429a      	cmp	r2, r3
 800142c:	d102      	bne.n	8001434 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800142e:	2301      	movs	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	e001      	b.n	8001438 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001438:	f7ff f8b0 	bl	800059c <vPortExitCritical>

	return xReturn;
 800143c:	68fb      	ldr	r3, [r7, #12]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e014      	b.n	8001482 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <vQueueAddToRegistry+0x4c>)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10b      	bne.n	800147c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001464:	490b      	ldr	r1, [pc, #44]	; (8001494 <vQueueAddToRegistry+0x4c>)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <vQueueAddToRegistry+0x4c>)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800147a:	e005      	b.n	8001488 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3301      	adds	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b07      	cmp	r3, #7
 8001486:	d9e7      	bls.n	8001458 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	200079c0 	.word	0x200079c0

08001498 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80014a8:	f7ff f84a 	bl	8000540 <vPortEnterCritical>
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014b2:	b25b      	sxtb	r3, r3
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	d103      	bne.n	80014c2 <vQueueWaitForMessageRestricted+0x2a>
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ce:	d103      	bne.n	80014d8 <vQueueWaitForMessageRestricted+0x40>
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014d8:	f7ff f860 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d106      	bne.n	80014f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3324      	adds	r3, #36	; 0x24
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fe2d 	bl	800214c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff27 	bl	8001346 <prvUnlockQueue>
	}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af04      	add	r7, sp, #16
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	4613      	mov	r3, r2
 800150e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f923 	bl	8000760 <pvPortMalloc>
 800151a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00e      	beq.n	8001540 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001522:	2050      	movs	r0, #80	; 0x50
 8001524:	f7ff f91c 	bl	8000760 <pvPortMalloc>
 8001528:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	631a      	str	r2, [r3, #48]	; 0x30
 8001536:	e005      	b.n	8001544 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001538:	6978      	ldr	r0, [r7, #20]
 800153a:	f7ff f9d7 	bl	80008ec <vPortFree>
 800153e:	e001      	b.n	8001544 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d013      	beq.n	8001572 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800154a:	88fa      	ldrh	r2, [r7, #6]
 800154c:	2300      	movs	r3, #0
 800154e:	9303      	str	r3, [sp, #12]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	9302      	str	r3, [sp, #8]
 8001554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f000 f80e 	bl	8001582 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001566:	69f8      	ldr	r0, [r7, #28]
 8001568:	f000 f892 	bl	8001690 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800156c:	2301      	movs	r3, #1
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	e002      	b.n	8001578 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001578:	69bb      	ldr	r3, [r7, #24]
	}
 800157a:	4618      	mov	r0, r3
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b088      	sub	sp, #32
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001592:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	461a      	mov	r2, r3
 800159a:	21a5      	movs	r1, #165	; 0xa5
 800159c:	f002 fcfd 	bl	8003f9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80015a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015aa:	3b01      	subs	r3, #1
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	f023 0307 	bic.w	r3, r3, #7
 80015b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <prvInitialiseNewTask+0x56>
 80015c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c8:	f383 8811 	msr	BASEPRI, r3
 80015cc:	f3bf 8f6f 	isb	sy
 80015d0:	f3bf 8f4f 	dsb	sy
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e7fe      	b.n	80015d6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	e012      	b.n	8001604 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	7819      	ldrb	r1, [r3, #0]
 80015e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	4413      	add	r3, r2
 80015ec:	3334      	adds	r3, #52	; 0x34
 80015ee:	460a      	mov	r2, r1
 80015f0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	4413      	add	r3, r2
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3301      	adds	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	2b09      	cmp	r3, #9
 8001608:	d9e9      	bls.n	80015de <prvInitialiseNewTask+0x5c>
 800160a:	e000      	b.n	800160e <prvInitialiseNewTask+0x8c>
		{
			break;
 800160c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001618:	2b04      	cmp	r3, #4
 800161a:	d901      	bls.n	8001620 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800161c:	2304      	movs	r3, #4
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 800162c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162e:	2200      	movs	r2, #0
 8001630:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001634:	3304      	adds	r3, #4
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fdea 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163e:	3318      	adds	r3, #24
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fde5 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800164a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164e:	f1c3 0205 	rsb	r2, r3, #5
 8001652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001654:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800165c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165e:	2200      	movs	r2, #0
 8001660:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001664:	2200      	movs	r2, #0
 8001666:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	68f9      	ldr	r1, [r7, #12]
 800166e:	69b8      	ldr	r0, [r7, #24]
 8001670:	f7fe fe62 	bl	8000338 <pxPortInitialiseStack>
 8001674:	4602      	mov	r2, r0
 8001676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001678:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001686:	bf00      	nop
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001698:	f7fe ff52 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <prvAddNewTaskToReadyList+0xb8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	4a29      	ldr	r2, [pc, #164]	; (8001748 <prvAddNewTaskToReadyList+0xb8>)
 80016a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80016a6:	4b29      	ldr	r3, [pc, #164]	; (800174c <prvAddNewTaskToReadyList+0xbc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80016ae:	4a27      	ldr	r2, [pc, #156]	; (800174c <prvAddNewTaskToReadyList+0xbc>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <prvAddNewTaskToReadyList+0xb8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d110      	bne.n	80016de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80016bc:	f000 fe7a 	bl	80023b4 <prvInitialiseTaskLists>
 80016c0:	e00d      	b.n	80016de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <prvAddNewTaskToReadyList+0xc0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <prvAddNewTaskToReadyList+0xbc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d802      	bhi.n	80016de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80016d8:	4a1c      	ldr	r2, [pc, #112]	; (800174c <prvAddNewTaskToReadyList+0xbc>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <prvAddNewTaskToReadyList+0xc4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	4a1b      	ldr	r2, [pc, #108]	; (8001754 <prvAddNewTaskToReadyList+0xc4>)
 80016e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	2201      	movs	r2, #1
 80016ee:	409a      	lsls	r2, r3
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <prvAddNewTaskToReadyList+0xc8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	4a18      	ldr	r2, [pc, #96]	; (8001758 <prvAddNewTaskToReadyList+0xc8>)
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <prvAddNewTaskToReadyList+0xcc>)
 8001708:	441a      	add	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3304      	adds	r3, #4
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f7fe fd8a 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001716:	f7fe ff41 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <prvAddNewTaskToReadyList+0xc0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00e      	beq.n	8001740 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <prvAddNewTaskToReadyList+0xbc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <prvAddNewTaskToReadyList+0xd0>)
 8001732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f3bf 8f4f 	dsb	sy
 800173c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20007948 	.word	0x20007948
 800174c:	20007870 	.word	0x20007870
 8001750:	20007954 	.word	0x20007954
 8001754:	20007964 	.word	0x20007964
 8001758:	20007950 	.word	0x20007950
 800175c:	20007874 	.word	0x20007874
 8001760:	e000ed04 	.word	0xe000ed04

08001764 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800176c:	f7fe fee8 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <vTaskDelete+0x18>
 8001776:	4b38      	ldr	r3, [pc, #224]	; (8001858 <vTaskDelete+0xf4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	e000      	b.n	800177e <vTaskDelete+0x1a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3304      	adds	r3, #4
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fdad 	bl	80002e4 <uxListRemove>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d115      	bne.n	80017bc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001794:	4931      	ldr	r1, [pc, #196]	; (800185c <vTaskDelete+0xf8>)
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10a      	bne.n	80017bc <vTaskDelete+0x58>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	2201      	movs	r2, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43da      	mvns	r2, r3
 80017b2:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <vTaskDelete+0xfc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4013      	ands	r3, r2
 80017b8:	4a29      	ldr	r2, [pc, #164]	; (8001860 <vTaskDelete+0xfc>)
 80017ba:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3318      	adds	r3, #24
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fd8b 	bl	80002e4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80017ce:	4b25      	ldr	r3, [pc, #148]	; (8001864 <vTaskDelete+0x100>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a23      	ldr	r2, [pc, #140]	; (8001864 <vTaskDelete+0x100>)
 80017d6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <vTaskDelete+0xf4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d10b      	bne.n	80017fa <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3304      	adds	r3, #4
 80017e6:	4619      	mov	r1, r3
 80017e8:	481f      	ldr	r0, [pc, #124]	; (8001868 <vTaskDelete+0x104>)
 80017ea:	f7fe fd1e 	bl	800022a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <vTaskDelete+0x108>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	4a1d      	ldr	r2, [pc, #116]	; (800186c <vTaskDelete+0x108>)
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e009      	b.n	800180e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <vTaskDelete+0x10c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3b01      	subs	r3, #1
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <vTaskDelete+0x10c>)
 8001802:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 fe51 	bl	80024ac <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800180a:	f000 fe5f 	bl	80024cc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800180e:	f7fe fec5 	bl	800059c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <vTaskDelete+0x110>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d01a      	beq.n	8001850 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <vTaskDelete+0xf4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	429a      	cmp	r2, r3
 8001822:	d115      	bne.n	8001850 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <vTaskDelete+0x114>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d009      	beq.n	8001840 <vTaskDelete+0xdc>
 800182c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001830:	f383 8811 	msr	BASEPRI, r3
 8001834:	f3bf 8f6f 	isb	sy
 8001838:	f3bf 8f4f 	dsb	sy
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	e7fe      	b.n	800183e <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <vTaskDelete+0x118>)
 8001842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	f3bf 8f4f 	dsb	sy
 800184c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20007870 	.word	0x20007870
 800185c:	20007874 	.word	0x20007874
 8001860:	20007950 	.word	0x20007950
 8001864:	20007964 	.word	0x20007964
 8001868:	2000791c 	.word	0x2000791c
 800186c:	20007930 	.word	0x20007930
 8001870:	20007948 	.word	0x20007948
 8001874:	20007954 	.word	0x20007954
 8001878:	20007970 	.word	0x20007970
 800187c:	e000ed04 	.word	0xe000ed04

08001880 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d016      	beq.n	80018c0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <vTaskDelay+0x60>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <vTaskDelay+0x2e>
 800189a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189e:	f383 8811 	msr	BASEPRI, r3
 80018a2:	f3bf 8f6f 	isb	sy
 80018a6:	f3bf 8f4f 	dsb	sy
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	e7fe      	b.n	80018ac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80018ae:	f000 fa33 	bl	8001d18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80018b2:	2100      	movs	r1, #0
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 ff5b 	bl	8002770 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80018ba:	f000 fa3b 	bl	8001d34 <xTaskResumeAll>
 80018be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d107      	bne.n	80018d6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <vTaskDelay+0x64>)
 80018c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f3bf 8f4f 	dsb	sy
 80018d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20007970 	.word	0x20007970
 80018e4:	e000ed04 	.word	0xe000ed04

080018e8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d909      	bls.n	8001910 <vTaskPrioritySet+0x28>
 80018fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001900:	f383 8811 	msr	BASEPRI, r3
 8001904:	f3bf 8f6f 	isb	sy
 8001908:	f3bf 8f4f 	dsb	sy
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	e7fe      	b.n	800190e <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b04      	cmp	r3, #4
 8001914:	d901      	bls.n	800191a <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001916:	2304      	movs	r3, #4
 8001918:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800191a:	f7fe fe11 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <vTaskPrioritySet+0x42>
 8001924:	4b43      	ldr	r3, [pc, #268]	; (8001a34 <vTaskPrioritySet+0x14c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	e000      	b.n	800192c <vTaskPrioritySet+0x44>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d074      	beq.n	8001a26 <vTaskPrioritySet+0x13e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	429a      	cmp	r2, r3
 8001942:	d90d      	bls.n	8001960 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8001944:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <vTaskPrioritySet+0x14c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	429a      	cmp	r2, r3
 800194c:	d00f      	beq.n	800196e <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800194e:	4b39      	ldr	r3, [pc, #228]	; (8001a34 <vTaskPrioritySet+0x14c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d809      	bhi.n	800196e <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 800195a:	2301      	movs	r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	e006      	b.n	800196e <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <vTaskPrioritySet+0x14c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	429a      	cmp	r2, r3
 8001968:	d101      	bne.n	800196e <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800196a:	2301      	movs	r3, #1
 800196c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	429a      	cmp	r2, r3
 800197e:	d102      	bne.n	8001986 <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db04      	blt.n	800199e <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f1c3 0205 	rsb	r2, r3, #5
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	6959      	ldr	r1, [r3, #20]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4a22      	ldr	r2, [pc, #136]	; (8001a38 <vTaskPrioritySet+0x150>)
 80019ae:	4413      	add	r3, r2
 80019b0:	4299      	cmp	r1, r3
 80019b2:	d101      	bne.n	80019b8 <vTaskPrioritySet+0xd0>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <vTaskPrioritySet+0xd2>
 80019b8:	2300      	movs	r3, #0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d028      	beq.n	8001a10 <vTaskPrioritySet+0x128>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	3304      	adds	r3, #4
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fc8e 	bl	80002e4 <uxListRemove>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <vTaskPrioritySet+0xfa>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80019ce:	2201      	movs	r2, #1
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <vTaskPrioritySet+0x154>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4013      	ands	r3, r2
 80019de:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <vTaskPrioritySet+0x154>)
 80019e0:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	2201      	movs	r2, #1
 80019e8:	409a      	lsls	r2, r3
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <vTaskPrioritySet+0x154>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <vTaskPrioritySet+0x154>)
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <vTaskPrioritySet+0x150>)
 8001a02:	441a      	add	r2, r3
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	3304      	adds	r3, #4
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f7fe fc0d 	bl	800022a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <vTaskPrioritySet+0x13e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <vTaskPrioritySet+0x158>)
 8001a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f3bf 8f4f 	dsb	sy
 8001a22:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8001a26:	f7fe fdb9 	bl	800059c <vPortExitCritical>
	}
 8001a2a:	bf00      	nop
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20007870 	.word	0x20007870
 8001a38:	20007874 	.word	0x20007874
 8001a3c:	20007950 	.word	0x20007950
 8001a40:	e000ed04 	.word	0xe000ed04

08001a44 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001a4c:	f7fe fd78 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <vTaskSuspend+0x18>
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <vTaskSuspend+0xf0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	e000      	b.n	8001a5e <vTaskSuspend+0x1a>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3304      	adds	r3, #4
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fc3d 	bl	80002e4 <uxListRemove>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d115      	bne.n	8001a9c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a74:	4930      	ldr	r1, [pc, #192]	; (8001b38 <vTaskSuspend+0xf4>)
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10a      	bne.n	8001a9c <vTaskSuspend+0x58>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43da      	mvns	r2, r3
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <vTaskSuspend+0xf8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4013      	ands	r3, r2
 8001a98:	4a28      	ldr	r2, [pc, #160]	; (8001b3c <vTaskSuspend+0xf8>)
 8001a9a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d004      	beq.n	8001aae <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3318      	adds	r3, #24
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fc1b 	bl	80002e4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4822      	ldr	r0, [pc, #136]	; (8001b40 <vTaskSuspend+0xfc>)
 8001ab6:	f7fe fbb8 	bl	800022a <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8001aba:	f7fe fd6f 	bl	800059c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <vTaskSuspend+0x100>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <vTaskSuspend+0x8e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001ac6:	f7fe fd3b 	bl	8000540 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001aca:	f000 fcff 	bl	80024cc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001ace:	f7fe fd65 	bl	800059c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <vTaskSuspend+0xf0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d126      	bne.n	8001b2a <vTaskSuspend+0xe6>
		{
			if( xSchedulerRunning != pdFALSE )
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <vTaskSuspend+0x100>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d016      	beq.n	8001b12 <vTaskSuspend+0xce>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <vTaskSuspend+0x104>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <vTaskSuspend+0xbc>
 8001aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af0:	f383 8811 	msr	BASEPRI, r3
 8001af4:	f3bf 8f6f 	isb	sy
 8001af8:	f3bf 8f4f 	dsb	sy
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	e7fe      	b.n	8001afe <vTaskSuspend+0xba>
				portYIELD_WITHIN_API();
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <vTaskSuspend+0x108>)
 8001b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f3bf 8f4f 	dsb	sy
 8001b0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001b10:	e00b      	b.n	8001b2a <vTaskSuspend+0xe6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <vTaskSuspend+0xfc>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <vTaskSuspend+0x10c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d103      	bne.n	8001b26 <vTaskSuspend+0xe2>
					pxCurrentTCB = NULL;
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <vTaskSuspend+0xf0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
	}
 8001b24:	e001      	b.n	8001b2a <vTaskSuspend+0xe6>
					vTaskSwitchContext();
 8001b26:	f000 fa6d 	bl	8002004 <vTaskSwitchContext>
	}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20007870 	.word	0x20007870
 8001b38:	20007874 	.word	0x20007874
 8001b3c:	20007950 	.word	0x20007950
 8001b40:	20007934 	.word	0x20007934
 8001b44:	20007954 	.word	0x20007954
 8001b48:	20007970 	.word	0x20007970
 8001b4c:	e000ed04 	.word	0xe000ed04
 8001b50:	20007948 	.word	0x20007948

08001b54 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <prvTaskIsTaskSuspended+0x2a>
 8001b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b6e:	f383 8811 	msr	BASEPRI, r3
 8001b72:	f3bf 8f6f 	isb	sy
 8001b76:	f3bf 8f4f 	dsb	sy
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e7fe      	b.n	8001b7c <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <prvTaskIsTaskSuspended+0x6c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d101      	bne.n	8001b8c <prvTaskIsTaskSuspended+0x38>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <prvTaskIsTaskSuspended+0x3a>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00f      	beq.n	8001bb2 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <prvTaskIsTaskSuspended+0x70>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d00a      	beq.n	8001bb2 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <prvTaskIsTaskSuspended+0x54>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <prvTaskIsTaskSuspended+0x56>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001bb2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	20007934 	.word	0x20007934
 8001bc4:	20007908 	.word	0x20007908

08001bc8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <vTaskResume+0x26>
 8001bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bde:	f383 8811 	msr	BASEPRI, r3
 8001be2:	f3bf 8f6f 	isb	sy
 8001be6:	f3bf 8f4f 	dsb	sy
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	e7fe      	b.n	8001bec <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d039      	beq.n	8001c68 <vTaskResume+0xa0>
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <vTaskResume+0xa8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d034      	beq.n	8001c68 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8001bfe:	f7fe fc9f 	bl	8000540 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7ff ffa6 	bl	8001b54 <prvTaskIsTaskSuspended>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d02a      	beq.n	8001c64 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3304      	adds	r3, #4
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fb66 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <vTaskResume+0xac>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <vTaskResume+0xac>)
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <vTaskResume+0xb0>)
 8001c38:	441a      	add	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4610      	mov	r0, r2
 8001c42:	f7fe faf2 	bl	800022a <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <vTaskResume+0xa8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d307      	bcc.n	8001c64 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <vTaskResume+0xb4>)
 8001c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f3bf 8f4f 	dsb	sy
 8001c60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001c64:	f7fe fc9a 	bl	800059c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20007870 	.word	0x20007870
 8001c74:	20007950 	.word	0x20007950
 8001c78:	20007874 	.word	0x20007874
 8001c7c:	e000ed04 	.word	0xe000ed04

08001c80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001c86:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <vTaskStartScheduler+0x80>)
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2282      	movs	r2, #130	; 0x82
 8001c92:	491c      	ldr	r1, [pc, #112]	; (8001d04 <vTaskStartScheduler+0x84>)
 8001c94:	481c      	ldr	r0, [pc, #112]	; (8001d08 <vTaskStartScheduler+0x88>)
 8001c96:	f7ff fc33 	bl	8001500 <xTaskCreate>
 8001c9a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d102      	bne.n	8001ca8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001ca2:	f000 fdcb 	bl	800283c <xTimerCreateTimerTask>
 8001ca6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d115      	bne.n	8001cda <vTaskStartScheduler+0x5a>
 8001cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb2:	f383 8811 	msr	BASEPRI, r3
 8001cb6:	f3bf 8f6f 	isb	sy
 8001cba:	f3bf 8f4f 	dsb	sy
 8001cbe:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <vTaskStartScheduler+0x8c>)
 8001cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <vTaskStartScheduler+0x90>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <vTaskStartScheduler+0x94>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001cd4:	f7fe fba8 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001cd8:	e00d      	b.n	8001cf6 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d109      	bne.n	8001cf6 <vTaskStartScheduler+0x76>
 8001ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce6:	f383 8811 	msr	BASEPRI, r3
 8001cea:	f3bf 8f6f 	isb	sy
 8001cee:	f3bf 8f4f 	dsb	sy
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	e7fe      	b.n	8001cf4 <vTaskStartScheduler+0x74>
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000796c 	.word	0x2000796c
 8001d04:	08003fac 	.word	0x08003fac
 8001d08:	08002381 	.word	0x08002381
 8001d0c:	20007968 	.word	0x20007968
 8001d10:	20007954 	.word	0x20007954
 8001d14:	2000794c 	.word	0x2000794c

08001d18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <vTaskSuspendAll+0x18>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3301      	adds	r3, #1
 8001d22:	4a03      	ldr	r2, [pc, #12]	; (8001d30 <vTaskSuspendAll+0x18>)
 8001d24:	6013      	str	r3, [r2, #0]
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	20007970 	.word	0x20007970

08001d34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <xTaskResumeAll+0x114>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <xTaskResumeAll+0x2a>
 8001d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	e7fe      	b.n	8001d5c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001d5e:	f7fe fbef 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001d62:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <xTaskResumeAll+0x114>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	4a37      	ldr	r2, [pc, #220]	; (8001e48 <xTaskResumeAll+0x114>)
 8001d6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d6c:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <xTaskResumeAll+0x114>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d161      	bne.n	8001e38 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d74:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <xTaskResumeAll+0x118>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05d      	beq.n	8001e38 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d7c:	e02e      	b.n	8001ddc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001d7e:	4b34      	ldr	r3, [pc, #208]	; (8001e50 <xTaskResumeAll+0x11c>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3318      	adds	r3, #24
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe faaa 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3304      	adds	r3, #4
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe faa5 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	2201      	movs	r2, #1
 8001da0:	409a      	lsls	r2, r3
 8001da2:	4b2c      	ldr	r3, [pc, #176]	; (8001e54 <xTaskResumeAll+0x120>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	4a2a      	ldr	r2, [pc, #168]	; (8001e54 <xTaskResumeAll+0x120>)
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4a27      	ldr	r2, [pc, #156]	; (8001e58 <xTaskResumeAll+0x124>)
 8001dba:	441a      	add	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f7fe fa31 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <xTaskResumeAll+0x128>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d302      	bcc.n	8001ddc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001dd6:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <xTaskResumeAll+0x12c>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <xTaskResumeAll+0x11c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1cc      	bne.n	8001d7e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001dea:	f000 fb6f 	bl	80024cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <xTaskResumeAll+0x130>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d010      	beq.n	8001e1c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001dfa:	f000 f847 	bl	8001e8c <xTaskIncrementTick>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <xTaskResumeAll+0x12c>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f1      	bne.n	8001dfa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <xTaskResumeAll+0x130>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <xTaskResumeAll+0x12c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001e24:	2301      	movs	r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <xTaskResumeAll+0x134>)
 8001e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	f3bf 8f4f 	dsb	sy
 8001e34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001e38:	f7fe fbb0 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20007970 	.word	0x20007970
 8001e4c:	20007948 	.word	0x20007948
 8001e50:	20007908 	.word	0x20007908
 8001e54:	20007950 	.word	0x20007950
 8001e58:	20007874 	.word	0x20007874
 8001e5c:	20007870 	.word	0x20007870
 8001e60:	2000795c 	.word	0x2000795c
 8001e64:	20007958 	.word	0x20007958
 8001e68:	e000ed04 	.word	0xe000ed04

08001e6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <xTaskGetTickCount+0x1c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001e78:	687b      	ldr	r3, [r7, #4]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	2000794c 	.word	0x2000794c

08001e8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e96:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <xTaskIncrementTick+0x14c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 808c 	bne.w	8001fb8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001ea0:	4b4e      	ldr	r3, [pc, #312]	; (8001fdc <xTaskIncrementTick+0x150>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001ea8:	4a4c      	ldr	r2, [pc, #304]	; (8001fdc <xTaskIncrementTick+0x150>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d11f      	bne.n	8001ef4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001eb4:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <xTaskIncrementTick+0x154>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <xTaskIncrementTick+0x46>
 8001ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec2:	f383 8811 	msr	BASEPRI, r3
 8001ec6:	f3bf 8f6f 	isb	sy
 8001eca:	f3bf 8f4f 	dsb	sy
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	e7fe      	b.n	8001ed0 <xTaskIncrementTick+0x44>
 8001ed2:	4b43      	ldr	r3, [pc, #268]	; (8001fe0 <xTaskIncrementTick+0x154>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <xTaskIncrementTick+0x158>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a40      	ldr	r2, [pc, #256]	; (8001fe0 <xTaskIncrementTick+0x154>)
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4a40      	ldr	r2, [pc, #256]	; (8001fe4 <xTaskIncrementTick+0x158>)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b40      	ldr	r3, [pc, #256]	; (8001fe8 <xTaskIncrementTick+0x15c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	4a3e      	ldr	r2, [pc, #248]	; (8001fe8 <xTaskIncrementTick+0x15c>)
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	f000 faec 	bl	80024cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ef4:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <xTaskIncrementTick+0x160>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d34d      	bcc.n	8001f9a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001efe:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <xTaskIncrementTick+0x154>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <xTaskIncrementTick+0x80>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <xTaskIncrementTick+0x82>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <xTaskIncrementTick+0x160>)
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	601a      	str	r2, [r3, #0]
					break;
 8001f1a:	e03e      	b.n	8001f9a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f1c:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <xTaskIncrementTick+0x154>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d203      	bcs.n	8001f3c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001f34:	4a2d      	ldr	r2, [pc, #180]	; (8001fec <xTaskIncrementTick+0x160>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
						break;
 8001f3a:	e02e      	b.n	8001f9a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe f9cf 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d004      	beq.n	8001f58 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	3318      	adds	r3, #24
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe f9c6 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <xTaskIncrementTick+0x164>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	4a22      	ldr	r2, [pc, #136]	; (8001ff0 <xTaskIncrementTick+0x164>)
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <xTaskIncrementTick+0x168>)
 8001f78:	441a      	add	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4610      	mov	r0, r2
 8001f82:	f7fe f952 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <xTaskIncrementTick+0x16c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3b4      	bcc.n	8001efe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001f94:	2301      	movs	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f98:	e7b1      	b.n	8001efe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <xTaskIncrementTick+0x16c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa0:	4914      	ldr	r1, [pc, #80]	; (8001ff4 <xTaskIncrementTick+0x168>)
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d907      	bls.n	8001fc2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e004      	b.n	8001fc2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <xTaskIncrementTick+0x170>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	4a0f      	ldr	r2, [pc, #60]	; (8001ffc <xTaskIncrementTick+0x170>)
 8001fc0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <xTaskIncrementTick+0x174>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001fce:	697b      	ldr	r3, [r7, #20]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20007970 	.word	0x20007970
 8001fdc:	2000794c 	.word	0x2000794c
 8001fe0:	20007900 	.word	0x20007900
 8001fe4:	20007904 	.word	0x20007904
 8001fe8:	20007960 	.word	0x20007960
 8001fec:	20007968 	.word	0x20007968
 8001ff0:	20007950 	.word	0x20007950
 8001ff4:	20007874 	.word	0x20007874
 8001ff8:	20007870 	.word	0x20007870
 8001ffc:	20007958 	.word	0x20007958
 8002000:	2000795c 	.word	0x2000795c

08002004 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800200a:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <vTaskSwitchContext+0xec>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <vTaskSwitchContext+0xf0>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002018:	e065      	b.n	80020e6 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800201a:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <vTaskSwitchContext+0xf0>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002020:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <vTaskSwitchContext+0xf4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	429a      	cmp	r2, r3
 8002036:	d111      	bne.n	800205c <vTaskSwitchContext+0x58>
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	3304      	adds	r3, #4
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	429a      	cmp	r2, r3
 8002042:	d10b      	bne.n	800205c <vTaskSwitchContext+0x58>
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	3308      	adds	r3, #8
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	429a      	cmp	r2, r3
 800204e:	d105      	bne.n	800205c <vTaskSwitchContext+0x58>
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	330c      	adds	r3, #12
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	429a      	cmp	r2, r3
 800205a:	d008      	beq.n	800206e <vTaskSwitchContext+0x6a>
 800205c:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <vTaskSwitchContext+0xf4>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <vTaskSwitchContext+0xf4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3334      	adds	r3, #52	; 0x34
 8002066:	4619      	mov	r1, r3
 8002068:	4610      	mov	r0, r2
 800206a:	f001 fc44 	bl	80038f6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800206e:	4b23      	ldr	r3, [pc, #140]	; (80020fc <vTaskSwitchContext+0xf8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800207c:	7afb      	ldrb	r3, [r7, #11]
 800207e:	f1c3 031f 	rsb	r3, r3, #31
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	491e      	ldr	r1, [pc, #120]	; (8002100 <vTaskSwitchContext+0xfc>)
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d109      	bne.n	80020ac <vTaskSwitchContext+0xa8>
	__asm volatile
 8002098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209c:	f383 8811 	msr	BASEPRI, r3
 80020a0:	f3bf 8f6f 	isb	sy
 80020a4:	f3bf 8f4f 	dsb	sy
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	e7fe      	b.n	80020aa <vTaskSwitchContext+0xa6>
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <vTaskSwitchContext+0xfc>)
 80020b8:	4413      	add	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	3308      	adds	r3, #8
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d104      	bne.n	80020dc <vTaskSwitchContext+0xd8>
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <vTaskSwitchContext+0xf4>)
 80020e4:	6013      	str	r3, [r2, #0]
}
 80020e6:	bf00      	nop
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20007970 	.word	0x20007970
 80020f4:	2000795c 	.word	0x2000795c
 80020f8:	20007870 	.word	0x20007870
 80020fc:	20007950 	.word	0x20007950
 8002100:	20007874 	.word	0x20007874

08002104 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <vTaskPlaceOnEventList+0x24>
 8002114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002118:	f383 8811 	msr	BASEPRI, r3
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	f3bf 8f4f 	dsb	sy
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	e7fe      	b.n	8002126 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <vTaskPlaceOnEventList+0x44>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3318      	adds	r3, #24
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7fe f89e 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002136:	2101      	movs	r1, #1
 8002138:	6838      	ldr	r0, [r7, #0]
 800213a:	f000 fb19 	bl	8002770 <prvAddCurrentTaskToDelayedList>
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20007870 	.word	0x20007870

0800214c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <vTaskPlaceOnEventListRestricted+0x26>
 800215e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002162:	f383 8811 	msr	BASEPRI, r3
 8002166:	f3bf 8f6f 	isb	sy
 800216a:	f3bf 8f4f 	dsb	sy
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e7fe      	b.n	8002170 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <vTaskPlaceOnEventListRestricted+0x50>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	3318      	adds	r3, #24
 8002178:	4619      	mov	r1, r3
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7fe f855 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	68b8      	ldr	r0, [r7, #8]
 8002190:	f000 faee 	bl	8002770 <prvAddCurrentTaskToDelayedList>
	}
 8002194:	bf00      	nop
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20007870 	.word	0x20007870

080021a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <xTaskRemoveFromEventList+0x2a>
 80021b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ba:	f383 8811 	msr	BASEPRI, r3
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e7fe      	b.n	80021c8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	3318      	adds	r3, #24
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f888 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <xTaskRemoveFromEventList+0xac>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d11c      	bne.n	8002216 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	3304      	adds	r3, #4
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe f87f 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	2201      	movs	r2, #1
 80021ec:	409a      	lsls	r2, r3
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <xTaskRemoveFromEventList+0xb0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	4a16      	ldr	r2, [pc, #88]	; (8002250 <xTaskRemoveFromEventList+0xb0>)
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4a13      	ldr	r2, [pc, #76]	; (8002254 <xTaskRemoveFromEventList+0xb4>)
 8002206:	441a      	add	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	3304      	adds	r3, #4
 800220c:	4619      	mov	r1, r3
 800220e:	4610      	mov	r0, r2
 8002210:	f7fe f80b 	bl	800022a <vListInsertEnd>
 8002214:	e005      	b.n	8002222 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3318      	adds	r3, #24
 800221a:	4619      	mov	r1, r3
 800221c:	480e      	ldr	r0, [pc, #56]	; (8002258 <xTaskRemoveFromEventList+0xb8>)
 800221e:	f7fe f804 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <xTaskRemoveFromEventList+0xbc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	429a      	cmp	r2, r3
 800222e:	d905      	bls.n	800223c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002230:	2301      	movs	r3, #1
 8002232:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <xTaskRemoveFromEventList+0xc0>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e001      	b.n	8002240 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002240:	697b      	ldr	r3, [r7, #20]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20007970 	.word	0x20007970
 8002250:	20007950 	.word	0x20007950
 8002254:	20007874 	.word	0x20007874
 8002258:	20007908 	.word	0x20007908
 800225c:	20007870 	.word	0x20007870
 8002260:	2000795c 	.word	0x2000795c

08002264 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <vTaskSetTimeOutState+0x22>
 8002272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002276:	f383 8811 	msr	BASEPRI, r3
 800227a:	f3bf 8f6f 	isb	sy
 800227e:	f3bf 8f4f 	dsb	sy
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e7fe      	b.n	8002284 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <vTaskSetTimeOutState+0x40>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <vTaskSetTimeOutState+0x44>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	605a      	str	r2, [r3, #4]
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20007960 	.word	0x20007960
 80022a8:	2000794c 	.word	0x2000794c

080022ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d109      	bne.n	80022d0 <xTaskCheckForTimeOut+0x24>
 80022bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c0:	f383 8811 	msr	BASEPRI, r3
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	e7fe      	b.n	80022ce <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <xTaskCheckForTimeOut+0x3e>
 80022d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022da:	f383 8811 	msr	BASEPRI, r3
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	f3bf 8f4f 	dsb	sy
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	e7fe      	b.n	80022e8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80022ea:	f7fe f929 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <xTaskCheckForTimeOut+0xb4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d102      	bne.n	8002304 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	e026      	b.n	8002352 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <xTaskCheckForTimeOut+0xb8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d007      	beq.n	8002320 <xTaskCheckForTimeOut+0x74>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	429a      	cmp	r2, r3
 8002318:	d802      	bhi.n	8002320 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800231a:	2301      	movs	r3, #1
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e018      	b.n	8002352 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	1ad2      	subs	r2, r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d20e      	bcs.n	800234e <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1acb      	subs	r3, r1, r3
 800233c:	441a      	add	r2, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ff8e 	bl	8002264 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e001      	b.n	8002352 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 800234e:	2301      	movs	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8002352:	f7fe f923 	bl	800059c <vPortExitCritical>

	return xReturn;
 8002356:	697b      	ldr	r3, [r7, #20]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	2000794c 	.word	0x2000794c
 8002364:	20007960 	.word	0x20007960

08002368 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <vTaskMissedYield+0x14>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	2000795c 	.word	0x2000795c

08002380 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002388:	f000 f854 	bl	8002434 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800238c:	4b07      	ldr	r3, [pc, #28]	; (80023ac <prvIdleTask+0x2c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d907      	bls.n	80023a4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <prvIdleTask+0x30>)
 8002396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80023a4:	f001 faad 	bl	8003902 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80023a8:	e7ee      	b.n	8002388 <prvIdleTask+0x8>
 80023aa:	bf00      	nop
 80023ac:	20007874 	.word	0x20007874
 80023b0:	e000ed04 	.word	0xe000ed04

080023b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	e00c      	b.n	80023da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4a12      	ldr	r2, [pc, #72]	; (8002414 <prvInitialiseTaskLists+0x60>)
 80023cc:	4413      	add	r3, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fd fefe 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3301      	adds	r3, #1
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d9ef      	bls.n	80023c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <prvInitialiseTaskLists+0x64>)
 80023e2:	f7fd fef5 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80023e6:	480d      	ldr	r0, [pc, #52]	; (800241c <prvInitialiseTaskLists+0x68>)
 80023e8:	f7fd fef2 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80023ec:	480c      	ldr	r0, [pc, #48]	; (8002420 <prvInitialiseTaskLists+0x6c>)
 80023ee:	f7fd feef 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80023f2:	480c      	ldr	r0, [pc, #48]	; (8002424 <prvInitialiseTaskLists+0x70>)
 80023f4:	f7fd feec 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80023f8:	480b      	ldr	r0, [pc, #44]	; (8002428 <prvInitialiseTaskLists+0x74>)
 80023fa:	f7fd fee9 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <prvInitialiseTaskLists+0x78>)
 8002400:	4a05      	ldr	r2, [pc, #20]	; (8002418 <prvInitialiseTaskLists+0x64>)
 8002402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <prvInitialiseTaskLists+0x7c>)
 8002406:	4a05      	ldr	r2, [pc, #20]	; (800241c <prvInitialiseTaskLists+0x68>)
 8002408:	601a      	str	r2, [r3, #0]
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20007874 	.word	0x20007874
 8002418:	200078d8 	.word	0x200078d8
 800241c:	200078ec 	.word	0x200078ec
 8002420:	20007908 	.word	0x20007908
 8002424:	2000791c 	.word	0x2000791c
 8002428:	20007934 	.word	0x20007934
 800242c:	20007900 	.word	0x20007900
 8002430:	20007904 	.word	0x20007904

08002434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800243a:	e028      	b.n	800248e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800243c:	f7ff fc6c 	bl	8001d18 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <prvCheckTasksWaitingTermination+0x6c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002450:	f7ff fc70 	bl	8001d34 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d119      	bne.n	800248e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800245a:	f7fe f871 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <prvCheckTasksWaitingTermination+0x6c>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	3304      	adds	r3, #4
 800246a:	4618      	mov	r0, r3
 800246c:	f7fd ff3a 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <prvCheckTasksWaitingTermination+0x70>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3b01      	subs	r3, #1
 8002476:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <prvCheckTasksWaitingTermination+0x70>)
 8002478:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <prvCheckTasksWaitingTermination+0x74>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	3b01      	subs	r3, #1
 8002480:	4a09      	ldr	r2, [pc, #36]	; (80024a8 <prvCheckTasksWaitingTermination+0x74>)
 8002482:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002484:	f7fe f88a 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002488:	6838      	ldr	r0, [r7, #0]
 800248a:	f000 f80f 	bl	80024ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <prvCheckTasksWaitingTermination+0x74>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1d2      	bne.n	800243c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000791c 	.word	0x2000791c
 80024a4:	20007948 	.word	0x20007948
 80024a8:	20007930 	.word	0x20007930

080024ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fa17 	bl	80008ec <vPortFree>
			vPortFree( pxTCB );
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fa14 	bl	80008ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <prvResetNextTaskUnblockTime+0x44>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <prvResetNextTaskUnblockTime+0x14>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <prvResetNextTaskUnblockTime+0x16>
 80024e0:	2300      	movs	r3, #0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <prvResetNextTaskUnblockTime+0x48>)
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80024ee:	e008      	b.n	8002502 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <prvResetNextTaskUnblockTime+0x44>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4a05      	ldr	r2, [pc, #20]	; (8002514 <prvResetNextTaskUnblockTime+0x48>)
 8002500:	6013      	str	r3, [r2, #0]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20007900 	.word	0x20007900
 8002514:	20007968 	.word	0x20007968

08002518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <xTaskGetSchedulerState+0x34>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002526:	2301      	movs	r3, #1
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	e008      	b.n	800253e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <xTaskGetSchedulerState+0x38>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002534:	2302      	movs	r3, #2
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	e001      	b.n	800253e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800253a:	2300      	movs	r3, #0
 800253c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800253e:	687b      	ldr	r3, [r7, #4]
	}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	20007954 	.word	0x20007954
 8002550:	20007970 	.word	0x20007970

08002554 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d062      	beq.n	800262c <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256a:	4b32      	ldr	r3, [pc, #200]	; (8002634 <vTaskPriorityInherit+0xe0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	429a      	cmp	r2, r3
 8002572:	d25b      	bcs.n	800262c <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db06      	blt.n	800258a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <vTaskPriorityInherit+0xe0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	f1c3 0205 	rsb	r2, r3, #5
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6959      	ldr	r1, [r3, #20]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4a27      	ldr	r2, [pc, #156]	; (8002638 <vTaskPriorityInherit+0xe4>)
 800259c:	4413      	add	r3, r2
 800259e:	4299      	cmp	r1, r3
 80025a0:	d101      	bne.n	80025a6 <vTaskPriorityInherit+0x52>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <vTaskPriorityInherit+0x54>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d03a      	beq.n	8002622 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3304      	adds	r3, #4
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd fe97 	bl	80002e4 <uxListRemove>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d115      	bne.n	80025e8 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c0:	491d      	ldr	r1, [pc, #116]	; (8002638 <vTaskPriorityInherit+0xe4>)
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10a      	bne.n	80025e8 <vTaskPriorityInherit+0x94>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	2201      	movs	r2, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43da      	mvns	r2, r3
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <vTaskPriorityInherit+0xe8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4013      	ands	r3, r2
 80025e4:	4a15      	ldr	r2, [pc, #84]	; (800263c <vTaskPriorityInherit+0xe8>)
 80025e6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <vTaskPriorityInherit+0xe0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	2201      	movs	r2, #1
 80025f8:	409a      	lsls	r2, r3
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <vTaskPriorityInherit+0xe8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	4a0e      	ldr	r2, [pc, #56]	; (800263c <vTaskPriorityInherit+0xe8>)
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4a09      	ldr	r2, [pc, #36]	; (8002638 <vTaskPriorityInherit+0xe4>)
 8002612:	441a      	add	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3304      	adds	r3, #4
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f7fd fe05 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002620:	e004      	b.n	800262c <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <vTaskPriorityInherit+0xe0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20007870 	.word	0x20007870
 8002638:	20007874 	.word	0x20007874
 800263c:	20007950 	.word	0x20007950

08002640 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d06c      	beq.n	8002730 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002656:	4b39      	ldr	r3, [pc, #228]	; (800273c <xTaskPriorityDisinherit+0xfc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	429a      	cmp	r2, r3
 800265e:	d009      	beq.n	8002674 <xTaskPriorityDisinherit+0x34>
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	e7fe      	b.n	8002672 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	2b00      	cmp	r3, #0
 800267a:	d109      	bne.n	8002690 <xTaskPriorityDisinherit+0x50>
 800267c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002680:	f383 8811 	msr	BASEPRI, r3
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	e7fe      	b.n	800268e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	1e5a      	subs	r2, r3, #1
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d044      	beq.n	8002730 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d140      	bne.n	8002730 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	3304      	adds	r3, #4
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd fe16 	bl	80002e4 <uxListRemove>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d115      	bne.n	80026ea <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c2:	491f      	ldr	r1, [pc, #124]	; (8002740 <xTaskPriorityDisinherit+0x100>)
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <xTaskPriorityDisinherit+0xaa>
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	2201      	movs	r2, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <xTaskPriorityDisinherit+0x104>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4013      	ands	r3, r2
 80026e6:	4a17      	ldr	r2, [pc, #92]	; (8002744 <xTaskPriorityDisinherit+0x104>)
 80026e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	f1c3 0205 	rsb	r2, r3, #5
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	2201      	movs	r2, #1
 8002704:	409a      	lsls	r2, r3
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <xTaskPriorityDisinherit+0x104>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <xTaskPriorityDisinherit+0x104>)
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4a08      	ldr	r2, [pc, #32]	; (8002740 <xTaskPriorityDisinherit+0x100>)
 800271e:	441a      	add	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	3304      	adds	r3, #4
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f7fd fd7f 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800272c:	2301      	movs	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002730:	697b      	ldr	r3, [r7, #20]
	}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20007870 	.word	0x20007870
 8002740:	20007874 	.word	0x20007874
 8002744:	20007950 	.word	0x20007950

08002748 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800274c:	4b07      	ldr	r3, [pc, #28]	; (800276c <pvTaskIncrementMutexHeldCount+0x24>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <pvTaskIncrementMutexHeldCount+0x24>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800275a:	3201      	adds	r2, #1
 800275c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 800275e:	4b03      	ldr	r3, [pc, #12]	; (800276c <pvTaskIncrementMutexHeldCount+0x24>)
 8002760:	681b      	ldr	r3, [r3, #0]
	}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	20007870 	.word	0x20007870

08002770 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800277a:	4b29      	ldr	r3, [pc, #164]	; (8002820 <prvAddCurrentTaskToDelayedList+0xb0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3304      	adds	r3, #4
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fdac 	bl	80002e4 <uxListRemove>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10b      	bne.n	80027aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	2201      	movs	r2, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	4b21      	ldr	r3, [pc, #132]	; (8002828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4013      	ands	r3, r2
 80027a6:	4a20      	ldr	r2, [pc, #128]	; (8002828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80027a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d10a      	bne.n	80027c8 <prvAddCurrentTaskToDelayedList+0x58>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027b8:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3304      	adds	r3, #4
 80027be:	4619      	mov	r1, r3
 80027c0:	481a      	ldr	r0, [pc, #104]	; (800282c <prvAddCurrentTaskToDelayedList+0xbc>)
 80027c2:	f7fd fd32 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80027c6:	e026      	b.n	8002816 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d209      	bcs.n	80027f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <prvAddCurrentTaskToDelayedList+0xc0>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3304      	adds	r3, #4
 80027ea:	4619      	mov	r1, r3
 80027ec:	4610      	mov	r0, r2
 80027ee:	f7fd fd40 	bl	8000272 <vListInsert>
}
 80027f2:	e010      	b.n	8002816 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <prvAddCurrentTaskToDelayedList+0xc4>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3304      	adds	r3, #4
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7fd fd36 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	429a      	cmp	r2, r3
 800280e:	d202      	bcs.n	8002816 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002810:	4a09      	ldr	r2, [pc, #36]	; (8002838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	6013      	str	r3, [r2, #0]
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	2000794c 	.word	0x2000794c
 8002824:	20007870 	.word	0x20007870
 8002828:	20007950 	.word	0x20007950
 800282c:	20007934 	.word	0x20007934
 8002830:	20007904 	.word	0x20007904
 8002834:	20007900 	.word	0x20007900
 8002838:	20007968 	.word	0x20007968

0800283c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002846:	f000 fa8f 	bl	8002d68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <xTimerCreateTimerTask+0x54>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <xTimerCreateTimerTask+0x58>)
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	2303      	movs	r3, #3
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2300      	movs	r3, #0
 800285c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002860:	490d      	ldr	r1, [pc, #52]	; (8002898 <xTimerCreateTimerTask+0x5c>)
 8002862:	480e      	ldr	r0, [pc, #56]	; (800289c <xTimerCreateTimerTask+0x60>)
 8002864:	f7fe fe4c 	bl	8001500 <xTaskCreate>
 8002868:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <xTimerCreateTimerTask+0x48>
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	e7fe      	b.n	8002882 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002884:	687b      	ldr	r3, [r7, #4]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200079a4 	.word	0x200079a4
 8002894:	200079a8 	.word	0x200079a8
 8002898:	08003fb4 	.word	0x08003fb4
 800289c:	080029b9 	.word	0x080029b9

080028a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <xTimerGenericCommand+0x2c>
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	e7fe      	b.n	80028ca <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <xTimerGenericCommand+0x94>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d02a      	beq.n	800292a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b05      	cmp	r3, #5
 80028e4:	dc18      	bgt.n	8002918 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80028e6:	f7ff fe17 	bl	8002518 <xTaskGetSchedulerState>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d109      	bne.n	8002904 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <xTimerGenericCommand+0x94>)
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	f107 0114 	add.w	r1, r7, #20
 80028f8:	2300      	movs	r3, #0
 80028fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028fc:	f7fe f9d6 	bl	8000cac <xQueueGenericSend>
 8002900:	6278      	str	r0, [r7, #36]	; 0x24
 8002902:	e012      	b.n	800292a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <xTimerGenericCommand+0x94>)
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	f107 0114 	add.w	r1, r7, #20
 800290c:	2300      	movs	r3, #0
 800290e:	2200      	movs	r2, #0
 8002910:	f7fe f9cc 	bl	8000cac <xQueueGenericSend>
 8002914:	6278      	str	r0, [r7, #36]	; 0x24
 8002916:	e008      	b.n	800292a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <xTimerGenericCommand+0x94>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	f107 0114 	add.w	r1, r7, #20
 8002920:	2300      	movs	r3, #0
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	f7fe fabc 	bl	8000ea0 <xQueueGenericSendFromISR>
 8002928:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800292c:	4618      	mov	r0, r3
 800292e:	3728      	adds	r7, #40	; 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200079a4 	.word	0x200079a4

08002938 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af02      	add	r7, sp, #8
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <prvProcessExpiredTimer+0x7c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3304      	adds	r3, #4
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fcc7 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d121      	bne.n	80029a2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	18d1      	adds	r1, r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	6978      	ldr	r0, [r7, #20]
 800296c:	f000 f8c8 	bl	8002b00 <prvInsertTimerInActiveList>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d015      	beq.n	80029a2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002976:	2300      	movs	r3, #0
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2300      	movs	r3, #0
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	2100      	movs	r1, #0
 8002980:	6978      	ldr	r0, [r7, #20]
 8002982:	f7ff ff8d 	bl	80028a0 <xTimerGenericCommand>
 8002986:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <prvProcessExpiredTimer+0x6a>
 800298e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002992:	f383 8811 	msr	BASEPRI, r3
 8002996:	f3bf 8f6f 	isb	sy
 800299a:	f3bf 8f4f 	dsb	sy
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e7fe      	b.n	80029a0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	4798      	blx	r3
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	2000799c 	.word	0x2000799c

080029b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029c0:	f107 0308 	add.w	r3, r7, #8
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f857 	bl	8002a78 <prvGetNextExpireTime>
 80029ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4619      	mov	r1, r3
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f803 	bl	80029dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80029d6:	f000 f8d5 	bl	8002b84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029da:	e7f1      	b.n	80029c0 <prvTimerTask+0x8>

080029dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80029e6:	f7ff f997 	bl	8001d18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029ea:	f107 0308 	add.w	r3, r7, #8
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f866 	bl	8002ac0 <prvSampleTimeNow>
 80029f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d130      	bne.n	8002a5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <prvProcessTimerOrBlockTask+0x3c>
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d806      	bhi.n	8002a18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002a0a:	f7ff f993 	bl	8001d34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002a0e:	68f9      	ldr	r1, [r7, #12]
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff91 	bl	8002938 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002a16:	e024      	b.n	8002a62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <prvProcessTimerOrBlockTask+0x90>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <prvProcessTimerOrBlockTask+0x94>)
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f7fe fd2b 	bl	8001498 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002a42:	f7ff f977 	bl	8001d34 <xTaskResumeAll>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <prvProcessTimerOrBlockTask+0x98>)
 8002a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	f3bf 8f6f 	isb	sy
}
 8002a5c:	e001      	b.n	8002a62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002a5e:	f7ff f969 	bl	8001d34 <xTaskResumeAll>
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200079a0 	.word	0x200079a0
 8002a70:	200079a4 	.word	0x200079a4
 8002a74:	e000ed04 	.word	0xe000ed04

08002a78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <prvGetNextExpireTime+0x44>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf0c      	ite	eq
 8002a8a:	2301      	moveq	r3, #1
 8002a8c:	2300      	movne	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d105      	bne.n	8002aaa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <prvGetNextExpireTime+0x44>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e001      	b.n	8002aae <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002aae:	68fb      	ldr	r3, [r7, #12]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	2000799c 	.word	0x2000799c

08002ac0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002ac8:	f7ff f9d0 	bl	8001e6c <xTaskGetTickCount>
 8002acc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <prvSampleTimeNow+0x3c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d205      	bcs.n	8002ae4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002ad8:	f000 f8e6 	bl	8002ca8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e002      	b.n	8002aea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <prvSampleTimeNow+0x3c>)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002af0:	68fb      	ldr	r3, [r7, #12]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200079ac 	.word	0x200079ac

08002b00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d812      	bhi.n	8002b4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	1ad2      	subs	r2, r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d302      	bcc.n	8002b3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002b34:	2301      	movs	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	e01b      	b.n	8002b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <prvInsertTimerInActiveList+0x7c>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3304      	adds	r3, #4
 8002b42:	4619      	mov	r1, r3
 8002b44:	4610      	mov	r0, r2
 8002b46:	f7fd fb94 	bl	8000272 <vListInsert>
 8002b4a:	e012      	b.n	8002b72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d206      	bcs.n	8002b62 <prvInsertTimerInActiveList+0x62>
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d302      	bcc.n	8002b62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	e007      	b.n	8002b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <prvInsertTimerInActiveList+0x80>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	f7fd fb80 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002b72:	697b      	ldr	r3, [r7, #20]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	200079a0 	.word	0x200079a0
 8002b80:	2000799c 	.word	0x2000799c

08002b84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08c      	sub	sp, #48	; 0x30
 8002b88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b8a:	e07a      	b.n	8002c82 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	db77      	blt.n	8002c82 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd fb9e 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff ff88 	bl	8002ac0 <prvSampleTimeNow>
 8002bb0:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	d863      	bhi.n	8002c80 <prvProcessReceivedCommands+0xfc>
 8002bb8:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <prvProcessReceivedCommands+0x3c>)
 8002bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbe:	bf00      	nop
 8002bc0:	08002be9 	.word	0x08002be9
 8002bc4:	08002be9 	.word	0x08002be9
 8002bc8:	08002be9 	.word	0x08002be9
 8002bcc:	08002c83 	.word	0x08002c83
 8002bd0:	08002c43 	.word	0x08002c43
 8002bd4:	08002c79 	.word	0x08002c79
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002be9 	.word	0x08002be9
 8002be0:	08002c83 	.word	0x08002c83
 8002be4:	08002c43 	.word	0x08002c43
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	18d1      	adds	r1, r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a3a      	ldr	r2, [r7, #32]
 8002bf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bf6:	f7ff ff83 	bl	8002b00 <prvInsertTimerInActiveList>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d040      	beq.n	8002c82 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c06:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d138      	bne.n	8002c82 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	441a      	add	r2, r3
 8002c18:	2300      	movs	r3, #0
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	2100      	movs	r1, #0
 8002c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c22:	f7ff fe3d 	bl	80028a0 <xTimerGenericCommand>
 8002c26:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d129      	bne.n	8002c82 <prvProcessReceivedCommands+0xfe>
 8002c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	e7fe      	b.n	8002c40 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <prvProcessReceivedCommands+0xe0>
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	e7fe      	b.n	8002c62 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	18d1      	adds	r1, r2, r3
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	6a3a      	ldr	r2, [r7, #32]
 8002c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c72:	f7ff ff45 	bl	8002b00 <prvInsertTimerInActiveList>
					break;
 8002c76:	e004      	b.n	8002c82 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c7a:	f7fd fe37 	bl	80008ec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002c7e:	e000      	b.n	8002c82 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002c80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <prvProcessReceivedCommands+0x120>)
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	f107 0108 	add.w	r1, r7, #8
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f7fe f99b 	bl	8000fc8 <xQueueGenericReceive>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f47f af79 	bne.w	8002b8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002c9a:	bf00      	nop
 8002c9c:	3728      	adds	r7, #40	; 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200079a4 	.word	0x200079a4

08002ca8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002cae:	e044      	b.n	8002d3a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <prvSwitchTimerLists+0xb8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002cba:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <prvSwitchTimerLists+0xb8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fb0b 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	6938      	ldr	r0, [r7, #16]
 8002cd4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d12d      	bne.n	8002d3a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d90e      	bls.n	8002d0e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <prvSwitchTimerLists+0xb8>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f7fd fab3 	bl	8000272 <vListInsert>
 8002d0c:	e015      	b.n	8002d3a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002d0e:	2300      	movs	r3, #0
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	2300      	movs	r3, #0
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	2100      	movs	r1, #0
 8002d18:	6938      	ldr	r0, [r7, #16]
 8002d1a:	f7ff fdc1 	bl	80028a0 <xTimerGenericCommand>
 8002d1e:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <prvSwitchTimerLists+0x92>
 8002d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	e7fe      	b.n	8002d38 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <prvSwitchTimerLists+0xb8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1b5      	bne.n	8002cb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <prvSwitchTimerLists+0xb8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <prvSwitchTimerLists+0xbc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <prvSwitchTimerLists+0xb8>)
 8002d50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002d52:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <prvSwitchTimerLists+0xbc>)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6013      	str	r3, [r2, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	2000799c 	.word	0x2000799c
 8002d64:	200079a0 	.word	0x200079a0

08002d68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002d6c:	f7fd fbe8 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <prvCheckForValidListAndQueue+0x54>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d11d      	bne.n	8002db4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002d78:	4811      	ldr	r0, [pc, #68]	; (8002dc0 <prvCheckForValidListAndQueue+0x58>)
 8002d7a:	f7fd fa29 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002d7e:	4811      	ldr	r0, [pc, #68]	; (8002dc4 <prvCheckForValidListAndQueue+0x5c>)
 8002d80:	f7fd fa26 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002d84:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <prvCheckForValidListAndQueue+0x60>)
 8002d86:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <prvCheckForValidListAndQueue+0x58>)
 8002d88:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <prvCheckForValidListAndQueue+0x64>)
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	; (8002dc4 <prvCheckForValidListAndQueue+0x5c>)
 8002d8e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002d90:	2200      	movs	r2, #0
 8002d92:	210c      	movs	r1, #12
 8002d94:	2005      	movs	r0, #5
 8002d96:	f7fd ff31 	bl	8000bfc <xQueueGenericCreate>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <prvCheckForValidListAndQueue+0x54>)
 8002d9e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <prvCheckForValidListAndQueue+0x54>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <prvCheckForValidListAndQueue+0x54>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4908      	ldr	r1, [pc, #32]	; (8002dd0 <prvCheckForValidListAndQueue+0x68>)
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fb4a 	bl	8001448 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002db4:	f7fd fbf2 	bl	800059c <vPortExitCritical>
}
 8002db8:	bf00      	nop
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	200079a4 	.word	0x200079a4
 8002dc0:	20007974 	.word	0x20007974
 8002dc4:	20007988 	.word	0x20007988
 8002dc8:	2000799c 	.word	0x2000799c
 8002dcc:	200079a0 	.word	0x200079a0
 8002dd0:	08003fbc 	.word	0x08003fbc

08002dd4 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <DAC_SetChannel1Data+0x34>)
 8002de6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	3308      	adds	r3, #8
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	461a      	mov	r2, r3
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	6013      	str	r3, [r2, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40007400 	.word	0x40007400

08002e0c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <DMA_Init+0xac>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e36:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e42:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e4e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e5a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0307 	bic.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	4313      	orrs	r3, r2
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	60da      	str	r2, [r3, #12]
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	f01c803f 	.word	0xf01c803f

08002ebc <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002eda:	e005      	b.n	8002ee8 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 0201 	bic.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	601a      	str	r2, [r3, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
 8002f10:	e001      	b.n	8002f16 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a15      	ldr	r2, [pc, #84]	; (8002f90 <DMA_GetFlagStatus+0x6c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d802      	bhi.n	8002f44 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <DMA_GetFlagStatus+0x70>)
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	e001      	b.n	8002f48 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <DMA_GetFlagStatus+0x74>)
 8002f46:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e002      	b.n	8002f60 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002f66:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
 8002f7a:	e001      	b.n	8002f80 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	4002640f 	.word	0x4002640f
 8002f94:	40026000 	.word	0x40026000
 8002f98:	40026400 	.word	0x40026400

08002f9c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a10      	ldr	r2, [pc, #64]	; (8002fec <DMA_ClearFlag+0x50>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d802      	bhi.n	8002fb4 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002fae:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <DMA_ClearFlag+0x54>)
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e001      	b.n	8002fb8 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <DMA_ClearFlag+0x58>)
 8002fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002fc8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002fd0:	e006      	b.n	8002fe0 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002fd8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	6093      	str	r3, [r2, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	4002640f 	.word	0x4002640f
 8002ff0:	40026000 	.word	0x40026000
 8002ff4:	40026400 	.word	0x40026400

08002ff8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	e076      	b.n	8003102 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003014:	2201      	movs	r2, #1
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4013      	ands	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	429a      	cmp	r2, r3
 800302e:	d165      	bne.n	80030fc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	2103      	movs	r1, #3
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	401a      	ands	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	791b      	ldrb	r3, [r3, #4]
 800304e:	4619      	mov	r1, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	791b      	ldrb	r3, [r3, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d003      	beq.n	800306e <GPIO_Init+0x76>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	791b      	ldrb	r3, [r3, #4]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d12e      	bne.n	80030cc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2103      	movs	r1, #3
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	401a      	ands	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	795b      	ldrb	r3, [r3, #5]
 800308c:	4619      	mov	r1, r3
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	4619      	mov	r1, r3
 80030a6:	2301      	movs	r3, #1
 80030a8:	408b      	lsls	r3, r1
 80030aa:	43db      	mvns	r3, r3
 80030ac:	401a      	ands	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	7992      	ldrb	r2, [r2, #6]
 80030ba:	4611      	mov	r1, r2
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	b292      	uxth	r2, r2
 80030c0:	fa01 f202 	lsl.w	r2, r1, r2
 80030c4:	b292      	uxth	r2, r2
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2103      	movs	r1, #3
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	401a      	ands	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	79db      	ldrb	r3, [r3, #7]
 80030ec:	4619      	mov	r1, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	3301      	adds	r3, #1
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b0f      	cmp	r3, #15
 8003106:	d985      	bls.n	8003014 <GPIO_Init+0x1c>
    }
  }
}
 8003108:	bf00      	nop
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d006      	beq.n	8003134 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003126:	490a      	ldr	r1, [pc, #40]	; (8003150 <RCC_AHB1PeriphClockCmd+0x3c>)
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <RCC_AHB1PeriphClockCmd+0x3c>)
 800312a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4313      	orrs	r3, r2
 8003130:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8003132:	e006      	b.n	8003142 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003134:	4906      	ldr	r1, [pc, #24]	; (8003150 <RCC_AHB1PeriphClockCmd+0x3c>)
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <RCC_AHB1PeriphClockCmd+0x3c>)
 8003138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	43db      	mvns	r3, r3
 800313e:	4013      	ands	r3, r2
 8003140:	630b      	str	r3, [r1, #48]	; 0x30
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800

08003154 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	819a      	strh	r2, [r3, #12]
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	891b      	ldrh	r3, [r3, #8]
 8003186:	b29a      	uxth	r2, r3
 8003188:	887b      	ldrh	r3, [r7, #2]
 800318a:	4013      	ands	r3, r2
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	e001      	b.n	800319c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8003198:	2300      	movs	r3, #0
 800319a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	4a10      	ldr	r2, [pc, #64]	; (80031fc <STM_EVAL_LEDInit+0x50>)
 80031ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031be:	2101      	movs	r1, #1
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ffa7 	bl	8003114 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <STM_EVAL_LEDInit+0x54>)
 80031ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80031d0:	2301      	movs	r3, #1
 80031d2:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80031d4:	2300      	movs	r3, #0
 80031d6:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80031dc:	2302      	movs	r3, #2
 80031de:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	4a08      	ldr	r2, [pc, #32]	; (8003204 <STM_EVAL_LEDInit+0x58>)
 80031e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e8:	f107 0208 	add.w	r2, r7, #8
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff ff02 	bl	8002ff8 <GPIO_Init>
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	08004088 	.word	0x08004088
 8003200:	08004080 	.word	0x08004080
 8003204:	20000004 	.word	0x20000004

08003208 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	4a09      	ldr	r2, [pc, #36]	; (800323c <STM_EVAL_LEDToggle+0x34>)
 8003216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321a:	79fa      	ldrb	r2, [r7, #7]
 800321c:	4907      	ldr	r1, [pc, #28]	; (800323c <STM_EVAL_LEDToggle+0x34>)
 800321e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003222:	6952      	ldr	r2, [r2, #20]
 8003224:	79f9      	ldrb	r1, [r7, #7]
 8003226:	4806      	ldr	r0, [pc, #24]	; (8003240 <STM_EVAL_LEDToggle+0x38>)
 8003228:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 800322c:	404a      	eors	r2, r1
 800322e:	615a      	str	r2, [r3, #20]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	20000004 	.word	0x20000004
 8003240:	08004080 	.word	0x08004080

08003244 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8003248:	4b38      	ldr	r3, [pc, #224]	; (800332c <Audio_MAL_IRQHandler+0xe8>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b38      	ldr	r3, [pc, #224]	; (8003330 <Audio_MAL_IRQHandler+0xec>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4619      	mov	r1, r3
 8003252:	4610      	mov	r0, r2
 8003254:	f7ff fe66 	bl	8002f24 <DMA_GetFlagStatus>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d064      	beq.n	8003328 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800325e:	4b35      	ldr	r3, [pc, #212]	; (8003334 <Audio_MAL_IRQHandler+0xf0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d04c      	beq.n	8003300 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8003266:	bf00      	nop
 8003268:	4b30      	ldr	r3, [pc, #192]	; (800332c <Audio_MAL_IRQHandler+0xe8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fe41 	bl	8002ef4 <DMA_GetCmdStatus>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f7      	bne.n	8003268 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8003278:	4b2c      	ldr	r3, [pc, #176]	; (800332c <Audio_MAL_IRQHandler+0xe8>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <Audio_MAL_IRQHandler+0xec>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4619      	mov	r1, r3
 8003282:	4610      	mov	r0, r2
 8003284:	f7ff fe8a 	bl	8002f9c <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8003288:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <Audio_MAL_IRQHandler+0xf4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	4b2b      	ldr	r3, [pc, #172]	; (800333c <Audio_MAL_IRQHandler+0xf8>)
 8003290:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8003292:	4b28      	ldr	r3, [pc, #160]	; (8003334 <Audio_MAL_IRQHandler+0xf0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800329a:	4293      	cmp	r3, r2
 800329c:	bf28      	it	cs
 800329e:	4613      	movcs	r3, r2
 80032a0:	4a26      	ldr	r2, [pc, #152]	; (800333c <Audio_MAL_IRQHandler+0xf8>)
 80032a2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80032a4:	4b21      	ldr	r3, [pc, #132]	; (800332c <Audio_MAL_IRQHandler+0xe8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4924      	ldr	r1, [pc, #144]	; (800333c <Audio_MAL_IRQHandler+0xf8>)
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fdae 	bl	8002e0c <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80032b0:	4b1e      	ldr	r3, [pc, #120]	; (800332c <Audio_MAL_IRQHandler+0xe8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2101      	movs	r1, #1
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fe00 	bl	8002ebc <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80032bc:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <Audio_MAL_IRQHandler+0xf4>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <Audio_MAL_IRQHandler+0xf0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d203      	bcs.n	80032d2 <Audio_MAL_IRQHandler+0x8e>
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <Audio_MAL_IRQHandler+0xf0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	e000      	b.n	80032d4 <Audio_MAL_IRQHandler+0x90>
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <Audio_MAL_IRQHandler+0xfc>)
 80032d4:	4413      	add	r3, r2
 80032d6:	4a18      	ldr	r2, [pc, #96]	; (8003338 <Audio_MAL_IRQHandler+0xf4>)
 80032d8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80032da:	4b16      	ldr	r3, [pc, #88]	; (8003334 <Audio_MAL_IRQHandler+0xf0>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <Audio_MAL_IRQHandler+0xf0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80032e6:	428b      	cmp	r3, r1
 80032e8:	bf28      	it	cs
 80032ea:	460b      	movcs	r3, r1
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	4a11      	ldr	r2, [pc, #68]	; (8003334 <Audio_MAL_IRQHandler+0xf0>)
 80032f0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80032f2:	4b0e      	ldr	r3, [pc, #56]	; (800332c <Audio_MAL_IRQHandler+0xe8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2101      	movs	r1, #1
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fddf 	bl	8002ebc <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80032fe:	e013      	b.n	8003328 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <Audio_MAL_IRQHandler+0xe8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fdd8 	bl	8002ebc <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800330c:	4b07      	ldr	r3, [pc, #28]	; (800332c <Audio_MAL_IRQHandler+0xe8>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <Audio_MAL_IRQHandler+0xec>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4619      	mov	r1, r3
 8003316:	4610      	mov	r0, r2
 8003318:	f7ff fe40 	bl	8002f9c <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <Audio_MAL_IRQHandler+0xf4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f83c 	bl	80033a0 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8003328:	bf00      	nop
 800332a:	bd80      	pop	{r7, pc}
 800332c:	2000001c 	.word	0x2000001c
 8003330:	20000020 	.word	0x20000020
 8003334:	20000014 	.word	0x20000014
 8003338:	20007a00 	.word	0x20007a00
 800333c:	20007a40 	.word	0x20007a40
 8003340:	0001fffe 	.word	0x0001fffe

08003344 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003348:	f7ff ff7c 	bl	8003244 <Audio_MAL_IRQHandler>
}
 800334c:	bf00      	nop
 800334e:	bd80      	pop	{r7, pc}

08003350 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003354:	f7ff ff76 	bl	8003244 <Audio_MAL_IRQHandler>
}
 8003358:	bf00      	nop
 800335a:	bd80      	pop	{r7, pc}

0800335c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8003360:	2102      	movs	r1, #2
 8003362:	480d      	ldr	r0, [pc, #52]	; (8003398 <SPI3_IRQHandler+0x3c>)
 8003364:	f7ff ff05 	bl	8003172 <SPI_I2S_GetFlagStatus>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d011      	beq.n	8003392 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <SPI3_IRQHandler+0x40>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d106      	bne.n	8003384 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8003376:	f000 f81e 	bl	80033b6 <EVAL_AUDIO_GetSampleCallBack>
 800337a:	4603      	mov	r3, r0
 800337c:	4619      	mov	r1, r3
 800337e:	2004      	movs	r0, #4
 8003380:	f7ff fd28 	bl	8002dd4 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8003384:	f000 f817 	bl	80033b6 <EVAL_AUDIO_GetSampleCallBack>
 8003388:	4603      	mov	r3, r0
 800338a:	4619      	mov	r1, r3
 800338c:	4802      	ldr	r0, [pc, #8]	; (8003398 <SPI3_IRQHandler+0x3c>)
 800338e:	f7ff fee1 	bl	8003154 <SPI_I2S_SendData>
  }
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40003c00 	.word	0x40003c00
 800339c:	20000018 	.word	0x20000018

080033a0 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 80033aa:	bf00      	nop
}
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <NVIC_SetPriorityGrouping+0x44>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033e4:	4013      	ands	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 80033f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fa:	4a04      	ldr	r2, [pc, #16]	; (800340c <NVIC_SetPriorityGrouping+0x44>)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	60d3      	str	r3, [r2, #12]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <main>:


/*-----------------------------------------------------------*/

int main(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af02      	add	r7, sp, #8
	prvSetupHardware();
 8003416:	f000 fa80 	bl	800391a <prvSetupHardware>

	activeTaskQueueHandle = xQueueCreate( 	mainQUEUE_LENGTH, sizeof( dd_task_t ) );
 800341a:	2200      	movs	r2, #0
 800341c:	2118      	movs	r1, #24
 800341e:	200a      	movs	r0, #10
 8003420:	f7fd fbec 	bl	8000bfc <xQueueGenericCreate>
 8003424:	4602      	mov	r2, r0
 8003426:	4b35      	ldr	r3, [pc, #212]	; (80034fc <main+0xec>)
 8003428:	601a      	str	r2, [r3, #0]
	vQueueAddToRegistry( activeTaskQueueHandle, "ActiveTasks" );
 800342a:	4b34      	ldr	r3, [pc, #208]	; (80034fc <main+0xec>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4934      	ldr	r1, [pc, #208]	; (8003500 <main+0xf0>)
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe f809 	bl	8001448 <vQueueAddToRegistry>

	completedTaskQueueHandle = xQueueCreate( 	mainQUEUE_LENGTH, sizeof( dd_task_t ) );
 8003436:	2200      	movs	r2, #0
 8003438:	2118      	movs	r1, #24
 800343a:	200a      	movs	r0, #10
 800343c:	f7fd fbde 	bl	8000bfc <xQueueGenericCreate>
 8003440:	4602      	mov	r2, r0
 8003442:	4b30      	ldr	r3, [pc, #192]	; (8003504 <main+0xf4>)
 8003444:	601a      	str	r2, [r3, #0]
	vQueueAddToRegistry( completedTaskQueueHandle, "CompletedTasks" );
 8003446:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <main+0xf4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	492f      	ldr	r1, [pc, #188]	; (8003508 <main+0xf8>)
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd fffb 	bl	8001448 <vQueueAddToRegistry>

	overdueTaskQueueHandle = xQueueCreate( 	mainQUEUE_LENGTH, sizeof( dd_task_t ) );
 8003452:	2200      	movs	r2, #0
 8003454:	2118      	movs	r1, #24
 8003456:	200a      	movs	r0, #10
 8003458:	f7fd fbd0 	bl	8000bfc <xQueueGenericCreate>
 800345c:	4602      	mov	r2, r0
 800345e:	4b2b      	ldr	r3, [pc, #172]	; (800350c <main+0xfc>)
 8003460:	601a      	str	r2, [r3, #0]
	vQueueAddToRegistry( overdueTaskQueueHandle, "OverdueTasks" );
 8003462:	4b2a      	ldr	r3, [pc, #168]	; (800350c <main+0xfc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	492a      	ldr	r1, [pc, #168]	; (8003510 <main+0x100>)
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd ffed 	bl	8001448 <vQueueAddToRegistry>

	runningTaskQueueHandle = xQueueCreate( 	mainQUEUE_LENGTH, sizeof( dd_task_t ) );
 800346e:	2200      	movs	r2, #0
 8003470:	2118      	movs	r1, #24
 8003472:	200a      	movs	r0, #10
 8003474:	f7fd fbc2 	bl	8000bfc <xQueueGenericCreate>
 8003478:	4602      	mov	r2, r0
 800347a:	4b26      	ldr	r3, [pc, #152]	; (8003514 <main+0x104>)
 800347c:	601a      	str	r2, [r3, #0]
	vQueueAddToRegistry( runningTaskQueueHandle, "RunningTasks" );
 800347e:	4b25      	ldr	r3, [pc, #148]	; (8003514 <main+0x104>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4925      	ldr	r1, [pc, #148]	; (8003518 <main+0x108>)
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd ffdf 	bl	8001448 <vQueueAddToRegistry>

	xTaskCreate( deadlineDrivenScheduler_FTASK, "DDS", configMINIMAL_STACK_SIZE, NULL, PRIORITY_SCHEDULER, &handle_deadlineDrivenScheduler_FTASK);
 800348a:	4b24      	ldr	r3, [pc, #144]	; (800351c <main+0x10c>)
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	2304      	movs	r3, #4
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2300      	movs	r3, #0
 8003494:	2282      	movs	r2, #130	; 0x82
 8003496:	4922      	ldr	r1, [pc, #136]	; (8003520 <main+0x110>)
 8003498:	4822      	ldr	r0, [pc, #136]	; (8003524 <main+0x114>)
 800349a:	f7fe f831 	bl	8001500 <xTaskCreate>
	xTaskCreate( monitorTask_FTASK, "MT", configMINIMAL_STACK_SIZE, NULL, PRIORITY_MONITOR, NULL);
 800349e:	2300      	movs	r3, #0
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	2302      	movs	r3, #2
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2300      	movs	r3, #0
 80034a8:	2282      	movs	r2, #130	; 0x82
 80034aa:	491f      	ldr	r1, [pc, #124]	; (8003528 <main+0x118>)
 80034ac:	481f      	ldr	r0, [pc, #124]	; (800352c <main+0x11c>)
 80034ae:	f7fe f827 	bl	8001500 <xTaskCreate>

	xTaskCreate( DDT_GEN_1_FTASK, "DDTG1", configMINIMAL_STACK_SIZE, NULL, PRIORITY_GENERATOR, NULL);
 80034b2:	2300      	movs	r3, #0
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	2303      	movs	r3, #3
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2300      	movs	r3, #0
 80034bc:	2282      	movs	r2, #130	; 0x82
 80034be:	491c      	ldr	r1, [pc, #112]	; (8003530 <main+0x120>)
 80034c0:	481c      	ldr	r0, [pc, #112]	; (8003534 <main+0x124>)
 80034c2:	f7fe f81d 	bl	8001500 <xTaskCreate>
	xTaskCreate( DDT_GEN_2_FTASK, "DDTG2", configMINIMAL_STACK_SIZE, NULL, PRIORITY_GENERATOR, NULL);
 80034c6:	2300      	movs	r3, #0
 80034c8:	9301      	str	r3, [sp, #4]
 80034ca:	2303      	movs	r3, #3
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	2300      	movs	r3, #0
 80034d0:	2282      	movs	r2, #130	; 0x82
 80034d2:	4919      	ldr	r1, [pc, #100]	; (8003538 <main+0x128>)
 80034d4:	4819      	ldr	r0, [pc, #100]	; (800353c <main+0x12c>)
 80034d6:	f7fe f813 	bl	8001500 <xTaskCreate>
	xTaskCreate( DDT_GEN_3_FTASK, "DDTG3", configMINIMAL_STACK_SIZE, NULL, PRIORITY_GENERATOR, NULL);
 80034da:	2300      	movs	r3, #0
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	2303      	movs	r3, #3
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	2300      	movs	r3, #0
 80034e4:	2282      	movs	r2, #130	; 0x82
 80034e6:	4916      	ldr	r1, [pc, #88]	; (8003540 <main+0x130>)
 80034e8:	4816      	ldr	r0, [pc, #88]	; (8003544 <main+0x134>)
 80034ea:	f7fe f809 	bl	8001500 <xTaskCreate>

	vTaskStartScheduler();
 80034ee:	f7fe fbc7 	bl	8001c80 <vTaskStartScheduler>

	return 0;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200079b0 	.word	0x200079b0
 8003500:	08003fdc 	.word	0x08003fdc
 8003504:	200079b4 	.word	0x200079b4
 8003508:	08003fe8 	.word	0x08003fe8
 800350c:	200079b8 	.word	0x200079b8
 8003510:	08003ff8 	.word	0x08003ff8
 8003514:	200079bc 	.word	0x200079bc
 8003518:	08004008 	.word	0x08004008
 800351c:	20007a7c 	.word	0x20007a7c
 8003520:	08004018 	.word	0x08004018
 8003524:	080035d9 	.word	0x080035d9
 8003528:	0800401c 	.word	0x0800401c
 800352c:	0800372d 	.word	0x0800372d
 8003530:	08004020 	.word	0x08004020
 8003534:	08003765 	.word	0x08003765
 8003538:	08004028 	.word	0x08004028
 800353c:	080037e9 	.word	0x080037e9
 8003540:	08004030 	.word	0x08004030
 8003544:	0800386d 	.word	0x0800386d

08003548 <create_dd_task>:

void create_dd_task(task_type_t type, uint32_t absolute_deadline, uint32_t task_id)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08e      	sub	sp, #56	; 0x38
 800354c:	af02      	add	r7, sp, #8
 800354e:	4603      	mov	r3, r0
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	73fb      	strb	r3, [r7, #15]

	TickType_t currentTicks = xTaskGetTickCount();
 8003556:	f7fe fc89 	bl	8001e6c <xTaskGetTickCount>
 800355a:	62f8      	str	r0, [r7, #44]	; 0x2c

	TaskHandle_t taskHandleToPass;

	xTaskCreate
	(
		TASK_MAP[task_id-1],
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3b01      	subs	r3, #1
	xTaskCreate
 8003560:	4a19      	ldr	r2, [pc, #100]	; (80035c8 <create_dd_task+0x80>)
 8003562:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
		PC_NAME_MAP[task_id-1],
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3b01      	subs	r3, #1
	xTaskCreate
 800356a:	4a18      	ldr	r2, [pc, #96]	; (80035cc <create_dd_task+0x84>)
 800356c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	2300      	movs	r3, #0
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2300      	movs	r3, #0
 800357c:	2282      	movs	r2, #130	; 0x82
 800357e:	f7fd ffbf 	bl	8001500 <xTaskCreate>
		NULL,
		PRIORITY_UNSCHEDULED,
		&(taskHandleToPass)
	);

	dd_task_t taskToCreate =
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	753b      	strb	r3, [r7, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	61fb      	str	r3, [r7, #28]
	{
			.t_handle = taskHandleToPass,
			.type = type,
			.task_id = task_id,
			.release_time = currentTicks,
			.absolute_deadline = currentTicks + absolute_deadline,
 8003592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4413      	add	r3, r2
	dd_task_t taskToCreate =
 8003598:	623b      	str	r3, [r7, #32]
 800359a:	2300      	movs	r3, #0
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
			.completion_time = 0
	};

	vTaskSuspend(taskHandleToPass);
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe fa4f 	bl	8001a44 <vTaskSuspend>

	xQueueSend(activeTaskQueueHandle, &taskToCreate, (TickType_t) WAIT_FOR_QUEUE);
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <create_dd_task+0x88>)
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	f107 0110 	add.w	r1, r7, #16
 80035ae:	2300      	movs	r3, #0
 80035b0:	220a      	movs	r2, #10
 80035b2:	f7fd fb7b 	bl	8000cac <xQueueGenericSend>

	vTaskResume(handle_deadlineDrivenScheduler_FTASK);
 80035b6:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <create_dd_task+0x8c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fb04 	bl	8001bc8 <vTaskResume>
}
 80035c0:	bf00      	nop
 80035c2:	3730      	adds	r7, #48	; 0x30
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	08004098 	.word	0x08004098
 80035cc:	20000024 	.word	0x20000024
 80035d0:	200079b0 	.word	0x200079b0
 80035d4:	20007a7c 	.word	0x20007a7c

080035d8 <deadlineDrivenScheduler_FTASK>:


/*-----------------------------------------------------------*/

static void deadlineDrivenScheduler_FTASK( void *pvParameters )
{
 80035d8:	b5b0      	push	{r4, r5, r7, lr}
 80035da:	b0d0      	sub	sp, #320	; 0x140
 80035dc:	af00      	add	r7, sp, #0
 80035de:	1d3b      	adds	r3, r7, #4
 80035e0:	6018      	str	r0, [r3, #0]

		dd_task_t tasksToRun[mainQUEUE_LENGTH];
		dd_task_t tempTask;
		dd_task_t minTask;

		TickType_t currentTicks = xTaskGetTickCount();
 80035e2:	f7fe fc43 	bl	8001e6c <xTaskGetTickCount>
 80035e6:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

		int i = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		int minIndex = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

		while( (xQueueReceive(activeTaskQueueHandle, &tempTask, (TickType_t) WAIT_FOR_QUEUE)) && (i < mainQUEUE_LENGTH))
 80035f6:	e016      	b.n	8003626 <deadlineDrivenScheduler_FTASK+0x4e>
//			{
//				xQueueSend(overdueTaskQueueHandle, &tempTask, (TickType_t) WAIT_FOR_QUEUE);
//			}
//			else
//			{
				tasksToRun[i] = tempTask;
 80035f8:	f107 010c 	add.w	r1, r7, #12
 80035fc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	440b      	add	r3, r1
 800360a:	461d      	mov	r5, r3
 800360c:	f507 748a 	add.w	r4, r7, #276	; 0x114
 8003610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003614:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003618:	e885 0003 	stmia.w	r5, {r0, r1}
//			}
			i++;
 800361c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003620:	3301      	adds	r3, #1
 8003622:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		while( (xQueueReceive(activeTaskQueueHandle, &tempTask, (TickType_t) WAIT_FOR_QUEUE)) && (i < mainQUEUE_LENGTH))
 8003626:	4b40      	ldr	r3, [pc, #256]	; (8003728 <deadlineDrivenScheduler_FTASK+0x150>)
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	f507 718a 	add.w	r1, r7, #276	; 0x114
 800362e:	2300      	movs	r3, #0
 8003630:	220a      	movs	r2, #10
 8003632:	f7fd fcc9 	bl	8000fc8 <xQueueGenericReceive>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <deadlineDrivenScheduler_FTASK+0x6c>
 800363c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003640:	2b09      	cmp	r3, #9
 8003642:	ddd9      	ble.n	80035f8 <deadlineDrivenScheduler_FTASK+0x20>
		}

		minTask = tempTask;
 8003644:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8003648:	f507 758a 	add.w	r5, r7, #276	; 0x114
 800364c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800364e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003650:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003654:	e884 0003 	stmia.w	r4, {r0, r1}

		for(int j = 0; j < i; j++)
 8003658:	2300      	movs	r3, #0
 800365a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800365e:	e029      	b.n	80036b4 <deadlineDrivenScheduler_FTASK+0xdc>
		{
			if(tasksToRun[j].absolute_deadline < minTask.absolute_deadline)
 8003660:	f107 010c 	add.w	r1, r7, #12
 8003664:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	440b      	add	r3, r1
 8003672:	3310      	adds	r3, #16
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800367a:	429a      	cmp	r2, r3
 800367c:	d215      	bcs.n	80036aa <deadlineDrivenScheduler_FTASK+0xd2>
			{
				minTask = tasksToRun[j];
 800367e:	f107 010c 	add.w	r1, r7, #12
 8003682:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003686:	4613      	mov	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4413      	add	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8003694:	461d      	mov	r5, r3
 8003696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800369a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800369e:	e884 0003 	stmia.w	r4, {r0, r1}
				minIndex = j;
 80036a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80036a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		for(int j = 0; j < i; j++)
 80036aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80036ae:	3301      	adds	r3, #1
 80036b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80036b4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80036b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80036bc:	429a      	cmp	r2, r3
 80036be:	dbcf      	blt.n	8003660 <deadlineDrivenScheduler_FTASK+0x88>
			}
		}


		for(int k = 0; k < i; k++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80036c6:	e019      	b.n	80036fc <deadlineDrivenScheduler_FTASK+0x124>
		{
			if(k != minIndex)
 80036c8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80036cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d00e      	beq.n	80036f2 <deadlineDrivenScheduler_FTASK+0x11a>
			{
				xQueueSend(activeTaskQueueHandle, &tasksToRun[k], (TickType_t) WAIT_FOR_QUEUE);
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <deadlineDrivenScheduler_FTASK+0x150>)
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	f107 010c 	add.w	r1, r7, #12
 80036dc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80036e0:	4613      	mov	r3, r2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4419      	add	r1, r3
 80036ea:	2300      	movs	r3, #0
 80036ec:	220a      	movs	r2, #10
 80036ee:	f7fd fadd 	bl	8000cac <xQueueGenericSend>
		for(int k = 0; k < i; k++)
 80036f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80036f6:	3301      	adds	r3, #1
 80036f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80036fc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003700:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003704:	429a      	cmp	r2, r3
 8003706:	dbdf      	blt.n	80036c8 <deadlineDrivenScheduler_FTASK+0xf0>
			}
		}

		vTaskPrioritySet(minTask.t_handle, PRIORITY_SCHEDULED);
 8003708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800370c:	2102      	movs	r1, #2
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe f8ea 	bl	80018e8 <vTaskPrioritySet>

//		xQueueSend(runningTaskQueueHandle, &minTask, (TickType_t) WAIT_FOR_QUEUE);

		vTaskResume(minTask.t_handle);
 8003714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe fa55 	bl	8001bc8 <vTaskResume>

		vTaskSuspend(NULL);
 800371e:	2000      	movs	r0, #0
 8003720:	f7fe f990 	bl	8001a44 <vTaskSuspend>
	{
 8003724:	e75d      	b.n	80035e2 <deadlineDrivenScheduler_FTASK+0xa>
 8003726:	bf00      	nop
 8003728:	200079b0 	.word	0x200079b0

0800372c <monitorTask_FTASK>:
}

/*-----------------------------------------------------------*/

static void monitorTask_FTASK( void *pvParameters )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	while(1)
	{
		int activeTasks = uxQueueMessagesWaiting(activeTaskQueueHandle);
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <monitorTask_FTASK+0x30>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7fd fd57 	bl	80011ec <uxQueueMessagesWaiting>
 800373e:	4603      	mov	r3, r0
 8003740:	60fb      	str	r3, [r7, #12]
		if(activeTasks > 2)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b02      	cmp	r3, #2
 8003746:	dd04      	ble.n	8003752 <monitorTask_FTASK+0x26>
		{
			vTaskResume(handle_deadlineDrivenScheduler_FTASK);
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <monitorTask_FTASK+0x34>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe fa3b 	bl	8001bc8 <vTaskResume>
//		{
//			printf("completed and deleted: %d, at %d\n", (int)completedTask.task_id, (int)completedTask.completion_time);
//			vTaskDelete(completedTask.t_handle);
//		}

		vTaskDelay(50 / portTICK_RATE_MS);
 8003752:	2032      	movs	r0, #50	; 0x32
 8003754:	f7fe f894 	bl	8001880 <vTaskDelay>
	{
 8003758:	e7ec      	b.n	8003734 <monitorTask_FTASK+0x8>
 800375a:	bf00      	nop
 800375c:	200079b0 	.word	0x200079b0
 8003760:	20007a7c 	.word	0x20007a7c

08003764 <DDT_GEN_1_FTASK>:
}

/*-----------------------------------------------------------*/

static void DDT_GEN_1_FTASK( void *pvParameters )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		TickType_t currentTicks = xTaskGetTickCount();
 800376c:	f7fe fb7e 	bl	8001e6c <xTaskGetTickCount>
 8003770:	60f8      	str	r0, [r7, #12]
		printf("T1 R T: %d\n", (int)currentTicks);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4619      	mov	r1, r3
 8003776:	4807      	ldr	r0, [pc, #28]	; (8003794 <DDT_GEN_1_FTASK+0x30>)
 8003778:	f000 fb96 	bl	8003ea8 <printf>
		create_dd_task(PERIODIC, TASK1_PERIOD, (uint32_t) 1);
 800377c:	2201      	movs	r2, #1
 800377e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003782:	2000      	movs	r0, #0
 8003784:	f7ff fee0 	bl	8003548 <create_dd_task>

		vTaskDelay(TASK1_PERIOD);
 8003788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800378c:	f7fe f878 	bl	8001880 <vTaskDelay>
	{
 8003790:	e7ec      	b.n	800376c <DDT_GEN_1_FTASK+0x8>
 8003792:	bf00      	nop
 8003794:	08004038 	.word	0x08004038

08003798 <DDT_RUN_1_FTASK>:
	}
}

static void DDT_RUN_1_FTASK( void *pvParameters )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		STM_EVAL_LEDToggle(green_led);
 80037a0:	2000      	movs	r0, #0
 80037a2:	f7ff fd31 	bl	8003208 <STM_EVAL_LEDToggle>

		TickType_t currentTicks = xTaskGetTickCount();
 80037a6:	f7fe fb61 	bl	8001e6c <xTaskGetTickCount>
 80037aa:	60f8      	str	r0, [r7, #12]



		while(xTaskGetTickCount() < (currentTicks + TASK1_EXEC));
 80037ac:	bf00      	nop
 80037ae:	f7fe fb5d 	bl	8001e6c <xTaskGetTickCount>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	335f      	adds	r3, #95	; 0x5f
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d3f8      	bcc.n	80037ae <DDT_RUN_1_FTASK+0x16>
		currentTicks = xTaskGetTickCount();
 80037bc:	f7fe fb56 	bl	8001e6c <xTaskGetTickCount>
 80037c0:	60f8      	str	r0, [r7, #12]
		printf("T1 C T: %d\n", (int)currentTicks);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4619      	mov	r1, r3
 80037c6:	4806      	ldr	r0, [pc, #24]	; (80037e0 <DDT_RUN_1_FTASK+0x48>)
 80037c8:	f000 fb6e 	bl	8003ea8 <printf>
//		{
//			tempTask.completion_time = xTaskGetTickCount();
//			xQueueSend(completedTaskQueueHandle, &tempTask, (TickType_t) WAIT_FOR_QUEUE);
//		}
//		vTaskSuspend(NULL);
		vTaskResume(handle_deadlineDrivenScheduler_FTASK);
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <DDT_RUN_1_FTASK+0x4c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe f9f9 	bl	8001bc8 <vTaskResume>
		vTaskDelete(NULL);
 80037d6:	2000      	movs	r0, #0
 80037d8:	f7fd ffc4 	bl	8001764 <vTaskDelete>
	{
 80037dc:	e7e0      	b.n	80037a0 <DDT_RUN_1_FTASK+0x8>
 80037de:	bf00      	nop
 80037e0:	08004044 	.word	0x08004044
 80037e4:	20007a7c 	.word	0x20007a7c

080037e8 <DDT_GEN_2_FTASK>:
}

/*-----------------------------------------------------------*/

static void DDT_GEN_2_FTASK( void *pvParameters )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	while(1)
	{
		TickType_t currentTicks = xTaskGetTickCount();
 80037f0:	f7fe fb3c 	bl	8001e6c <xTaskGetTickCount>
 80037f4:	60f8      	str	r0, [r7, #12]
		printf("T2 R T: %d\n", (int)currentTicks);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4619      	mov	r1, r3
 80037fa:	4807      	ldr	r0, [pc, #28]	; (8003818 <DDT_GEN_2_FTASK+0x30>)
 80037fc:	f000 fb54 	bl	8003ea8 <printf>
		create_dd_task(PERIODIC, TASK2_PERIOD, (uint32_t) 2);
 8003800:	2202      	movs	r2, #2
 8003802:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003806:	2000      	movs	r0, #0
 8003808:	f7ff fe9e 	bl	8003548 <create_dd_task>

		vTaskDelay(TASK2_PERIOD);
 800380c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003810:	f7fe f836 	bl	8001880 <vTaskDelay>
	{
 8003814:	e7ec      	b.n	80037f0 <DDT_GEN_2_FTASK+0x8>
 8003816:	bf00      	nop
 8003818:	08004050 	.word	0x08004050

0800381c <DDT_RUN_2_FTASK>:
	}
}

static void DDT_RUN_2_FTASK( void *pvParameters )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	while(1)
	{
		STM_EVAL_LEDToggle(red_led);
 8003824:	2002      	movs	r0, #2
 8003826:	f7ff fcef 	bl	8003208 <STM_EVAL_LEDToggle>

		TickType_t currentTicks = xTaskGetTickCount();
 800382a:	f7fe fb1f 	bl	8001e6c <xTaskGetTickCount>
 800382e:	60f8      	str	r0, [r7, #12]

//		printf("task2 release: %d\n", (int)currentTicks);

		while(xTaskGetTickCount() < (currentTicks + TASK2_EXEC));
 8003830:	bf00      	nop
 8003832:	f7fe fb1b 	bl	8001e6c <xTaskGetTickCount>
 8003836:	4602      	mov	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3396      	adds	r3, #150	; 0x96
 800383c:	429a      	cmp	r2, r3
 800383e:	d3f8      	bcc.n	8003832 <DDT_RUN_2_FTASK+0x16>
		currentTicks = xTaskGetTickCount();
 8003840:	f7fe fb14 	bl	8001e6c <xTaskGetTickCount>
 8003844:	60f8      	str	r0, [r7, #12]
		printf("T2 C T: %d\n", (int)currentTicks);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4619      	mov	r1, r3
 800384a:	4806      	ldr	r0, [pc, #24]	; (8003864 <DDT_RUN_2_FTASK+0x48>)
 800384c:	f000 fb2c 	bl	8003ea8 <printf>
//		{
//			tempTask.completion_time = xTaskGetTickCount();
//			xQueueSend(completedTaskQueueHandle, &tempTask, (TickType_t) WAIT_FOR_QUEUE);
//		}
//		vTaskSuspend(NULL);
		vTaskResume(handle_deadlineDrivenScheduler_FTASK);
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <DDT_RUN_2_FTASK+0x4c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe f9b7 	bl	8001bc8 <vTaskResume>
		vTaskDelete(NULL);
 800385a:	2000      	movs	r0, #0
 800385c:	f7fd ff82 	bl	8001764 <vTaskDelete>
	{
 8003860:	e7e0      	b.n	8003824 <DDT_RUN_2_FTASK+0x8>
 8003862:	bf00      	nop
 8003864:	0800405c 	.word	0x0800405c
 8003868:	20007a7c 	.word	0x20007a7c

0800386c <DDT_GEN_3_FTASK>:
}

/*-----------------------------------------------------------*/

static void DDT_GEN_3_FTASK( void *pvParameters )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	while(1)
	{
		TickType_t currentTicks = xTaskGetTickCount();
 8003874:	f7fe fafa 	bl	8001e6c <xTaskGetTickCount>
 8003878:	60f8      	str	r0, [r7, #12]
		printf("T3 R T: %d\n", (int)currentTicks);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4619      	mov	r1, r3
 800387e:	4807      	ldr	r0, [pc, #28]	; (800389c <DDT_GEN_3_FTASK+0x30>)
 8003880:	f000 fb12 	bl	8003ea8 <printf>
		create_dd_task(PERIODIC, TASK3_PERIOD, (uint32_t) 3);
 8003884:	2203      	movs	r2, #3
 8003886:	f240 21ee 	movw	r1, #750	; 0x2ee
 800388a:	2000      	movs	r0, #0
 800388c:	f7ff fe5c 	bl	8003548 <create_dd_task>

		vTaskDelay(TASK3_PERIOD);
 8003890:	f240 20ee 	movw	r0, #750	; 0x2ee
 8003894:	f7fd fff4 	bl	8001880 <vTaskDelay>
	{
 8003898:	e7ec      	b.n	8003874 <DDT_GEN_3_FTASK+0x8>
 800389a:	bf00      	nop
 800389c:	08004068 	.word	0x08004068

080038a0 <DDT_RUN_3_FTASK>:
	}
}

static void DDT_RUN_3_FTASK( void *pvParameters )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		STM_EVAL_LEDToggle(blue_led);
 80038a8:	2003      	movs	r0, #3
 80038aa:	f7ff fcad 	bl	8003208 <STM_EVAL_LEDToggle>

		TickType_t currentTicks = xTaskGetTickCount();
 80038ae:	f7fe fadd 	bl	8001e6c <xTaskGetTickCount>
 80038b2:	60f8      	str	r0, [r7, #12]

		while(xTaskGetTickCount() < (currentTicks + TASK3_EXEC));
 80038b4:	bf00      	nop
 80038b6:	f7fe fad9 	bl	8001e6c <xTaskGetTickCount>
 80038ba:	4602      	mov	r2, r0
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	33fa      	adds	r3, #250	; 0xfa
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d3f8      	bcc.n	80038b6 <DDT_RUN_3_FTASK+0x16>
		currentTicks = xTaskGetTickCount();
 80038c4:	f7fe fad2 	bl	8001e6c <xTaskGetTickCount>
 80038c8:	60f8      	str	r0, [r7, #12]
		printf("T3 C T: %d\n", (int)currentTicks);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4619      	mov	r1, r3
 80038ce:	4806      	ldr	r0, [pc, #24]	; (80038e8 <DDT_RUN_3_FTASK+0x48>)
 80038d0:	f000 faea 	bl	8003ea8 <printf>
//		{
//			tempTask.completion_time = xTaskGetTickCount();
//			xQueueSend(completedTaskQueueHandle, &tempTask, (TickType_t) WAIT_FOR_QUEUE);
//		}
//		vTaskSuspend(NULL);
		vTaskResume(handle_deadlineDrivenScheduler_FTASK);
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <DDT_RUN_3_FTASK+0x4c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe f975 	bl	8001bc8 <vTaskResume>
		vTaskDelete(NULL);
 80038de:	2000      	movs	r0, #0
 80038e0:	f7fd ff40 	bl	8001764 <vTaskDelete>
	{
 80038e4:	e7e0      	b.n	80038a8 <DDT_RUN_3_FTASK+0x8>
 80038e6:	bf00      	nop
 80038e8:	08004074 	.word	0x08004074
 80038ec:	20007a7c 	.word	0x20007a7c

080038f0 <vApplicationMallocFailedHook>:
}

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 80038f4:	e7fe      	b.n	80038f4 <vApplicationMallocFailedHook+0x4>

080038f6 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8003900:	e7fe      	b.n	8003900 <vApplicationStackOverflowHook+0xa>

08003902 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8003908:	f7fd f848 	bl	800099c <xPortGetFreeHeapSize>
 800390c:	4603      	mov	r3, r0
 800390e:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8003910:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 800391a:	b580      	push	{r7, lr}
 800391c:	af00      	add	r7, sp, #0
	STM_EVAL_LEDInit(orange_led);
 800391e:	2001      	movs	r0, #1
 8003920:	f7ff fc44 	bl	80031ac <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(green_led);
 8003924:	2000      	movs	r0, #0
 8003926:	f7ff fc41 	bl	80031ac <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(red_led);
 800392a:	2002      	movs	r0, #2
 800392c:	f7ff fc3e 	bl	80031ac <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(blue_led);
 8003930:	2003      	movs	r0, #3
 8003932:	f7ff fc3b 	bl	80031ac <STM_EVAL_LEDInit>

	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 8003936:	2000      	movs	r0, #0
 8003938:	f7ff fd46 	bl	80033c8 <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}

08003940 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003940:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003942:	e003      	b.n	800394c <LoopCopyDataInit>

08003944 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003946:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003948:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800394a:	3104      	adds	r1, #4

0800394c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800394c:	480a      	ldr	r0, [pc, #40]	; (8003978 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003950:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003952:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003954:	d3f6      	bcc.n	8003944 <CopyDataInit>
  ldr  r2, =_sbss
 8003956:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003958:	e002      	b.n	8003960 <LoopFillZerobss>

0800395a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800395a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800395c:	f842 3b04 	str.w	r3, [r2], #4

08003960 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003960:	4b08      	ldr	r3, [pc, #32]	; (8003984 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003962:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003964:	d3f9      	bcc.n	800395a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003966:	f000 f877 	bl	8003a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800396a:	f000 fae7 	bl	8003f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800396e:	f7ff fd4f 	bl	8003410 <main>
  bx  lr    
 8003972:	4770      	bx	lr
  ldr  r3, =_sidata
 8003974:	080040c4 	.word	0x080040c4
  ldr  r0, =_sdata
 8003978:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800397c:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 8003980:	20000034 	.word	0x20000034
  ldr  r3, = _ebss
 8003984:	20007a80 	.word	0x20007a80

08003988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003988:	e7fe      	b.n	8003988 <ADC_IRQHandler>

0800398a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0
}
 800398e:	bf00      	nop
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800399c:	e7fe      	b.n	800399c <HardFault_Handler+0x4>

0800399e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80039a2:	e7fe      	b.n	80039a2 <MemManage_Handler+0x4>

080039a4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80039a8:	e7fe      	b.n	80039a8 <BusFault_Handler+0x4>

080039aa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80039aa:	b480      	push	{r7}
 80039ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80039ae:	e7fe      	b.n	80039ae <UsageFault_Handler+0x4>

080039b0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 80039c8:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <ITM_SendChar+0x58>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01a      	beq.n	8003a0a <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80039d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80039dc:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d012      	beq.n	8003a0a <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 80039e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80039ec:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 80039f4:	bf00      	nop
 80039f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0fa      	beq.n	80039f6 <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8003a00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003a0a:	687b      	ldr	r3, [r7, #4]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	e000edf0 	.word	0xe000edf0

08003a1c <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	e009      	b.n	8003a46 <_write+0x2a>
	 ITM_SendChar((*ptr++));
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	60ba      	str	r2, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff ffc0 	bl	80039c0 <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	3301      	adds	r3, #1
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	dbf1      	blt.n	8003a32 <_write+0x16>
 return len;
 8003a4e:	687b      	ldr	r3, [r7, #4]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a5c:	4a16      	ldr	r2, [pc, #88]	; (8003ab8 <SystemInit+0x60>)
 8003a5e:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <SystemInit+0x60>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003a6c:	4a13      	ldr	r2, [pc, #76]	; (8003abc <SystemInit+0x64>)
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <SystemInit+0x64>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a78:	4b10      	ldr	r3, [pc, #64]	; (8003abc <SystemInit+0x64>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003a7e:	4a0f      	ldr	r2, [pc, #60]	; (8003abc <SystemInit+0x64>)
 8003a80:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <SystemInit+0x64>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <SystemInit+0x64>)
 8003a90:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <SystemInit+0x68>)
 8003a92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003a94:	4a09      	ldr	r2, [pc, #36]	; (8003abc <SystemInit+0x64>)
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <SystemInit+0x64>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <SystemInit+0x64>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003aa6:	f000 f80d 	bl	8003ac4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003aaa:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <SystemInit+0x60>)
 8003aac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ab0:	609a      	str	r2, [r3, #8]
#endif
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	e000ed00 	.word	0xe000ed00
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	24003010 	.word	0x24003010

08003ac4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003ad2:	4a36      	ldr	r2, [pc, #216]	; (8003bac <SetSysClock+0xe8>)
 8003ad4:	4b35      	ldr	r3, [pc, #212]	; (8003bac <SetSysClock+0xe8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003ade:	4b33      	ldr	r3, [pc, #204]	; (8003bac <SetSysClock+0xe8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3301      	adds	r3, #1
 8003aec:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d103      	bne.n	8003afc <SetSysClock+0x38>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003afa:	d1f0      	bne.n	8003ade <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003afc:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <SetSysClock+0xe8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	e001      	b.n	8003b12 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d142      	bne.n	8003b9e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003b18:	4a24      	ldr	r2, [pc, #144]	; (8003bac <SetSysClock+0xe8>)
 8003b1a:	4b24      	ldr	r3, [pc, #144]	; (8003bac <SetSysClock+0xe8>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b22:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003b24:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <SetSysClock+0xec>)
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <SetSysClock+0xec>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b2e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003b30:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <SetSysClock+0xe8>)
 8003b32:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <SetSysClock+0xe8>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003b38:	4a1c      	ldr	r2, [pc, #112]	; (8003bac <SetSysClock+0xe8>)
 8003b3a:	4b1c      	ldr	r3, [pc, #112]	; (8003bac <SetSysClock+0xe8>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b42:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003b44:	4a19      	ldr	r2, [pc, #100]	; (8003bac <SetSysClock+0xe8>)
 8003b46:	4b19      	ldr	r3, [pc, #100]	; (8003bac <SetSysClock+0xe8>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003b4e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003b50:	4b16      	ldr	r3, [pc, #88]	; (8003bac <SetSysClock+0xe8>)
 8003b52:	4a18      	ldr	r2, [pc, #96]	; (8003bb4 <SetSysClock+0xf0>)
 8003b54:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003b56:	4a15      	ldr	r2, [pc, #84]	; (8003bac <SetSysClock+0xe8>)
 8003b58:	4b14      	ldr	r3, [pc, #80]	; (8003bac <SetSysClock+0xe8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b60:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003b62:	bf00      	nop
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <SetSysClock+0xe8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f9      	beq.n	8003b64 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <SetSysClock+0xf4>)
 8003b72:	f240 6205 	movw	r2, #1541	; 0x605
 8003b76:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003b78:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <SetSysClock+0xe8>)
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <SetSysClock+0xe8>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003b84:	4a09      	ldr	r2, [pc, #36]	; (8003bac <SetSysClock+0xe8>)
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <SetSysClock+0xe8>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f043 0302 	orr.w	r3, r3, #2
 8003b8e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003b90:	bf00      	nop
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <SetSysClock+0xe8>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d1f9      	bne.n	8003b92 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	07405408 	.word	0x07405408
 8003bb8:	40023c00 	.word	0x40023c00

08003bbc <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003bcc:	e004      	b.n	8003bd8 <ts_itoa+0x1c>
		div *= base;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d2f3      	bcs.n	8003bce <ts_itoa+0x12>

	while (div != 0)
 8003be6:	e029      	b.n	8003c3c <ts_itoa+0x80>
	{
		int num = d/div;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bfa:	fb02 f201 	mul.w	r2, r2, r1
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c0a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b09      	cmp	r3, #9
 8003c10:	dd0a      	ble.n	8003c28 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	1c59      	adds	r1, r3, #1
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	6011      	str	r1, [r2, #0]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	3237      	adds	r2, #55	; 0x37
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e009      	b.n	8003c3c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	1c59      	adds	r1, r3, #1
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	6011      	str	r1, [r2, #0]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	3230      	adds	r2, #48	; 0x30
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1d2      	bne.n	8003be8 <ts_itoa+0x2c>
	}
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b088      	sub	sp, #32
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003c5e:	e07d      	b.n	8003d5c <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b25      	cmp	r3, #37	; 0x25
 8003c66:	d171      	bne.n	8003d4c <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b64      	cmp	r3, #100	; 0x64
 8003c74:	d01e      	beq.n	8003cb4 <ts_formatstring+0x66>
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	dc06      	bgt.n	8003c88 <ts_formatstring+0x3a>
 8003c7a:	2b58      	cmp	r3, #88	; 0x58
 8003c7c:	d050      	beq.n	8003d20 <ts_formatstring+0xd2>
 8003c7e:	2b63      	cmp	r3, #99	; 0x63
 8003c80:	d00e      	beq.n	8003ca0 <ts_formatstring+0x52>
 8003c82:	2b25      	cmp	r3, #37	; 0x25
 8003c84:	d058      	beq.n	8003d38 <ts_formatstring+0xea>
 8003c86:	e05d      	b.n	8003d44 <ts_formatstring+0xf6>
 8003c88:	2b73      	cmp	r3, #115	; 0x73
 8003c8a:	d02b      	beq.n	8003ce4 <ts_formatstring+0x96>
 8003c8c:	2b73      	cmp	r3, #115	; 0x73
 8003c8e:	dc02      	bgt.n	8003c96 <ts_formatstring+0x48>
 8003c90:	2b69      	cmp	r3, #105	; 0x69
 8003c92:	d00f      	beq.n	8003cb4 <ts_formatstring+0x66>
 8003c94:	e056      	b.n	8003d44 <ts_formatstring+0xf6>
 8003c96:	2b75      	cmp	r3, #117	; 0x75
 8003c98:	d037      	beq.n	8003d0a <ts_formatstring+0xbc>
 8003c9a:	2b78      	cmp	r3, #120	; 0x78
 8003c9c:	d040      	beq.n	8003d20 <ts_formatstring+0xd2>
 8003c9e:	e051      	b.n	8003d44 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	60fa      	str	r2, [r7, #12]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	1d11      	adds	r1, r2, #4
 8003caa:	6079      	str	r1, [r7, #4]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]
				break;
 8003cb2:	e047      	b.n	8003d44 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	1d1a      	adds	r2, r3, #4
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	da07      	bge.n	8003cd4 <ts_formatstring+0x86>
					{
						val *= -1;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	425b      	negs	r3, r3
 8003cc8:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	60fa      	str	r2, [r7, #12]
 8003cd0:	222d      	movs	r2, #45	; 0x2d
 8003cd2:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003cd4:	69f9      	ldr	r1, [r7, #28]
 8003cd6:	f107 030c 	add.w	r3, r7, #12
 8003cda:	220a      	movs	r2, #10
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ff6d 	bl	8003bbc <ts_itoa>
				}
				break;
 8003ce2:	e02f      	b.n	8003d44 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	1d1a      	adds	r2, r3, #4
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8003cee:	e007      	b.n	8003d00 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	60fa      	str	r2, [r7, #12]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	1c51      	adds	r1, r2, #1
 8003cfa:	61b9      	str	r1, [r7, #24]
 8003cfc:	7812      	ldrb	r2, [r2, #0]
 8003cfe:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f3      	bne.n	8003cf0 <ts_formatstring+0xa2>
					}
				}
				break;
 8003d08:	e01c      	b.n	8003d44 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	1d1a      	adds	r2, r3, #4
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	6819      	ldr	r1, [r3, #0]
 8003d12:	f107 030c 	add.w	r3, r7, #12
 8003d16:	220a      	movs	r2, #10
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff4f 	bl	8003bbc <ts_itoa>
				break;
 8003d1e:	e011      	b.n	8003d44 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	1d1a      	adds	r2, r3, #4
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f107 030c 	add.w	r3, r7, #12
 8003d2e:	2210      	movs	r2, #16
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ff43 	bl	8003bbc <ts_itoa>
				break;
 8003d36:	e005      	b.n	8003d44 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	60fa      	str	r2, [r7, #12]
 8003d3e:	2225      	movs	r2, #37	; 0x25
 8003d40:	701a      	strb	r2, [r3, #0]
				  break;
 8003d42:	bf00      	nop
			}
			fmt++;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	3301      	adds	r3, #1
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	e007      	b.n	8003d5c <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	60fa      	str	r2, [r7, #12]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	1c51      	adds	r1, r2, #1
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	7812      	ldrb	r2, [r2, #0]
 8003d5a:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f47f af7d 	bne.w	8003c60 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	1ad3      	subs	r3, r2, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
	int length = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8003d8a:	e081      	b.n	8003e90 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b25      	cmp	r3, #37	; 0x25
 8003d92:	d177      	bne.n	8003e84 <ts_formatlength+0x108>
		{
			++fmt;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3301      	adds	r3, #1
 8003d98:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	3b58      	subs	r3, #88	; 0x58
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d86a      	bhi.n	8003e7a <ts_formatlength+0xfe>
 8003da4:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <ts_formatlength+0x30>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003e6d 	.word	0x08003e6d
 8003db0:	08003e7b 	.word	0x08003e7b
 8003db4:	08003e7b 	.word	0x08003e7b
 8003db8:	08003e7b 	.word	0x08003e7b
 8003dbc:	08003e7b 	.word	0x08003e7b
 8003dc0:	08003e7b 	.word	0x08003e7b
 8003dc4:	08003e7b 	.word	0x08003e7b
 8003dc8:	08003e7b 	.word	0x08003e7b
 8003dcc:	08003e7b 	.word	0x08003e7b
 8003dd0:	08003e7b 	.word	0x08003e7b
 8003dd4:	08003e7b 	.word	0x08003e7b
 8003dd8:	08003e31 	.word	0x08003e31
 8003ddc:	08003e3f 	.word	0x08003e3f
 8003de0:	08003e7b 	.word	0x08003e7b
 8003de4:	08003e7b 	.word	0x08003e7b
 8003de8:	08003e7b 	.word	0x08003e7b
 8003dec:	08003e7b 	.word	0x08003e7b
 8003df0:	08003e3f 	.word	0x08003e3f
 8003df4:	08003e7b 	.word	0x08003e7b
 8003df8:	08003e7b 	.word	0x08003e7b
 8003dfc:	08003e7b 	.word	0x08003e7b
 8003e00:	08003e7b 	.word	0x08003e7b
 8003e04:	08003e7b 	.word	0x08003e7b
 8003e08:	08003e7b 	.word	0x08003e7b
 8003e0c:	08003e7b 	.word	0x08003e7b
 8003e10:	08003e7b 	.word	0x08003e7b
 8003e14:	08003e7b 	.word	0x08003e7b
 8003e18:	08003e4d 	.word	0x08003e4d
 8003e1c:	08003e7b 	.word	0x08003e7b
 8003e20:	08003e3f 	.word	0x08003e3f
 8003e24:	08003e7b 	.word	0x08003e7b
 8003e28:	08003e7b 	.word	0x08003e7b
 8003e2c:	08003e6d 	.word	0x08003e6d
			{
			  case 'c':
		  		  va_arg(va, int);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	3304      	adds	r3, #4
 8003e34:	603b      	str	r3, [r7, #0]
				  ++length;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	60fb      	str	r3, [r7, #12]
				  break;
 8003e3c:	e025      	b.n	8003e8a <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	330b      	adds	r3, #11
 8003e42:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	3304      	adds	r3, #4
 8003e48:	603b      	str	r3, [r7, #0]
				  break;
 8003e4a:	e01e      	b.n	8003e8a <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	1d1a      	adds	r2, r3, #4
 8003e50:	603a      	str	r2, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8003e56:	e002      	b.n	8003e5e <ts_formatlength+0xe2>
			  			  ++length;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	60ba      	str	r2, [r7, #8]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f6      	bne.n	8003e58 <ts_formatlength+0xdc>
			  	  }
				  break;
 8003e6a:	e00e      	b.n	8003e8a <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	3304      	adds	r3, #4
 8003e76:	603b      	str	r3, [r7, #0]
				  break;
 8003e78:	e007      	b.n	8003e8a <ts_formatlength+0x10e>
			  default:
				  ++length;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	60fb      	str	r3, [r7, #12]
				  break;
 8003e80:	bf00      	nop
 8003e82:	e002      	b.n	8003e8a <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3301      	adds	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f47f af79 	bne.w	8003d8c <ts_formatlength+0x10>
	}
	return length;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 8003ea8:	b40f      	push	{r0, r1, r2, r3}
 8003eaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
	int length = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8003eb6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003eba:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8003ebc:	6839      	ldr	r1, [r7, #0]
 8003ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ec0:	f7ff ff5c 	bl	8003d7c <ts_formatlength>
 8003ec4:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8003ec6:	466b      	mov	r3, sp
 8003ec8:	461e      	mov	r6, r3
		char buf[length];
 8003eca:	68f9      	ldr	r1, [r7, #12]
 8003ecc:	1e4b      	subs	r3, r1, #1
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8003edc:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8003ee0:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	00dd      	lsls	r5, r3, #3
 8003eee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ef2:	00d4      	lsls	r4, r2, #3
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	3307      	adds	r3, #7
 8003ef8:	08db      	lsrs	r3, r3, #3
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	ebad 0d03 	sub.w	sp, sp, r3
 8003f00:	466b      	mov	r3, sp
 8003f02:	3300      	adds	r3, #0
 8003f04:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8003f06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f0a:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fe9b 	bl	8003c4e <ts_formatstring>
 8003f18:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	2001      	movs	r0, #1
 8003f22:	f7ff fd7b 	bl	8003a1c <_write>
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f36:	b004      	add	sp, #16
 8003f38:	4770      	bx	lr
	...

08003f3c <__libc_init_array>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	4e0d      	ldr	r6, [pc, #52]	; (8003f74 <__libc_init_array+0x38>)
 8003f40:	4c0d      	ldr	r4, [pc, #52]	; (8003f78 <__libc_init_array+0x3c>)
 8003f42:	1ba4      	subs	r4, r4, r6
 8003f44:	10a4      	asrs	r4, r4, #2
 8003f46:	2500      	movs	r5, #0
 8003f48:	42a5      	cmp	r5, r4
 8003f4a:	d109      	bne.n	8003f60 <__libc_init_array+0x24>
 8003f4c:	4e0b      	ldr	r6, [pc, #44]	; (8003f7c <__libc_init_array+0x40>)
 8003f4e:	4c0c      	ldr	r4, [pc, #48]	; (8003f80 <__libc_init_array+0x44>)
 8003f50:	f000 f8a8 	bl	80040a4 <_init>
 8003f54:	1ba4      	subs	r4, r4, r6
 8003f56:	10a4      	asrs	r4, r4, #2
 8003f58:	2500      	movs	r5, #0
 8003f5a:	42a5      	cmp	r5, r4
 8003f5c:	d105      	bne.n	8003f6a <__libc_init_array+0x2e>
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
 8003f60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f64:	4798      	blx	r3
 8003f66:	3501      	adds	r5, #1
 8003f68:	e7ee      	b.n	8003f48 <__libc_init_array+0xc>
 8003f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f6e:	4798      	blx	r3
 8003f70:	3501      	adds	r5, #1
 8003f72:	e7f2      	b.n	8003f5a <__libc_init_array+0x1e>
 8003f74:	080040bc 	.word	0x080040bc
 8003f78:	080040bc 	.word	0x080040bc
 8003f7c:	080040bc 	.word	0x080040bc
 8003f80:	080040c0 	.word	0x080040c0

08003f84 <memcpy>:
 8003f84:	b510      	push	{r4, lr}
 8003f86:	1e43      	subs	r3, r0, #1
 8003f88:	440a      	add	r2, r1
 8003f8a:	4291      	cmp	r1, r2
 8003f8c:	d100      	bne.n	8003f90 <memcpy+0xc>
 8003f8e:	bd10      	pop	{r4, pc}
 8003f90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f98:	e7f7      	b.n	8003f8a <memcpy+0x6>

08003f9a <memset>:
 8003f9a:	4402      	add	r2, r0
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d100      	bne.n	8003fa4 <memset+0xa>
 8003fa2:	4770      	bx	lr
 8003fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa8:	e7f9      	b.n	8003f9e <memset+0x4>
 8003faa:	0000      	movs	r0, r0
 8003fac:	454c4449 	.word	0x454c4449
 8003fb0:	00000000 	.word	0x00000000
 8003fb4:	20726d54 	.word	0x20726d54
 8003fb8:	00637653 	.word	0x00637653
 8003fbc:	51726d54 	.word	0x51726d54
 8003fc0:	00000000 	.word	0x00000000
 8003fc4:	314e5552 	.word	0x314e5552
 8003fc8:	00000000 	.word	0x00000000
 8003fcc:	324e5552 	.word	0x324e5552
 8003fd0:	00000000 	.word	0x00000000
 8003fd4:	334e5552 	.word	0x334e5552
 8003fd8:	00000000 	.word	0x00000000
 8003fdc:	69746341 	.word	0x69746341
 8003fe0:	61546576 	.word	0x61546576
 8003fe4:	00736b73 	.word	0x00736b73
 8003fe8:	706d6f43 	.word	0x706d6f43
 8003fec:	6574656c 	.word	0x6574656c
 8003ff0:	73615464 	.word	0x73615464
 8003ff4:	0000736b 	.word	0x0000736b
 8003ff8:	7265764f 	.word	0x7265764f
 8003ffc:	54657564 	.word	0x54657564
 8004000:	736b7361 	.word	0x736b7361
 8004004:	00000000 	.word	0x00000000
 8004008:	6e6e7552 	.word	0x6e6e7552
 800400c:	54676e69 	.word	0x54676e69
 8004010:	736b7361 	.word	0x736b7361
 8004014:	00000000 	.word	0x00000000
 8004018:	00534444 	.word	0x00534444
 800401c:	0000544d 	.word	0x0000544d
 8004020:	47544444 	.word	0x47544444
 8004024:	00000031 	.word	0x00000031
 8004028:	47544444 	.word	0x47544444
 800402c:	00000032 	.word	0x00000032
 8004030:	47544444 	.word	0x47544444
 8004034:	00000033 	.word	0x00000033
 8004038:	52203154 	.word	0x52203154
 800403c:	203a5420 	.word	0x203a5420
 8004040:	000a6425 	.word	0x000a6425
 8004044:	43203154 	.word	0x43203154
 8004048:	203a5420 	.word	0x203a5420
 800404c:	000a6425 	.word	0x000a6425
 8004050:	52203254 	.word	0x52203254
 8004054:	203a5420 	.word	0x203a5420
 8004058:	000a6425 	.word	0x000a6425
 800405c:	43203254 	.word	0x43203254
 8004060:	203a5420 	.word	0x203a5420
 8004064:	000a6425 	.word	0x000a6425
 8004068:	52203354 	.word	0x52203354
 800406c:	203a5420 	.word	0x203a5420
 8004070:	000a6425 	.word	0x000a6425
 8004074:	43203354 	.word	0x43203354
 8004078:	203a5420 	.word	0x203a5420
 800407c:	000a6425 	.word	0x000a6425

08004080 <GPIO_PIN>:
 8004080:	20001000 80004000                       ... .@..

08004088 <GPIO_CLK>:
 8004088:	00000008 00000008 00000008 00000008     ................

08004098 <TASK_MAP>:
 8004098:	08003799 0800381d 080038a1              .7...8...8..

080040a4 <_init>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	bf00      	nop
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr

080040b0 <_fini>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr
