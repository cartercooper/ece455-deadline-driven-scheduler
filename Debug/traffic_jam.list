
traffic_jam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003810  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080039a0  080039a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000028  20000000  080039a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  6 .bss          00007a44  20000028  20000028  00020028  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20007a6c  20007a6c  00020028  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c912  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000020bb  00000000  00000000  0002c968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b70  00000000  00000000  0002ea28  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a58  00000000  00000000  0002f598  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005286  00000000  00000000  0002fff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004310  00000000  00000000  00035276  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00039586  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002e24  00000000  00000000  00039604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000028 	.word	0x20000028
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003988 	.word	0x08003988

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	08003988 	.word	0x08003988

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	20007864 	.word	0x20007864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000044 	.word	0x20000044
 8000530:	20000048 	.word	0x20000048
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 fc24 	bl	8001e6c <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	20007864 	.word	0x20007864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 fb40 	bl	8001cf4 <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000024 	.word	0x20000024
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000044 	.word	0x20000044
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	20000048 	.word	0x20000048

08000760 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800076c:	f001 fa08 	bl	8001b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000770:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <pvPortMalloc+0x178>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000778:	f000 f91c 	bl	80009b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800077c:	4b57      	ldr	r3, [pc, #348]	; (80008dc <pvPortMalloc+0x17c>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4013      	ands	r3, r2
 8000784:	2b00      	cmp	r3, #0
 8000786:	f040 808c 	bne.w	80008a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d01c      	beq.n	80007ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8000790:	2208      	movs	r2, #8
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d013      	beq.n	80007ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f023 0307 	bic.w	r3, r3, #7
 80007a8:	3308      	adds	r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d009      	beq.n	80007ca <pvPortMalloc+0x6a>
 80007b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ba:	f383 8811 	msr	BASEPRI, r3
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	f3bf 8f4f 	dsb	sy
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e7fe      	b.n	80007c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d068      	beq.n	80008a2 <pvPortMalloc+0x142>
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <pvPortMalloc+0x180>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d863      	bhi.n	80008a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007da:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <pvPortMalloc+0x184>)
 80007dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007de:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <pvPortMalloc+0x184>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007e4:	e004      	b.n	80007f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d203      	bcs.n	8000802 <pvPortMalloc+0xa2>
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1f1      	bne.n	80007e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <pvPortMalloc+0x178>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000808:	429a      	cmp	r2, r3
 800080a:	d04a      	beq.n	80008a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2208      	movs	r2, #8
 8000812:	4413      	add	r3, r2
 8000814:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	685a      	ldr	r2, [r3, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1ad2      	subs	r2, r2, r3
 8000826:	2308      	movs	r3, #8
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	429a      	cmp	r2, r3
 800082c:	d91e      	bls.n	800086c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800082e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	2b00      	cmp	r3, #0
 800083e:	d009      	beq.n	8000854 <pvPortMalloc+0xf4>
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	e7fe      	b.n	8000852 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1ad2      	subs	r2, r2, r3
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000866:	69b8      	ldr	r0, [r7, #24]
 8000868:	f000 f906 	bl	8000a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <pvPortMalloc+0x180>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <pvPortMalloc+0x180>)
 8000878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <pvPortMalloc+0x180>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <pvPortMalloc+0x188>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d203      	bcs.n	800088e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <pvPortMalloc+0x180>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <pvPortMalloc+0x188>)
 800088c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <pvPortMalloc+0x17c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	431a      	orrs	r2, r3
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80008a2:	f001 f97b 	bl	8001b9c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d101      	bne.n	80008b0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80008ac:	f002 fed0 	bl	8003650 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d009      	beq.n	80008ce <pvPortMalloc+0x16e>
 80008ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008be:	f383 8811 	msr	BASEPRI, r3
 80008c2:	f3bf 8f6f 	isb	sy
 80008c6:	f3bf 8f4f 	dsb	sy
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	e7fe      	b.n	80008cc <pvPortMalloc+0x16c>
	return pvReturn;
 80008ce:	69fb      	ldr	r3, [r7, #28]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20007854 	.word	0x20007854
 80008dc:	20007860 	.word	0x20007860
 80008e0:	20007858 	.word	0x20007858
 80008e4:	2000784c 	.word	0x2000784c
 80008e8:	2000785c 	.word	0x2000785c

080008ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d046      	beq.n	800098c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008fe:	2308      	movs	r3, #8
 8000900:	425b      	negs	r3, r3
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	4413      	add	r3, r2
 8000906:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <vPortFree+0xa8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4013      	ands	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d109      	bne.n	800092e <vPortFree+0x42>
 800091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e7fe      	b.n	800092c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d009      	beq.n	800094a <vPortFree+0x5e>
 8000936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093a:	f383 8811 	msr	BASEPRI, r3
 800093e:	f3bf 8f6f 	isb	sy
 8000942:	f3bf 8f4f 	dsb	sy
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	e7fe      	b.n	8000948 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <vPortFree+0xa8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4013      	ands	r3, r2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d019      	beq.n	800098c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d115      	bne.n	800098c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <vPortFree+0xa8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	43db      	mvns	r3, r3
 800096a:	401a      	ands	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000970:	f001 f906 	bl	8001b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <vPortFree+0xac>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4413      	add	r3, r2
 800097e:	4a06      	ldr	r2, [pc, #24]	; (8000998 <vPortFree+0xac>)
 8000980:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000982:	6938      	ldr	r0, [r7, #16]
 8000984:	f000 f878 	bl	8000a78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000988:	f001 f908 	bl	8001b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20007860 	.word	0x20007860
 8000998:	20007858 	.word	0x20007858

0800099c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <xPortGetFreeHeapSize+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20007858 	.word	0x20007858

080009b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009ba:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80009be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <prvHeapInit+0xac>)
 80009c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00c      	beq.n	80009e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3307      	adds	r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f023 0307 	bic.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <prvHeapInit+0xac>)
 80009e4:	4413      	add	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <prvHeapInit+0xb0>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <prvHeapInit+0xb0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a00:	2208      	movs	r2, #8
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f023 0307 	bic.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <prvHeapInit+0xb4>)
 8000a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <prvHeapInit+0xb4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <prvHeapInit+0xb4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	1ad2      	subs	r2, r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <prvHeapInit+0xb4>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <prvHeapInit+0xb8>)
 8000a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <prvHeapInit+0xbc>)
 8000a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <prvHeapInit+0xc0>)
 8000a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	2000004c 	.word	0x2000004c
 8000a64:	2000784c 	.word	0x2000784c
 8000a68:	20007854 	.word	0x20007854
 8000a6c:	2000785c 	.word	0x2000785c
 8000a70:	20007858 	.word	0x20007858
 8000a74:	20007860 	.word	0x20007860

08000a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <prvInsertBlockIntoFreeList+0xac>)
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e002      	b.n	8000a8c <prvInsertBlockIntoFreeList+0x14>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3f7      	bcc.n	8000a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	441a      	add	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d108      	bne.n	8000aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	441a      	add	r2, r3
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d118      	bne.n	8000b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d00d      	beq.n	8000af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	e008      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e003      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d002      	beq.n	8000b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2000784c 	.word	0x2000784c
 8000b28:	20007854 	.word	0x20007854

08000b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <xQueueGenericReset+0x28>
 8000b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	e7fe      	b.n	8000b52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000b54:	f7ff fcf4 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b60:	68f9      	ldr	r1, [r7, #12]
 8000b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b64:	fb01 f303 	mul.w	r3, r1, r3
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2200      	movs	r2, #0
 8000b72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b84:	3b01      	subs	r3, #1
 8000b86:	68f9      	ldr	r1, [r7, #12]
 8000b88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b8a:	fb01 f303 	mul.w	r3, r1, r3
 8000b8e:	441a      	add	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	22ff      	movs	r2, #255	; 0xff
 8000b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d114      	bne.n	8000bd4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d01a      	beq.n	8000be8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3310      	adds	r3, #16
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fa26 	bl	8002008 <xTaskRemoveFromEventList>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d012      	beq.n	8000be8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <xQueueGenericReset+0xcc>)
 8000bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	f3bf 8f4f 	dsb	sy
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	e009      	b.n	8000be8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3310      	adds	r3, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff faf9 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3324      	adds	r3, #36	; 0x24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff faf4 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000be8:	f7ff fcd8 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000ed04 	.word	0xe000ed04

08000bfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	4613      	mov	r3, r2
 8000c08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d109      	bne.n	8000c24 <xQueueGenericCreate+0x28>
 8000c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c14:	f383 8811 	msr	BASEPRI, r3
 8000c18:	f3bf 8f6f 	isb	sy
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	e7fe      	b.n	8000c22 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e004      	b.n	8000c3a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3348      	adds	r3, #72	; 0x48
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fd8e 	bl	8000760 <pvPortMalloc>
 8000c44:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00b      	beq.n	8000c64 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	3348      	adds	r3, #72	; 0x48
 8000c50:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f000 f805 	bl	8000c6e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000c64:	69bb      	ldr	r3, [r7, #24]
	}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e002      	b.n	8000c90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	69b8      	ldr	r0, [r7, #24]
 8000ca0:	f7ff ff44 	bl	8000b2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	; 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d109      	bne.n	8000cdc <xQueueGenericSend+0x30>
 8000cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ccc:	f383 8811 	msr	BASEPRI, r3
 8000cd0:	f3bf 8f6f 	isb	sy
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cda:	e7fe      	b.n	8000cda <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d103      	bne.n	8000cea <xQueueGenericSend+0x3e>
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <xQueueGenericSend+0x42>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <xQueueGenericSend+0x44>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <xQueueGenericSend+0x5c>
 8000cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf8:	f383 8811 	msr	BASEPRI, r3
 8000cfc:	f3bf 8f6f 	isb	sy
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
 8000d06:	e7fe      	b.n	8000d06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d103      	bne.n	8000d16 <xQueueGenericSend+0x6a>
 8000d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d101      	bne.n	8000d1a <xQueueGenericSend+0x6e>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <xQueueGenericSend+0x70>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d109      	bne.n	8000d34 <xQueueGenericSend+0x88>
 8000d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d24:	f383 8811 	msr	BASEPRI, r3
 8000d28:	f3bf 8f6f 	isb	sy
 8000d2c:	f3bf 8f4f 	dsb	sy
 8000d30:	623b      	str	r3, [r7, #32]
 8000d32:	e7fe      	b.n	8000d32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d34:	f001 fb24 	bl	8002380 <xTaskGetSchedulerState>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d102      	bne.n	8000d44 <xQueueGenericSend+0x98>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <xQueueGenericSend+0x9c>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <xQueueGenericSend+0x9e>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <xQueueGenericSend+0xb6>
 8000d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d52:	f383 8811 	msr	BASEPRI, r3
 8000d56:	f3bf 8f6f 	isb	sy
 8000d5a:	f3bf 8f4f 	dsb	sy
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	e7fe      	b.n	8000d60 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d62:	f7ff fbed 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d302      	bcc.n	8000d78 <xQueueGenericSend+0xcc>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d129      	bne.n	8000dcc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	68b9      	ldr	r1, [r7, #8]
 8000d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d7e:	f000 fa35 	bl	80011ec <prvCopyDataToQueue>
 8000d82:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d010      	beq.n	8000dae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8e:	3324      	adds	r3, #36	; 0x24
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 f939 	bl	8002008 <xTaskRemoveFromEventList>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d9c:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	f3bf 8f6f 	isb	sy
 8000dac:	e00a      	b.n	8000dc4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d007      	beq.n	8000dc4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000db4:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	f3bf 8f4f 	dsb	sy
 8000dc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000dc4:	f7ff fbea 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e063      	b.n	8000e94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d103      	bne.n	8000dda <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000dd2:	f7ff fbe3 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e05c      	b.n	8000e94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d106      	bne.n	8000dee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 f971 	bl	80020cc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000dea:	2301      	movs	r3, #1
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000dee:	f7ff fbd5 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000df2:	f000 fec5 	bl	8001b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000df6:	f7ff fba3 	bl	8000540 <vPortEnterCritical>
 8000dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e06:	d103      	bne.n	8000e10 <xQueueGenericSend+0x164>
 8000e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d103      	bne.n	8000e26 <xQueueGenericSend+0x17a>
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e26:	f7ff fbb9 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e2a:	1d3a      	adds	r2, r7, #4
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 f96e 	bl	8002114 <xTaskCheckForTimeOut>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d124      	bne.n	8000e88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e40:	f000 facc 	bl	80013dc <prvIsQueueFull>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d018      	beq.n	8000e7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4c:	3310      	adds	r3, #16
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 f88a 	bl	8001f6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e5a:	f000 fa57 	bl	800130c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000e5e:	f000 fe9d 	bl	8001b9c <xTaskResumeAll>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f47f af7c 	bne.w	8000d62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	f3bf 8f4f 	dsb	sy
 8000e76:	f3bf 8f6f 	isb	sy
 8000e7a:	e772      	b.n	8000d62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e7e:	f000 fa45 	bl	800130c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e82:	f000 fe8b 	bl	8001b9c <xTaskResumeAll>
 8000e86:	e76c      	b.n	8000d62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e8a:	f000 fa3f 	bl	800130c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e8e:	f000 fe85 	bl	8001b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000e92:	2300      	movs	r3, #0
		}
	}
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3738      	adds	r7, #56	; 0x38
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	e000ed04 	.word	0xe000ed04

08000ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d109      	bne.n	8000ecc <xQueueGenericSendFromISR+0x2c>
 8000eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ebc:	f383 8811 	msr	BASEPRI, r3
 8000ec0:	f3bf 8f6f 	isb	sy
 8000ec4:	f3bf 8f4f 	dsb	sy
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eca:	e7fe      	b.n	8000eca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d103      	bne.n	8000eda <xQueueGenericSendFromISR+0x3a>
 8000ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <xQueueGenericSendFromISR+0x3e>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <xQueueGenericSendFromISR+0x40>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d109      	bne.n	8000ef8 <xQueueGenericSendFromISR+0x58>
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	623b      	str	r3, [r7, #32]
 8000ef6:	e7fe      	b.n	8000ef6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d103      	bne.n	8000f06 <xQueueGenericSendFromISR+0x66>
 8000efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <xQueueGenericSendFromISR+0x6a>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <xQueueGenericSendFromISR+0x6c>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d109      	bne.n	8000f24 <xQueueGenericSendFromISR+0x84>
 8000f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f14:	f383 8811 	msr	BASEPRI, r3
 8000f18:	f3bf 8f6f 	isb	sy
 8000f1c:	f3bf 8f4f 	dsb	sy
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e7fe      	b.n	8000f22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f24:	f7ff fbde 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000f28:	f3ef 8211 	mrs	r2, BASEPRI
 8000f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f30:	f383 8811 	msr	BASEPRI, r3
 8000f34:	f3bf 8f6f 	isb	sy
 8000f38:	f3bf 8f4f 	dsb	sy
 8000f3c:	61ba      	str	r2, [r7, #24]
 8000f3e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000f40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d302      	bcc.n	8000f56 <xQueueGenericSendFromISR+0xb6>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d12c      	bne.n	8000fb0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f66:	f000 f941 	bl	80011ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f72:	d112      	bne.n	8000f9a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d016      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7e:	3324      	adds	r3, #36	; 0x24
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 f841 	bl	8002008 <xTaskRemoveFromEventList>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00e      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e007      	b.n	8000faa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	b25a      	sxtb	r2, r3
 8000fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000faa:	2301      	movs	r3, #1
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000fae:	e001      	b.n	8000fb4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3738      	adds	r7, #56	; 0x38
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d109      	bne.n	8000ff8 <xQueueGenericReceive+0x30>
	__asm volatile
 8000fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe8:	f383 8811 	msr	BASEPRI, r3
 8000fec:	f3bf 8f6f 	isb	sy
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	e7fe      	b.n	8000ff6 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d103      	bne.n	8001006 <xQueueGenericReceive+0x3e>
 8000ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <xQueueGenericReceive+0x42>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <xQueueGenericReceive+0x44>
 800100a:	2300      	movs	r3, #0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d109      	bne.n	8001024 <xQueueGenericReceive+0x5c>
 8001010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001014:	f383 8811 	msr	BASEPRI, r3
 8001018:	f3bf 8f6f 	isb	sy
 800101c:	f3bf 8f4f 	dsb	sy
 8001020:	623b      	str	r3, [r7, #32]
 8001022:	e7fe      	b.n	8001022 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001024:	f001 f9ac 	bl	8002380 <xTaskGetSchedulerState>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <xQueueGenericReceive+0x6c>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <xQueueGenericReceive+0x70>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <xQueueGenericReceive+0x72>
 8001038:	2300      	movs	r3, #0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <xQueueGenericReceive+0x8a>
 800103e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	e7fe      	b.n	8001050 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001052:	f7ff fa75 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105e:	2b00      	cmp	r3, #0
 8001060:	d046      	beq.n	80010f0 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800106c:	f000 f928 	bl	80012c0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d121      	bne.n	80010ba <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	1e5a      	subs	r2, r3, #1
 800107a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800107e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d104      	bne.n	8001090 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001086:	f001 fa93 	bl	80025b0 <pvTaskIncrementMutexHeldCount>
 800108a:	4602      	mov	r2, r0
 800108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d027      	beq.n	80010e8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109a:	3310      	adds	r3, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f000 ffb3 	bl	8002008 <xTaskRemoveFromEventList>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01f      	beq.n	80010e8 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <xQueueGenericReceive+0x220>)
 80010aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	f3bf 8f4f 	dsb	sy
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	e016      	b.n	80010e8 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80010ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010be:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00f      	beq.n	80010e8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ca:	3324      	adds	r3, #36	; 0x24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 ff9b 	bl	8002008 <xTaskRemoveFromEventList>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80010d8:	4b43      	ldr	r3, [pc, #268]	; (80011e8 <xQueueGenericReceive+0x220>)
 80010da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80010e8:	f7ff fa58 	bl	800059c <vPortExitCritical>
				return pdPASS;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e077      	b.n	80011e0 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d103      	bne.n	80010fe <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80010f6:	f7ff fa51 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e070      	b.n	80011e0 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4618      	mov	r0, r3
 800110a:	f000 ffdf 	bl	80020cc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800110e:	2301      	movs	r3, #1
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001112:	f7ff fa43 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001116:	f000 fd33 	bl	8001b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800111a:	f7ff fa11 	bl	8000540 <vPortEnterCritical>
 800111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001124:	b25b      	sxtb	r3, r3
 8001126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112a:	d103      	bne.n	8001134 <xQueueGenericReceive+0x16c>
 800112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800113a:	b25b      	sxtb	r3, r3
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d103      	bne.n	800114a <xQueueGenericReceive+0x182>
 8001142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800114a:	f7ff fa27 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800114e:	1d3a      	adds	r2, r7, #4
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f000 ffdc 	bl	8002114 <xTaskCheckForTimeOut>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d131      	bne.n	80011c6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001164:	f000 f924 	bl	80013b0 <prvIsQueueEmpty>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d025      	beq.n	80011ba <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800116e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d108      	bne.n	8001188 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8001176:	f7ff f9e3 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800117a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f91c 	bl	80023bc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001184:	f7ff fa0a 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118a:	3324      	adds	r3, #36	; 0x24
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f000 feeb 	bl	8001f6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001198:	f000 f8b8 	bl	800130c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800119c:	f000 fcfe 	bl	8001b9c <xTaskResumeAll>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f47f af55 	bne.w	8001052 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <xQueueGenericReceive+0x220>)
 80011aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	f3bf 8f6f 	isb	sy
 80011b8:	e74b      	b.n	8001052 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80011ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011bc:	f000 f8a6 	bl	800130c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011c0:	f000 fcec 	bl	8001b9c <xTaskResumeAll>
 80011c4:	e745      	b.n	8001052 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80011c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011c8:	f000 f8a0 	bl	800130c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80011cc:	f000 fce6 	bl	8001b9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011d2:	f000 f8ed 	bl	80013b0 <prvIsQueueEmpty>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f43f af3a 	beq.w	8001052 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80011de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3738      	adds	r7, #56	; 0x38
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	e000ed04 	.word	0xe000ed04

080011ec <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001200:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10d      	bne.n	8001226 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d14d      	bne.n	80012ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4618      	mov	r0, r3
 8001218:	f001 f946 	bl	80024a8 <xTaskPriorityDisinherit>
 800121c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	e043      	b.n	80012ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d119      	bne.n	8001260 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6898      	ldr	r0, [r3, #8]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	461a      	mov	r2, r3
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	f002 fb48 	bl	80038cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	441a      	add	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	d32b      	bcc.n	80012ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	e026      	b.n	80012ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	461a      	mov	r2, r3
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	f002 fb2e 	bl	80038cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	425b      	negs	r3, r3
 800127a:	441a      	add	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	425b      	negs	r3, r3
 8001296:	441a      	add	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d105      	bne.n	80012ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80012b6:	697b      	ldr	r3, [r7, #20]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d018      	beq.n	8001304 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	441a      	add	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d303      	bcc.n	80012f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68d9      	ldr	r1, [r3, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	461a      	mov	r2, r3
 80012fe:	6838      	ldr	r0, [r7, #0]
 8001300:	f002 fae4 	bl	80038cc <memcpy>
	}
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001314:	f7ff f914 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800131e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001320:	e011      	b.n	8001346 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	2b00      	cmp	r3, #0
 8001328:	d012      	beq.n	8001350 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3324      	adds	r3, #36	; 0x24
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fe6a 	bl	8002008 <xTaskRemoveFromEventList>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800133a:	f000 ff49 	bl	80021d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	3b01      	subs	r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	dce9      	bgt.n	8001322 <prvUnlockQueue+0x16>
 800134e:	e000      	b.n	8001352 <prvUnlockQueue+0x46>
					break;
 8001350:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	22ff      	movs	r2, #255	; 0xff
 8001356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800135a:	f7ff f91f 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800135e:	f7ff f8ef 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001368:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800136a:	e011      	b.n	8001390 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d012      	beq.n	800139a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3310      	adds	r3, #16
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fe45 	bl	8002008 <xTaskRemoveFromEventList>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001384:	f000 ff24 	bl	80021d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	3b01      	subs	r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001394:	2b00      	cmp	r3, #0
 8001396:	dce9      	bgt.n	800136c <prvUnlockQueue+0x60>
 8001398:	e000      	b.n	800139c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800139a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80013a4:	f7ff f8fa 	bl	800059c <vPortExitCritical>
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013b8:	f7ff f8c2 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e001      	b.n	80013ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013ce:	f7ff f8e5 	bl	800059c <vPortExitCritical>

	return xReturn;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013e4:	f7ff f8ac 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d102      	bne.n	80013fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e001      	b.n	80013fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013fe:	f7ff f8cd 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e014      	b.n	8001446 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <vQueueAddToRegistry+0x4c>)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10b      	bne.n	8001440 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001428:	490b      	ldr	r1, [pc, #44]	; (8001458 <vQueueAddToRegistry+0x4c>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <vQueueAddToRegistry+0x4c>)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4413      	add	r3, r2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800143e:	e005      	b.n	800144c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3301      	adds	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b07      	cmp	r3, #7
 800144a:	d9e7      	bls.n	800141c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	200079b0 	.word	0x200079b0

0800145c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800146c:	f7ff f868 	bl	8000540 <vPortEnterCritical>
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001476:	b25b      	sxtb	r3, r3
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d103      	bne.n	8001486 <vQueueWaitForMessageRestricted+0x2a>
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800148c:	b25b      	sxtb	r3, r3
 800148e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001492:	d103      	bne.n	800149c <vQueueWaitForMessageRestricted+0x40>
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800149c:	f7ff f87e 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d106      	bne.n	80014b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3324      	adds	r3, #36	; 0x24
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fd7f 	bl	8001fb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff28 	bl	800130c <prvUnlockQueue>
	}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f941 	bl	8000760 <pvPortMalloc>
 80014de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00e      	beq.n	8001504 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80014e6:	2050      	movs	r0, #80	; 0x50
 80014e8:	f7ff f93a 	bl	8000760 <pvPortMalloc>
 80014ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
 80014fa:	e005      	b.n	8001508 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80014fc:	6978      	ldr	r0, [r7, #20]
 80014fe:	f7ff f9f5 	bl	80008ec <vPortFree>
 8001502:	e001      	b.n	8001508 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d013      	beq.n	8001536 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800150e:	88fa      	ldrh	r2, [r7, #6]
 8001510:	2300      	movs	r3, #0
 8001512:	9303      	str	r3, [sp, #12]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 f80e 	bl	8001546 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800152a:	69f8      	ldr	r0, [r7, #28]
 800152c:	f000 f892 	bl	8001654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e002      	b.n	800153c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800153c:	69bb      	ldr	r3, [r7, #24]
	}
 800153e:	4618      	mov	r0, r3
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b088      	sub	sp, #32
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001556:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	461a      	mov	r2, r3
 800155e:	21a5      	movs	r1, #165	; 0xa5
 8001560:	f002 f9bf 	bl	80038e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800156e:	3b01      	subs	r3, #1
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f023 0307 	bic.w	r3, r3, #7
 800157c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <prvInitialiseNewTask+0x56>
 8001588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158c:	f383 8811 	msr	BASEPRI, r3
 8001590:	f3bf 8f6f 	isb	sy
 8001594:	f3bf 8f4f 	dsb	sy
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e7fe      	b.n	800159a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	e012      	b.n	80015c8 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	7819      	ldrb	r1, [r3, #0]
 80015aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	3334      	adds	r3, #52	; 0x34
 80015b2:	460a      	mov	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b09      	cmp	r3, #9
 80015cc:	d9e9      	bls.n	80015a2 <prvInitialiseNewTask+0x5c>
 80015ce:	e000      	b.n	80015d2 <prvInitialiseNewTask+0x8c>
		{
			break;
 80015d0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d901      	bls.n	80015e4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80015e0:	2304      	movs	r3, #4
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80015e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80015ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80015f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f2:	2200      	movs	r2, #0
 80015f4:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80015f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f8:	3304      	adds	r3, #4
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fe08 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001602:	3318      	adds	r3, #24
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe fe03 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800160e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	f1c3 0205 	rsb	r2, r3, #5
 8001616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001618:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001622:	2200      	movs	r2, #0
 8001624:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001628:	2200      	movs	r2, #0
 800162a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	68f9      	ldr	r1, [r7, #12]
 8001632:	69b8      	ldr	r0, [r7, #24]
 8001634:	f7fe fe80 	bl	8000338 <pxPortInitialiseStack>
 8001638:	4602      	mov	r2, r0
 800163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800164a:	bf00      	nop
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800165c:	f7fe ff70 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <prvAddNewTaskToReadyList+0xb8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	4a29      	ldr	r2, [pc, #164]	; (800170c <prvAddNewTaskToReadyList+0xb8>)
 8001668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800166a:	4b29      	ldr	r3, [pc, #164]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001672:	4a27      	ldr	r2, [pc, #156]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <prvAddNewTaskToReadyList+0xb8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d110      	bne.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001680:	f000 fdcc 	bl	800221c <prvInitialiseTaskLists>
 8001684:	e00d      	b.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <prvAddNewTaskToReadyList+0xc0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	429a      	cmp	r2, r3
 800169a:	d802      	bhi.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <prvAddNewTaskToReadyList+0xc4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <prvAddNewTaskToReadyList+0xc4>)
 80016aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	2201      	movs	r2, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <prvAddNewTaskToReadyList+0xc8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	4a18      	ldr	r2, [pc, #96]	; (800171c <prvAddNewTaskToReadyList+0xc8>)
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4a15      	ldr	r2, [pc, #84]	; (8001720 <prvAddNewTaskToReadyList+0xcc>)
 80016cc:	441a      	add	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3304      	adds	r3, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4610      	mov	r0, r2
 80016d6:	f7fe fda8 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80016da:	f7fe ff5f 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <prvAddNewTaskToReadyList+0xc0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00e      	beq.n	8001704 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <prvAddNewTaskToReadyList+0xd0>)
 80016f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	f3bf 8f4f 	dsb	sy
 8001700:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000793c 	.word	0x2000793c
 8001710:	20007864 	.word	0x20007864
 8001714:	20007948 	.word	0x20007948
 8001718:	20007958 	.word	0x20007958
 800171c:	20007944 	.word	0x20007944
 8001720:	20007868 	.word	0x20007868
 8001724:	e000ed04 	.word	0xe000ed04

08001728 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001730:	f7fe ff06 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <vTaskDelete+0x18>
 800173a:	4b38      	ldr	r3, [pc, #224]	; (800181c <vTaskDelete+0xf4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	e000      	b.n	8001742 <vTaskDelete+0x1a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3304      	adds	r3, #4
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fdcb 	bl	80002e4 <uxListRemove>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d115      	bne.n	8001780 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001758:	4931      	ldr	r1, [pc, #196]	; (8001820 <vTaskDelete+0xf8>)
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10a      	bne.n	8001780 <vTaskDelete+0x58>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	2201      	movs	r2, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43da      	mvns	r2, r3
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <vTaskDelete+0xfc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4013      	ands	r3, r2
 800177c:	4a29      	ldr	r2, [pc, #164]	; (8001824 <vTaskDelete+0xfc>)
 800177e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3318      	adds	r3, #24
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fda9 	bl	80002e4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <vTaskDelete+0x100>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	4a23      	ldr	r2, [pc, #140]	; (8001828 <vTaskDelete+0x100>)
 800179a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <vTaskDelete+0xf4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d10b      	bne.n	80017be <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3304      	adds	r3, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	481f      	ldr	r0, [pc, #124]	; (800182c <vTaskDelete+0x104>)
 80017ae:	f7fe fd3c 	bl	800022a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <vTaskDelete+0x108>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <vTaskDelete+0x108>)
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e009      	b.n	80017d2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <vTaskDelete+0x10c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <vTaskDelete+0x10c>)
 80017c6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 fda3 	bl	8002314 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80017ce:	f000 fdb1 	bl	8002334 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80017d2:	f7fe fee3 	bl	800059c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <vTaskDelete+0x110>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01a      	beq.n	8001814 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <vTaskDelete+0xf4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d115      	bne.n	8001814 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <vTaskDelete+0x114>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d009      	beq.n	8001804 <vTaskDelete+0xdc>
 80017f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f4:	f383 8811 	msr	BASEPRI, r3
 80017f8:	f3bf 8f6f 	isb	sy
 80017fc:	f3bf 8f4f 	dsb	sy
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	e7fe      	b.n	8001802 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <vTaskDelete+0x118>)
 8001806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f3bf 8f4f 	dsb	sy
 8001810:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20007864 	.word	0x20007864
 8001820:	20007868 	.word	0x20007868
 8001824:	20007944 	.word	0x20007944
 8001828:	20007958 	.word	0x20007958
 800182c:	20007910 	.word	0x20007910
 8001830:	20007924 	.word	0x20007924
 8001834:	2000793c 	.word	0x2000793c
 8001838:	20007948 	.word	0x20007948
 800183c:	20007964 	.word	0x20007964
 8001840:	e000ed04 	.word	0xe000ed04

08001844 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d016      	beq.n	8001884 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <vTaskDelay+0x60>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <vTaskDelay+0x2e>
 800185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001862:	f383 8811 	msr	BASEPRI, r3
 8001866:	f3bf 8f6f 	isb	sy
 800186a:	f3bf 8f4f 	dsb	sy
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	e7fe      	b.n	8001870 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001872:	f000 f985 	bl	8001b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001876:	2100      	movs	r1, #0
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fead 	bl	80025d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800187e:	f000 f98d 	bl	8001b9c <xTaskResumeAll>
 8001882:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d107      	bne.n	800189a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <vTaskDelay+0x64>)
 800188c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	f3bf 8f4f 	dsb	sy
 8001896:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20007964 	.word	0x20007964
 80018a8:	e000ed04 	.word	0xe000ed04

080018ac <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80018b4:	f7fe fe44 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <vTaskSuspend+0x18>
 80018be:	4b37      	ldr	r3, [pc, #220]	; (800199c <vTaskSuspend+0xf0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	e000      	b.n	80018c6 <vTaskSuspend+0x1a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3304      	adds	r3, #4
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fd09 	bl	80002e4 <uxListRemove>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d115      	bne.n	8001904 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	4930      	ldr	r1, [pc, #192]	; (80019a0 <vTaskSuspend+0xf4>)
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10a      	bne.n	8001904 <vTaskSuspend+0x58>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	2201      	movs	r2, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43da      	mvns	r2, r3
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <vTaskSuspend+0xf8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4013      	ands	r3, r2
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <vTaskSuspend+0xf8>)
 8001902:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3318      	adds	r3, #24
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fce7 	bl	80002e4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3304      	adds	r3, #4
 800191a:	4619      	mov	r1, r3
 800191c:	4822      	ldr	r0, [pc, #136]	; (80019a8 <vTaskSuspend+0xfc>)
 800191e:	f7fe fc84 	bl	800022a <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8001922:	f7fe fe3b 	bl	800059c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <vTaskSuspend+0x100>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <vTaskSuspend+0x8e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800192e:	f7fe fe07 	bl	8000540 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001932:	f000 fcff 	bl	8002334 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001936:	f7fe fe31 	bl	800059c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <vTaskSuspend+0xf0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	429a      	cmp	r2, r3
 8001942:	d126      	bne.n	8001992 <vTaskSuspend+0xe6>
		{
			if( xSchedulerRunning != pdFALSE )
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <vTaskSuspend+0x100>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d016      	beq.n	800197a <vTaskSuspend+0xce>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <vTaskSuspend+0x104>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d009      	beq.n	8001968 <vTaskSuspend+0xbc>
 8001954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001958:	f383 8811 	msr	BASEPRI, r3
 800195c:	f3bf 8f6f 	isb	sy
 8001960:	f3bf 8f4f 	dsb	sy
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	e7fe      	b.n	8001966 <vTaskSuspend+0xba>
				portYIELD_WITHIN_API();
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <vTaskSuspend+0x108>)
 800196a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	f3bf 8f4f 	dsb	sy
 8001974:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001978:	e00b      	b.n	8001992 <vTaskSuspend+0xe6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <vTaskSuspend+0xfc>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <vTaskSuspend+0x10c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d103      	bne.n	800198e <vTaskSuspend+0xe2>
					pxCurrentTCB = NULL;
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <vTaskSuspend+0xf0>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
	}
 800198c:	e001      	b.n	8001992 <vTaskSuspend+0xe6>
					vTaskSwitchContext();
 800198e:	f000 fa6d 	bl	8001e6c <vTaskSwitchContext>
	}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20007864 	.word	0x20007864
 80019a0:	20007868 	.word	0x20007868
 80019a4:	20007944 	.word	0x20007944
 80019a8:	20007928 	.word	0x20007928
 80019ac:	20007948 	.word	0x20007948
 80019b0:	20007964 	.word	0x20007964
 80019b4:	e000ed04 	.word	0xe000ed04
 80019b8:	2000793c 	.word	0x2000793c

080019bc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <prvTaskIsTaskSuspended+0x2a>
 80019d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d6:	f383 8811 	msr	BASEPRI, r3
 80019da:	f3bf 8f6f 	isb	sy
 80019de:	f3bf 8f4f 	dsb	sy
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e7fe      	b.n	80019e4 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <prvTaskIsTaskSuspended+0x6c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d101      	bne.n	80019f4 <prvTaskIsTaskSuspended+0x38>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <prvTaskIsTaskSuspended+0x3a>
 80019f4:	2300      	movs	r3, #0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00f      	beq.n	8001a1a <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <prvTaskIsTaskSuspended+0x70>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00a      	beq.n	8001a1a <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <prvTaskIsTaskSuspended+0x54>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <prvTaskIsTaskSuspended+0x56>
 8001a10:	2300      	movs	r3, #0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8001a16:	2301      	movs	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001a1a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	20007928 	.word	0x20007928
 8001a2c:	200078fc 	.word	0x200078fc

08001a30 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <vTaskResume+0x26>
 8001a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a46:	f383 8811 	msr	BASEPRI, r3
 8001a4a:	f3bf 8f6f 	isb	sy
 8001a4e:	f3bf 8f4f 	dsb	sy
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	e7fe      	b.n	8001a54 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d039      	beq.n	8001ad0 <vTaskResume+0xa0>
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <vTaskResume+0xa8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d034      	beq.n	8001ad0 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8001a66:	f7fe fd6b 	bl	8000540 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7ff ffa6 	bl	80019bc <prvTaskIsTaskSuspended>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d02a      	beq.n	8001acc <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fc32 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	2201      	movs	r2, #1
 8001a86:	409a      	lsls	r2, r3
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <vTaskResume+0xac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	4a13      	ldr	r2, [pc, #76]	; (8001adc <vTaskResume+0xac>)
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <vTaskResume+0xb0>)
 8001aa0:	441a      	add	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	f7fe fbbe 	bl	800022a <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <vTaskResume+0xa8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d307      	bcc.n	8001acc <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <vTaskResume+0xb4>)
 8001abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	f3bf 8f4f 	dsb	sy
 8001ac8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001acc:	f7fe fd66 	bl	800059c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20007864 	.word	0x20007864
 8001adc:	20007944 	.word	0x20007944
 8001ae0:	20007868 	.word	0x20007868
 8001ae4:	e000ed04 	.word	0xe000ed04

08001ae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001aee:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <vTaskStartScheduler+0x80>)
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	2300      	movs	r3, #0
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2300      	movs	r3, #0
 8001af8:	2282      	movs	r2, #130	; 0x82
 8001afa:	491c      	ldr	r1, [pc, #112]	; (8001b6c <vTaskStartScheduler+0x84>)
 8001afc:	481c      	ldr	r0, [pc, #112]	; (8001b70 <vTaskStartScheduler+0x88>)
 8001afe:	f7ff fce1 	bl	80014c4 <xTaskCreate>
 8001b02:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d102      	bne.n	8001b10 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001b0a:	f000 fdcb 	bl	80026a4 <xTimerCreateTimerTask>
 8001b0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d115      	bne.n	8001b42 <vTaskStartScheduler+0x5a>
 8001b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1a:	f383 8811 	msr	BASEPRI, r3
 8001b1e:	f3bf 8f6f 	isb	sy
 8001b22:	f3bf 8f4f 	dsb	sy
 8001b26:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <vTaskStartScheduler+0x8c>)
 8001b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <vTaskStartScheduler+0x90>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <vTaskStartScheduler+0x94>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001b3c:	f7fe fc74 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001b40:	e00d      	b.n	8001b5e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b48:	d109      	bne.n	8001b5e <vTaskStartScheduler+0x76>
 8001b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4e:	f383 8811 	msr	BASEPRI, r3
 8001b52:	f3bf 8f6f 	isb	sy
 8001b56:	f3bf 8f4f 	dsb	sy
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	e7fe      	b.n	8001b5c <vTaskStartScheduler+0x74>
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20007960 	.word	0x20007960
 8001b6c:	080038f4 	.word	0x080038f4
 8001b70:	080021e9 	.word	0x080021e9
 8001b74:	2000795c 	.word	0x2000795c
 8001b78:	20007948 	.word	0x20007948
 8001b7c:	20007940 	.word	0x20007940

08001b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <vTaskSuspendAll+0x18>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4a03      	ldr	r2, [pc, #12]	; (8001b98 <vTaskSuspendAll+0x18>)
 8001b8c:	6013      	str	r3, [r2, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	20007964 	.word	0x20007964

08001b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001baa:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <xTaskResumeAll+0x114>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <xTaskResumeAll+0x2a>
 8001bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb6:	f383 8811 	msr	BASEPRI, r3
 8001bba:	f3bf 8f6f 	isb	sy
 8001bbe:	f3bf 8f4f 	dsb	sy
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	e7fe      	b.n	8001bc4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001bc6:	f7fe fcbb 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001bca:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <xTaskResumeAll+0x114>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	4a37      	ldr	r2, [pc, #220]	; (8001cb0 <xTaskResumeAll+0x114>)
 8001bd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <xTaskResumeAll+0x114>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d161      	bne.n	8001ca0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001bdc:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <xTaskResumeAll+0x118>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d05d      	beq.n	8001ca0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001be4:	e02e      	b.n	8001c44 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <xTaskResumeAll+0x11c>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3318      	adds	r3, #24
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fb76 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fb71 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	2201      	movs	r2, #1
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <xTaskResumeAll+0x120>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	4a2a      	ldr	r2, [pc, #168]	; (8001cbc <xTaskResumeAll+0x120>)
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <xTaskResumeAll+0x124>)
 8001c22:	441a      	add	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3304      	adds	r3, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f7fe fafd 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c34:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <xTaskResumeAll+0x128>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d302      	bcc.n	8001c44 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001c3e:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <xTaskResumeAll+0x12c>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <xTaskResumeAll+0x11c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1cc      	bne.n	8001be6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001c52:	f000 fb6f 	bl	8002334 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <xTaskResumeAll+0x130>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d010      	beq.n	8001c84 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001c62:	f000 f847 	bl	8001cf4 <xTaskIncrementTick>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <xTaskResumeAll+0x12c>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f1      	bne.n	8001c62 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <xTaskResumeAll+0x130>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <xTaskResumeAll+0x12c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d009      	beq.n	8001ca0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <xTaskResumeAll+0x134>)
 8001c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001ca0:	f7fe fc7c 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20007964 	.word	0x20007964
 8001cb4:	2000793c 	.word	0x2000793c
 8001cb8:	200078fc 	.word	0x200078fc
 8001cbc:	20007944 	.word	0x20007944
 8001cc0:	20007868 	.word	0x20007868
 8001cc4:	20007864 	.word	0x20007864
 8001cc8:	20007950 	.word	0x20007950
 8001ccc:	2000794c 	.word	0x2000794c
 8001cd0:	e000ed04 	.word	0xe000ed04

08001cd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <xTaskGetTickCount+0x1c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001ce0:	687b      	ldr	r3, [r7, #4]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20007940 	.word	0x20007940

08001cf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cfe:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <xTaskIncrementTick+0x14c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 808c 	bne.w	8001e20 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001d08:	4b4e      	ldr	r3, [pc, #312]	; (8001e44 <xTaskIncrementTick+0x150>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001d10:	4a4c      	ldr	r2, [pc, #304]	; (8001e44 <xTaskIncrementTick+0x150>)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d11f      	bne.n	8001d5c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001d1c:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <xTaskIncrementTick+0x154>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <xTaskIncrementTick+0x46>
 8001d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2a:	f383 8811 	msr	BASEPRI, r3
 8001d2e:	f3bf 8f6f 	isb	sy
 8001d32:	f3bf 8f4f 	dsb	sy
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	e7fe      	b.n	8001d38 <xTaskIncrementTick+0x44>
 8001d3a:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <xTaskIncrementTick+0x154>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <xTaskIncrementTick+0x158>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a40      	ldr	r2, [pc, #256]	; (8001e48 <xTaskIncrementTick+0x154>)
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4a40      	ldr	r2, [pc, #256]	; (8001e4c <xTaskIncrementTick+0x158>)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b40      	ldr	r3, [pc, #256]	; (8001e50 <xTaskIncrementTick+0x15c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	4a3e      	ldr	r2, [pc, #248]	; (8001e50 <xTaskIncrementTick+0x15c>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	f000 faec 	bl	8002334 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d5c:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <xTaskIncrementTick+0x160>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d34d      	bcc.n	8001e02 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d66:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <xTaskIncrementTick+0x154>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <xTaskIncrementTick+0x80>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <xTaskIncrementTick+0x82>
 8001d74:	2300      	movs	r3, #0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d004      	beq.n	8001d84 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d7a:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <xTaskIncrementTick+0x160>)
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	601a      	str	r2, [r3, #0]
					break;
 8001d82:	e03e      	b.n	8001e02 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d84:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <xTaskIncrementTick+0x154>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d203      	bcs.n	8001da4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001d9c:	4a2d      	ldr	r2, [pc, #180]	; (8001e54 <xTaskIncrementTick+0x160>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6013      	str	r3, [r2, #0]
						break;
 8001da2:	e02e      	b.n	8001e02 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	3304      	adds	r3, #4
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fa9b 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3318      	adds	r3, #24
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fa92 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <xTaskIncrementTick+0x164>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <xTaskIncrementTick+0x164>)
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <xTaskIncrementTick+0x168>)
 8001de0:	441a      	add	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3304      	adds	r3, #4
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f7fe fa1e 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <xTaskIncrementTick+0x16c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d3b4      	bcc.n	8001d66 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e00:	e7b1      	b.n	8001d66 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <xTaskIncrementTick+0x16c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e08:	4914      	ldr	r1, [pc, #80]	; (8001e5c <xTaskIncrementTick+0x168>)
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d907      	bls.n	8001e2a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e004      	b.n	8001e2a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <xTaskIncrementTick+0x170>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <xTaskIncrementTick+0x170>)
 8001e28:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <xTaskIncrementTick+0x174>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001e32:	2301      	movs	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001e36:	697b      	ldr	r3, [r7, #20]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20007964 	.word	0x20007964
 8001e44:	20007940 	.word	0x20007940
 8001e48:	200078f4 	.word	0x200078f4
 8001e4c:	200078f8 	.word	0x200078f8
 8001e50:	20007954 	.word	0x20007954
 8001e54:	2000795c 	.word	0x2000795c
 8001e58:	20007944 	.word	0x20007944
 8001e5c:	20007868 	.word	0x20007868
 8001e60:	20007864 	.word	0x20007864
 8001e64:	2000794c 	.word	0x2000794c
 8001e68:	20007950 	.word	0x20007950

08001e6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <vTaskSwitchContext+0xec>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001e7a:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <vTaskSwitchContext+0xf0>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001e80:	e065      	b.n	8001f4e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8001e82:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <vTaskSwitchContext+0xf0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001e88:	4b35      	ldr	r3, [pc, #212]	; (8001f60 <vTaskSwitchContext+0xf4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d111      	bne.n	8001ec4 <vTaskSwitchContext+0x58>
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d10b      	bne.n	8001ec4 <vTaskSwitchContext+0x58>
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	3308      	adds	r3, #8
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d105      	bne.n	8001ec4 <vTaskSwitchContext+0x58>
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	330c      	adds	r3, #12
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d008      	beq.n	8001ed6 <vTaskSwitchContext+0x6a>
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <vTaskSwitchContext+0xf4>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <vTaskSwitchContext+0xf4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3334      	adds	r3, #52	; 0x34
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	f001 fbc0 	bl	8003656 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <vTaskSwitchContext+0xf8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	f1c3 031f 	rsb	r3, r3, #31
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	491e      	ldr	r1, [pc, #120]	; (8001f68 <vTaskSwitchContext+0xfc>)
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <vTaskSwitchContext+0xa8>
	__asm volatile
 8001f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f04:	f383 8811 	msr	BASEPRI, r3
 8001f08:	f3bf 8f6f 	isb	sy
 8001f0c:	f3bf 8f4f 	dsb	sy
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	e7fe      	b.n	8001f12 <vTaskSwitchContext+0xa6>
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <vTaskSwitchContext+0xfc>)
 8001f20:	4413      	add	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	3308      	adds	r3, #8
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d104      	bne.n	8001f44 <vTaskSwitchContext+0xd8>
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <vTaskSwitchContext+0xf4>)
 8001f4c:	6013      	str	r3, [r2, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20007964 	.word	0x20007964
 8001f5c:	20007950 	.word	0x20007950
 8001f60:	20007864 	.word	0x20007864
 8001f64:	20007944 	.word	0x20007944
 8001f68:	20007868 	.word	0x20007868

08001f6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <vTaskPlaceOnEventList+0x24>
 8001f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f80:	f383 8811 	msr	BASEPRI, r3
 8001f84:	f3bf 8f6f 	isb	sy
 8001f88:	f3bf 8f4f 	dsb	sy
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	e7fe      	b.n	8001f8e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <vTaskPlaceOnEventList+0x44>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3318      	adds	r3, #24
 8001f96:	4619      	mov	r1, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7fe f96a 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	6838      	ldr	r0, [r7, #0]
 8001fa2:	f000 fb19 	bl	80025d8 <prvAddCurrentTaskToDelayedList>
}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20007864 	.word	0x20007864

08001fb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <vTaskPlaceOnEventListRestricted+0x26>
 8001fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fca:	f383 8811 	msr	BASEPRI, r3
 8001fce:	f3bf 8f6f 	isb	sy
 8001fd2:	f3bf 8f4f 	dsb	sy
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e7fe      	b.n	8001fd8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <vTaskPlaceOnEventListRestricted+0x50>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3318      	adds	r3, #24
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f7fe f921 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	68b8      	ldr	r0, [r7, #8]
 8001ff8:	f000 faee 	bl	80025d8 <prvAddCurrentTaskToDelayedList>
	}
 8001ffc:	bf00      	nop
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20007864 	.word	0x20007864

08002008 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d109      	bne.n	8002032 <xTaskRemoveFromEventList+0x2a>
 800201e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002022:	f383 8811 	msr	BASEPRI, r3
 8002026:	f3bf 8f6f 	isb	sy
 800202a:	f3bf 8f4f 	dsb	sy
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e7fe      	b.n	8002030 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	3318      	adds	r3, #24
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe f954 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <xTaskRemoveFromEventList+0xac>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d11c      	bne.n	800207e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	3304      	adds	r3, #4
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe f94b 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	2201      	movs	r2, #1
 8002054:	409a      	lsls	r2, r3
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <xTaskRemoveFromEventList+0xb0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	4a16      	ldr	r2, [pc, #88]	; (80020b8 <xTaskRemoveFromEventList+0xb0>)
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4a13      	ldr	r2, [pc, #76]	; (80020bc <xTaskRemoveFromEventList+0xb4>)
 800206e:	441a      	add	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	3304      	adds	r3, #4
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f7fe f8d7 	bl	800022a <vListInsertEnd>
 800207c:	e005      	b.n	800208a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	3318      	adds	r3, #24
 8002082:	4619      	mov	r1, r3
 8002084:	480e      	ldr	r0, [pc, #56]	; (80020c0 <xTaskRemoveFromEventList+0xb8>)
 8002086:	f7fe f8d0 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <xTaskRemoveFromEventList+0xbc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	429a      	cmp	r2, r3
 8002096:	d905      	bls.n	80020a4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002098:	2301      	movs	r3, #1
 800209a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <xTaskRemoveFromEventList+0xc0>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e001      	b.n	80020a8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80020a8:	697b      	ldr	r3, [r7, #20]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20007964 	.word	0x20007964
 80020b8:	20007944 	.word	0x20007944
 80020bc:	20007868 	.word	0x20007868
 80020c0:	200078fc 	.word	0x200078fc
 80020c4:	20007864 	.word	0x20007864
 80020c8:	20007950 	.word	0x20007950

080020cc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <vTaskSetTimeOutState+0x22>
 80020da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020de:	f383 8811 	msr	BASEPRI, r3
 80020e2:	f3bf 8f6f 	isb	sy
 80020e6:	f3bf 8f4f 	dsb	sy
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e7fe      	b.n	80020ec <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80020ee:	4b07      	ldr	r3, [pc, #28]	; (800210c <vTaskSetTimeOutState+0x40>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <vTaskSetTimeOutState+0x44>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	605a      	str	r2, [r3, #4]
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20007954 	.word	0x20007954
 8002110:	20007940 	.word	0x20007940

08002114 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <xTaskCheckForTimeOut+0x24>
 8002124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002128:	f383 8811 	msr	BASEPRI, r3
 800212c:	f3bf 8f6f 	isb	sy
 8002130:	f3bf 8f4f 	dsb	sy
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e7fe      	b.n	8002136 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <xTaskCheckForTimeOut+0x3e>
 800213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002142:	f383 8811 	msr	BASEPRI, r3
 8002146:	f3bf 8f6f 	isb	sy
 800214a:	f3bf 8f4f 	dsb	sy
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	e7fe      	b.n	8002150 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002152:	f7fe f9f5 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <xTaskCheckForTimeOut+0xb4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d102      	bne.n	800216c <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e026      	b.n	80021ba <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <xTaskCheckForTimeOut+0xb8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d007      	beq.n	8002188 <xTaskCheckForTimeOut+0x74>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	429a      	cmp	r2, r3
 8002180:	d802      	bhi.n	8002188 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002182:	2301      	movs	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e018      	b.n	80021ba <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	1ad2      	subs	r2, r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d20e      	bcs.n	80021b6 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1acb      	subs	r3, r1, r3
 80021a4:	441a      	add	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ff8e 	bl	80020cc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e001      	b.n	80021ba <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80021ba:	f7fe f9ef 	bl	800059c <vPortExitCritical>

	return xReturn;
 80021be:	697b      	ldr	r3, [r7, #20]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20007940 	.word	0x20007940
 80021cc:	20007954 	.word	0x20007954

080021d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <vTaskMissedYield+0x14>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	20007950 	.word	0x20007950

080021e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80021f0:	f000 f854 	bl	800229c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <prvIdleTask+0x2c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d907      	bls.n	800220c <prvIdleTask+0x24>
			{
				taskYIELD();
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <prvIdleTask+0x30>)
 80021fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800220c:	f001 fa29 	bl	8003662 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002210:	e7ee      	b.n	80021f0 <prvIdleTask+0x8>
 8002212:	bf00      	nop
 8002214:	20007868 	.word	0x20007868
 8002218:	e000ed04 	.word	0xe000ed04

0800221c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	e00c      	b.n	8002242 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4a12      	ldr	r2, [pc, #72]	; (800227c <prvInitialiseTaskLists+0x60>)
 8002234:	4413      	add	r3, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f7fd ffca 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3301      	adds	r3, #1
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b04      	cmp	r3, #4
 8002246:	d9ef      	bls.n	8002228 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002248:	480d      	ldr	r0, [pc, #52]	; (8002280 <prvInitialiseTaskLists+0x64>)
 800224a:	f7fd ffc1 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800224e:	480d      	ldr	r0, [pc, #52]	; (8002284 <prvInitialiseTaskLists+0x68>)
 8002250:	f7fd ffbe 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002254:	480c      	ldr	r0, [pc, #48]	; (8002288 <prvInitialiseTaskLists+0x6c>)
 8002256:	f7fd ffbb 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800225a:	480c      	ldr	r0, [pc, #48]	; (800228c <prvInitialiseTaskLists+0x70>)
 800225c:	f7fd ffb8 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002260:	480b      	ldr	r0, [pc, #44]	; (8002290 <prvInitialiseTaskLists+0x74>)
 8002262:	f7fd ffb5 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <prvInitialiseTaskLists+0x78>)
 8002268:	4a05      	ldr	r2, [pc, #20]	; (8002280 <prvInitialiseTaskLists+0x64>)
 800226a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <prvInitialiseTaskLists+0x7c>)
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <prvInitialiseTaskLists+0x68>)
 8002270:	601a      	str	r2, [r3, #0]
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20007868 	.word	0x20007868
 8002280:	200078cc 	.word	0x200078cc
 8002284:	200078e0 	.word	0x200078e0
 8002288:	200078fc 	.word	0x200078fc
 800228c:	20007910 	.word	0x20007910
 8002290:	20007928 	.word	0x20007928
 8002294:	200078f4 	.word	0x200078f4
 8002298:	200078f8 	.word	0x200078f8

0800229c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022a2:	e028      	b.n	80022f6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80022a4:	f7ff fc6c 	bl	8001b80 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <prvCheckTasksWaitingTermination+0x6c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80022b8:	f7ff fc70 	bl	8001b9c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d119      	bne.n	80022f6 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80022c2:	f7fe f93d 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <prvCheckTasksWaitingTermination+0x6c>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	3304      	adds	r3, #4
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f806 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <prvCheckTasksWaitingTermination+0x70>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3b01      	subs	r3, #1
 80022de:	4a0b      	ldr	r2, [pc, #44]	; (800230c <prvCheckTasksWaitingTermination+0x70>)
 80022e0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <prvCheckTasksWaitingTermination+0x74>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	4a09      	ldr	r2, [pc, #36]	; (8002310 <prvCheckTasksWaitingTermination+0x74>)
 80022ea:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80022ec:	f7fe f956 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80022f0:	6838      	ldr	r0, [r7, #0]
 80022f2:	f000 f80f 	bl	8002314 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <prvCheckTasksWaitingTermination+0x74>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1d2      	bne.n	80022a4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20007910 	.word	0x20007910
 800230c:	2000793c 	.word	0x2000793c
 8002310:	20007924 	.word	0x20007924

08002314 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe fae3 	bl	80008ec <vPortFree>
			vPortFree( pxTCB );
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe fae0 	bl	80008ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <prvResetNextTaskUnblockTime+0x44>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <prvResetNextTaskUnblockTime+0x14>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <prvResetNextTaskUnblockTime+0x16>
 8002348:	2300      	movs	r3, #0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <prvResetNextTaskUnblockTime+0x48>)
 8002350:	f04f 32ff 	mov.w	r2, #4294967295
 8002354:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002356:	e008      	b.n	800236a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <prvResetNextTaskUnblockTime+0x44>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <prvResetNextTaskUnblockTime+0x48>)
 8002368:	6013      	str	r3, [r2, #0]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	200078f4 	.word	0x200078f4
 800237c:	2000795c 	.word	0x2000795c

08002380 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <xTaskGetSchedulerState+0x34>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800238e:	2301      	movs	r3, #1
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	e008      	b.n	80023a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <xTaskGetSchedulerState+0x38>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800239c:	2302      	movs	r3, #2
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	e001      	b.n	80023a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80023a6:	687b      	ldr	r3, [r7, #4]
	}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	20007948 	.word	0x20007948
 80023b8:	20007964 	.word	0x20007964

080023bc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d062      	beq.n	8002494 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d2:	4b32      	ldr	r3, [pc, #200]	; (800249c <vTaskPriorityInherit+0xe0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	429a      	cmp	r2, r3
 80023da:	d25b      	bcs.n	8002494 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db06      	blt.n	80023f2 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e4:	4b2d      	ldr	r3, [pc, #180]	; (800249c <vTaskPriorityInherit+0xe0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	f1c3 0205 	rsb	r2, r3, #5
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6959      	ldr	r1, [r3, #20]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <vTaskPriorityInherit+0xe4>)
 8002404:	4413      	add	r3, r2
 8002406:	4299      	cmp	r1, r3
 8002408:	d101      	bne.n	800240e <vTaskPriorityInherit+0x52>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <vTaskPriorityInherit+0x54>
 800240e:	2300      	movs	r3, #0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d03a      	beq.n	800248a <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3304      	adds	r3, #4
 8002418:	4618      	mov	r0, r3
 800241a:	f7fd ff63 	bl	80002e4 <uxListRemove>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d115      	bne.n	8002450 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002428:	491d      	ldr	r1, [pc, #116]	; (80024a0 <vTaskPriorityInherit+0xe4>)
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <vTaskPriorityInherit+0x94>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	2201      	movs	r2, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43da      	mvns	r2, r3
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <vTaskPriorityInherit+0xe8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4013      	ands	r3, r2
 800244c:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <vTaskPriorityInherit+0xe8>)
 800244e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <vTaskPriorityInherit+0xe0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	2201      	movs	r2, #1
 8002460:	409a      	lsls	r2, r3
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <vTaskPriorityInherit+0xe8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <vTaskPriorityInherit+0xe8>)
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <vTaskPriorityInherit+0xe4>)
 800247a:	441a      	add	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3304      	adds	r3, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4610      	mov	r0, r2
 8002484:	f7fd fed1 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002488:	e004      	b.n	8002494 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <vTaskPriorityInherit+0xe0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20007864 	.word	0x20007864
 80024a0:	20007868 	.word	0x20007868
 80024a4:	20007944 	.word	0x20007944

080024a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d06c      	beq.n	8002598 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80024be:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <xTaskPriorityDisinherit+0xfc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d009      	beq.n	80024dc <xTaskPriorityDisinherit+0x34>
 80024c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	e7fe      	b.n	80024da <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <xTaskPriorityDisinherit+0x50>
 80024e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	e7fe      	b.n	80024f6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	1e5a      	subs	r2, r3, #1
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	429a      	cmp	r2, r3
 800250c:	d044      	beq.n	8002598 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	2b00      	cmp	r3, #0
 8002514:	d140      	bne.n	8002598 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	3304      	adds	r3, #4
 800251a:	4618      	mov	r0, r3
 800251c:	f7fd fee2 	bl	80002e4 <uxListRemove>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d115      	bne.n	8002552 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252a:	491f      	ldr	r1, [pc, #124]	; (80025a8 <xTaskPriorityDisinherit+0x100>)
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <xTaskPriorityDisinherit+0xaa>
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	2201      	movs	r2, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43da      	mvns	r2, r3
 8002548:	4b18      	ldr	r3, [pc, #96]	; (80025ac <xTaskPriorityDisinherit+0x104>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4013      	ands	r3, r2
 800254e:	4a17      	ldr	r2, [pc, #92]	; (80025ac <xTaskPriorityDisinherit+0x104>)
 8002550:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	f1c3 0205 	rsb	r2, r3, #5
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	2201      	movs	r2, #1
 800256c:	409a      	lsls	r2, r3
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <xTaskPriorityDisinherit+0x104>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <xTaskPriorityDisinherit+0x104>)
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <xTaskPriorityDisinherit+0x100>)
 8002586:	441a      	add	r2, r3
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	3304      	adds	r3, #4
 800258c:	4619      	mov	r1, r3
 800258e:	4610      	mov	r0, r2
 8002590:	f7fd fe4b 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002594:	2301      	movs	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002598:	697b      	ldr	r3, [r7, #20]
	}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20007864 	.word	0x20007864
 80025a8:	20007868 	.word	0x20007868
 80025ac:	20007944 	.word	0x20007944

080025b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80025b4:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025c2:	3201      	adds	r2, #1
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 80025c6:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80025c8:	681b      	ldr	r3, [r3, #0]
	}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	20007864 	.word	0x20007864

080025d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <prvAddCurrentTaskToDelayedList+0xb0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025e8:	4b28      	ldr	r3, [pc, #160]	; (800268c <prvAddCurrentTaskToDelayedList+0xb4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3304      	adds	r3, #4
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd fe78 	bl	80002e4 <uxListRemove>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10b      	bne.n	8002612 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <prvAddCurrentTaskToDelayedList+0xb4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	2201      	movs	r2, #1
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	4b21      	ldr	r3, [pc, #132]	; (8002690 <prvAddCurrentTaskToDelayedList+0xb8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4013      	ands	r3, r2
 800260e:	4a20      	ldr	r2, [pc, #128]	; (8002690 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002610:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d10a      	bne.n	8002630 <prvAddCurrentTaskToDelayedList+0x58>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3304      	adds	r3, #4
 8002626:	4619      	mov	r1, r3
 8002628:	481a      	ldr	r0, [pc, #104]	; (8002694 <prvAddCurrentTaskToDelayedList+0xbc>)
 800262a:	f7fd fdfe 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800262e:	e026      	b.n	800267e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <prvAddCurrentTaskToDelayedList+0xb4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	429a      	cmp	r2, r3
 8002646:	d209      	bcs.n	800265c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <prvAddCurrentTaskToDelayedList+0xc0>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <prvAddCurrentTaskToDelayedList+0xb4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3304      	adds	r3, #4
 8002652:	4619      	mov	r1, r3
 8002654:	4610      	mov	r0, r2
 8002656:	f7fd fe0c 	bl	8000272 <vListInsert>
}
 800265a:	e010      	b.n	800267e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <prvAddCurrentTaskToDelayedList+0xc4>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3304      	adds	r3, #4
 8002666:	4619      	mov	r1, r3
 8002668:	4610      	mov	r0, r2
 800266a:	f7fd fe02 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	429a      	cmp	r2, r3
 8002676:	d202      	bcs.n	800267e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002678:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	6013      	str	r3, [r2, #0]
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20007940 	.word	0x20007940
 800268c:	20007864 	.word	0x20007864
 8002690:	20007944 	.word	0x20007944
 8002694:	20007928 	.word	0x20007928
 8002698:	200078f8 	.word	0x200078f8
 800269c:	200078f4 	.word	0x200078f4
 80026a0:	2000795c 	.word	0x2000795c

080026a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80026ae:	f000 fa8f 	bl	8002bd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <xTimerCreateTimerTask+0x54>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <xTimerCreateTimerTask+0x58>)
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	2303      	movs	r3, #3
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2300      	movs	r3, #0
 80026c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026c8:	490d      	ldr	r1, [pc, #52]	; (8002700 <xTimerCreateTimerTask+0x5c>)
 80026ca:	480e      	ldr	r0, [pc, #56]	; (8002704 <xTimerCreateTimerTask+0x60>)
 80026cc:	f7fe fefa 	bl	80014c4 <xTaskCreate>
 80026d0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <xTimerCreateTimerTask+0x48>
 80026d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	e7fe      	b.n	80026ea <xTimerCreateTimerTask+0x46>
	return xReturn;
 80026ec:	687b      	ldr	r3, [r7, #4]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20007998 	.word	0x20007998
 80026fc:	2000799c 	.word	0x2000799c
 8002700:	080038fc 	.word	0x080038fc
 8002704:	08002821 	.word	0x08002821

08002708 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d109      	bne.n	8002734 <xTimerGenericCommand+0x2c>
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	623b      	str	r3, [r7, #32]
 8002732:	e7fe      	b.n	8002732 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <xTimerGenericCommand+0x94>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d02a      	beq.n	8002792 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b05      	cmp	r3, #5
 800274c:	dc18      	bgt.n	8002780 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800274e:	f7ff fe17 	bl	8002380 <xTaskGetSchedulerState>
 8002752:	4603      	mov	r3, r0
 8002754:	2b02      	cmp	r3, #2
 8002756:	d109      	bne.n	800276c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002758:	4b10      	ldr	r3, [pc, #64]	; (800279c <xTimerGenericCommand+0x94>)
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	f107 0114 	add.w	r1, r7, #20
 8002760:	2300      	movs	r3, #0
 8002762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002764:	f7fe faa2 	bl	8000cac <xQueueGenericSend>
 8002768:	6278      	str	r0, [r7, #36]	; 0x24
 800276a:	e012      	b.n	8002792 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <xTimerGenericCommand+0x94>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	f107 0114 	add.w	r1, r7, #20
 8002774:	2300      	movs	r3, #0
 8002776:	2200      	movs	r2, #0
 8002778:	f7fe fa98 	bl	8000cac <xQueueGenericSend>
 800277c:	6278      	str	r0, [r7, #36]	; 0x24
 800277e:	e008      	b.n	8002792 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <xTimerGenericCommand+0x94>)
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	f107 0114 	add.w	r1, r7, #20
 8002788:	2300      	movs	r3, #0
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	f7fe fb88 	bl	8000ea0 <xQueueGenericSendFromISR>
 8002790:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002794:	4618      	mov	r0, r3
 8002796:	3728      	adds	r7, #40	; 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20007998 	.word	0x20007998

080027a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <prvProcessExpiredTimer+0x7c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3304      	adds	r3, #4
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fd93 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d121      	bne.n	800280a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	18d1      	adds	r1, r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f000 f8c8 	bl	8002968 <prvInsertTimerInActiveList>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d015      	beq.n	800280a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80027de:	2300      	movs	r3, #0
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2300      	movs	r3, #0
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	2100      	movs	r1, #0
 80027e8:	6978      	ldr	r0, [r7, #20]
 80027ea:	f7ff ff8d 	bl	8002708 <xTimerGenericCommand>
 80027ee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <prvProcessExpiredTimer+0x6a>
 80027f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e7fe      	b.n	8002808 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	4798      	blx	r3
}
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20007990 	.word	0x20007990

08002820 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	4618      	mov	r0, r3
 800282e:	f000 f857 	bl	80028e0 <prvGetNextExpireTime>
 8002832:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4619      	mov	r1, r3
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f803 	bl	8002844 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800283e:	f000 f8d5 	bl	80029ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002842:	e7f1      	b.n	8002828 <prvTimerTask+0x8>

08002844 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800284e:	f7ff f997 	bl	8001b80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002852:	f107 0308 	add.w	r3, r7, #8
 8002856:	4618      	mov	r0, r3
 8002858:	f000 f866 	bl	8002928 <prvSampleTimeNow>
 800285c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d130      	bne.n	80028c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <prvProcessTimerOrBlockTask+0x3c>
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	429a      	cmp	r2, r3
 8002870:	d806      	bhi.n	8002880 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002872:	f7ff f993 	bl	8001b9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff91 	bl	80027a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800287e:	e024      	b.n	80028ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <prvProcessTimerOrBlockTask+0x90>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002898:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <prvProcessTimerOrBlockTask+0x94>)
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	4619      	mov	r1, r3
 80028a6:	f7fe fdd9 	bl	800145c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80028aa:	f7ff f977 	bl	8001b9c <xTaskResumeAll>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <prvProcessTimerOrBlockTask+0x98>)
 80028b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	f3bf 8f6f 	isb	sy
}
 80028c4:	e001      	b.n	80028ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80028c6:	f7ff f969 	bl	8001b9c <xTaskResumeAll>
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20007994 	.word	0x20007994
 80028d8:	20007998 	.word	0x20007998
 80028dc:	e000ed04 	.word	0xe000ed04

080028e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <prvGetNextExpireTime+0x44>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf0c      	ite	eq
 80028f2:	2301      	moveq	r3, #1
 80028f4:	2300      	movne	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d105      	bne.n	8002912 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002906:	4b07      	ldr	r3, [pc, #28]	; (8002924 <prvGetNextExpireTime+0x44>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e001      	b.n	8002916 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002916:	68fb      	ldr	r3, [r7, #12]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	20007990 	.word	0x20007990

08002928 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002930:	f7ff f9d0 	bl	8001cd4 <xTaskGetTickCount>
 8002934:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <prvSampleTimeNow+0x3c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d205      	bcs.n	800294c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002940:	f000 f8e6 	bl	8002b10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e002      	b.n	8002952 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002952:	4a04      	ldr	r2, [pc, #16]	; (8002964 <prvSampleTimeNow+0x3c>)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002958:	68fb      	ldr	r3, [r7, #12]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200079a0 	.word	0x200079a0

08002968 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	d812      	bhi.n	80029b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	1ad2      	subs	r2, r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	429a      	cmp	r2, r3
 800299a:	d302      	bcc.n	80029a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800299c:	2301      	movs	r3, #1
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	e01b      	b.n	80029da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <prvInsertTimerInActiveList+0x7c>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3304      	adds	r3, #4
 80029aa:	4619      	mov	r1, r3
 80029ac:	4610      	mov	r0, r2
 80029ae:	f7fd fc60 	bl	8000272 <vListInsert>
 80029b2:	e012      	b.n	80029da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d206      	bcs.n	80029ca <prvInsertTimerInActiveList+0x62>
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d302      	bcc.n	80029ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80029c4:	2301      	movs	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e007      	b.n	80029da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <prvInsertTimerInActiveList+0x80>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	3304      	adds	r3, #4
 80029d2:	4619      	mov	r1, r3
 80029d4:	4610      	mov	r0, r2
 80029d6:	f7fd fc4c 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80029da:	697b      	ldr	r3, [r7, #20]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20007994 	.word	0x20007994
 80029e8:	20007990 	.word	0x20007990

080029ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	; 0x30
 80029f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80029f2:	e07a      	b.n	8002aea <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	db77      	blt.n	8002aea <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d004      	beq.n	8002a10 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	3304      	adds	r3, #4
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fc6a 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff88 	bl	8002928 <prvSampleTimeNow>
 8002a18:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b09      	cmp	r3, #9
 8002a1e:	d863      	bhi.n	8002ae8 <prvProcessReceivedCommands+0xfc>
 8002a20:	a201      	add	r2, pc, #4	; (adr r2, 8002a28 <prvProcessReceivedCommands+0x3c>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a51 	.word	0x08002a51
 8002a2c:	08002a51 	.word	0x08002a51
 8002a30:	08002a51 	.word	0x08002a51
 8002a34:	08002aeb 	.word	0x08002aeb
 8002a38:	08002aab 	.word	0x08002aab
 8002a3c:	08002ae1 	.word	0x08002ae1
 8002a40:	08002a51 	.word	0x08002a51
 8002a44:	08002a51 	.word	0x08002a51
 8002a48:	08002aeb 	.word	0x08002aeb
 8002a4c:	08002aab 	.word	0x08002aab
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	18d1      	adds	r1, r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a3a      	ldr	r2, [r7, #32]
 8002a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a5e:	f7ff ff83 	bl	8002968 <prvInsertTimerInActiveList>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d040      	beq.n	8002aea <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a6e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d138      	bne.n	8002aea <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	441a      	add	r2, r3
 8002a80:	2300      	movs	r3, #0
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	2100      	movs	r1, #0
 8002a88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a8a:	f7ff fe3d 	bl	8002708 <xTimerGenericCommand>
 8002a8e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d129      	bne.n	8002aea <prvProcessReceivedCommands+0xfe>
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	e7fe      	b.n	8002aa8 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <prvProcessReceivedCommands+0xe0>
 8002ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	e7fe      	b.n	8002aca <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	18d1      	adds	r1, r2, r3
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	6a3a      	ldr	r2, [r7, #32]
 8002ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ada:	f7ff ff45 	bl	8002968 <prvInsertTimerInActiveList>
					break;
 8002ade:	e004      	b.n	8002aea <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002ae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ae2:	f7fd ff03 	bl	80008ec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002ae6:	e000      	b.n	8002aea <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002ae8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <prvProcessReceivedCommands+0x120>)
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	f107 0108 	add.w	r1, r7, #8
 8002af2:	2300      	movs	r3, #0
 8002af4:	2200      	movs	r2, #0
 8002af6:	f7fe fa67 	bl	8000fc8 <xQueueGenericReceive>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f af79 	bne.w	80029f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002b02:	bf00      	nop
 8002b04:	3728      	adds	r7, #40	; 0x28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20007998 	.word	0x20007998

08002b10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b16:	e044      	b.n	8002ba2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b18:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <prvSwitchTimerLists+0xb8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b22:	4b29      	ldr	r3, [pc, #164]	; (8002bc8 <prvSwitchTimerLists+0xb8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fd fbd7 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	6938      	ldr	r0, [r7, #16]
 8002b3c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d12d      	bne.n	8002ba2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d90e      	bls.n	8002b76 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <prvSwitchTimerLists+0xb8>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f7fd fb7f 	bl	8000272 <vListInsert>
 8002b74:	e015      	b.n	8002ba2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002b76:	2300      	movs	r3, #0
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	2100      	movs	r1, #0
 8002b80:	6938      	ldr	r0, [r7, #16]
 8002b82:	f7ff fdc1 	bl	8002708 <xTimerGenericCommand>
 8002b86:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <prvSwitchTimerLists+0x92>
 8002b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	e7fe      	b.n	8002ba0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <prvSwitchTimerLists+0xb8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1b5      	bne.n	8002b18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <prvSwitchTimerLists+0xb8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <prvSwitchTimerLists+0xbc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <prvSwitchTimerLists+0xb8>)
 8002bb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002bba:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <prvSwitchTimerLists+0xbc>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20007990 	.word	0x20007990
 8002bcc:	20007994 	.word	0x20007994

08002bd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002bd4:	f7fd fcb4 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <prvCheckForValidListAndQueue+0x54>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d11d      	bne.n	8002c1c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002be0:	4811      	ldr	r0, [pc, #68]	; (8002c28 <prvCheckForValidListAndQueue+0x58>)
 8002be2:	f7fd faf5 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002be6:	4811      	ldr	r0, [pc, #68]	; (8002c2c <prvCheckForValidListAndQueue+0x5c>)
 8002be8:	f7fd faf2 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <prvCheckForValidListAndQueue+0x60>)
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <prvCheckForValidListAndQueue+0x58>)
 8002bf0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <prvCheckForValidListAndQueue+0x64>)
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <prvCheckForValidListAndQueue+0x5c>)
 8002bf6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	210c      	movs	r1, #12
 8002bfc:	2005      	movs	r0, #5
 8002bfe:	f7fd fffd 	bl	8000bfc <xQueueGenericCreate>
 8002c02:	4602      	mov	r2, r0
 8002c04:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <prvCheckForValidListAndQueue+0x54>)
 8002c06:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <prvCheckForValidListAndQueue+0x54>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <prvCheckForValidListAndQueue+0x54>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4908      	ldr	r1, [pc, #32]	; (8002c38 <prvCheckForValidListAndQueue+0x68>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fbf8 	bl	800140c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c1c:	f7fd fcbe 	bl	800059c <vPortExitCritical>
}
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20007998 	.word	0x20007998
 8002c28:	20007968 	.word	0x20007968
 8002c2c:	2000797c 	.word	0x2000797c
 8002c30:	20007990 	.word	0x20007990
 8002c34:	20007994 	.word	0x20007994
 8002c38:	08003904 	.word	0x08003904

08002c3c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <DAC_SetChannel1Data+0x34>)
 8002c4e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	3308      	adds	r3, #8
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	6013      	str	r3, [r2, #0]
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40007400 	.word	0x40007400

08002c74 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <DMA_Init+0xac>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002c9e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002caa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002cb6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002cc2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0307 	bic.w	r3, r3, #7
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	4313      	orrs	r3, r2
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	60da      	str	r2, [r3, #12]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	f01c803f 	.word	0xf01c803f

08002d24 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d006      	beq.n	8002d44 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002d42:	e005      	b.n	8002d50 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 0201 	bic.w	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	601a      	str	r2, [r3, #0]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e001      	b.n	8002d7e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <DMA_GetFlagStatus+0x6c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d802      	bhi.n	8002dac <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <DMA_GetFlagStatus+0x70>)
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	e001      	b.n	8002db0 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002dac:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <DMA_GetFlagStatus+0x74>)
 8002dae:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	e002      	b.n	8002dc8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002dce:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
 8002de2:	e001      	b.n	8002de8 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002de4:	2300      	movs	r3, #0
 8002de6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	4002640f 	.word	0x4002640f
 8002dfc:	40026000 	.word	0x40026000
 8002e00:	40026400 	.word	0x40026400

08002e04 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a10      	ldr	r2, [pc, #64]	; (8002e54 <DMA_ClearFlag+0x50>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d802      	bhi.n	8002e1c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <DMA_ClearFlag+0x54>)
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	e001      	b.n	8002e20 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <DMA_ClearFlag+0x58>)
 8002e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002e30:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002e38:	e006      	b.n	8002e48 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002e40:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	6093      	str	r3, [r2, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	4002640f 	.word	0x4002640f
 8002e58:	40026000 	.word	0x40026000
 8002e5c:	40026400 	.word	0x40026400

08002e60 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e076      	b.n	8002f6a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d165      	bne.n	8002f64 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	791b      	ldrb	r3, [r3, #4]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	791b      	ldrb	r3, [r3, #4]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d003      	beq.n	8002ed6 <GPIO_Init+0x76>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	791b      	ldrb	r3, [r3, #4]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d12e      	bne.n	8002f34 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2103      	movs	r1, #3
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	795b      	ldrb	r3, [r3, #5]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	fa01 f303 	lsl.w	r3, r1, r3
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	2301      	movs	r3, #1
 8002f10:	408b      	lsls	r3, r1
 8002f12:	43db      	mvns	r3, r3
 8002f14:	401a      	ands	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	7992      	ldrb	r2, [r2, #6]
 8002f22:	4611      	mov	r1, r2
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	b292      	uxth	r2, r2
 8002f28:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2c:	b292      	uxth	r2, r2
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2103      	movs	r1, #3
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	401a      	ands	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	79db      	ldrb	r3, [r3, #7]
 8002f54:	4619      	mov	r1, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	3301      	adds	r3, #1
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d985      	bls.n	8002e7c <GPIO_Init+0x1c>
    }
  }
}
 8002f70:	bf00      	nop
 8002f72:	371c      	adds	r7, #28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002f8e:	490a      	ldr	r1, [pc, #40]	; (8002fb8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8002f9a:	e006      	b.n	8002faa <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002f9c:	4906      	ldr	r1, [pc, #24]	; (8002fb8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800

08002fbc <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	887a      	ldrh	r2, [r7, #2]
 8002fcc:	819a      	strh	r2, [r3, #12]
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	891b      	ldrh	r3, [r3, #8]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
 8002ffe:	e001      	b.n	8003004 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8003000:	2300      	movs	r3, #0
 8003002:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	4a10      	ldr	r2, [pc, #64]	; (8003064 <STM_EVAL_LEDInit+0x50>)
 8003022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003026:	2101      	movs	r1, #1
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ffa7 	bl	8002f7c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	4a0d      	ldr	r2, [pc, #52]	; (8003068 <STM_EVAL_LEDInit+0x54>)
 8003032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003036:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003038:	2301      	movs	r3, #1
 800303a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800303c:	2300      	movs	r3, #0
 800303e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003044:	2302      	movs	r3, #2
 8003046:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	4a08      	ldr	r2, [pc, #32]	; (800306c <STM_EVAL_LEDInit+0x58>)
 800304c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003050:	f107 0208 	add.w	r2, r7, #8
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ff02 	bl	8002e60 <GPIO_Init>
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	08003978 	.word	0x08003978
 8003068:	08003970 	.word	0x08003970
 800306c:	20000004 	.word	0x20000004

08003070 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <STM_EVAL_LEDToggle+0x34>)
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	79fa      	ldrb	r2, [r7, #7]
 8003084:	4907      	ldr	r1, [pc, #28]	; (80030a4 <STM_EVAL_LEDToggle+0x34>)
 8003086:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800308a:	6952      	ldr	r2, [r2, #20]
 800308c:	79f9      	ldrb	r1, [r7, #7]
 800308e:	4806      	ldr	r0, [pc, #24]	; (80030a8 <STM_EVAL_LEDToggle+0x38>)
 8003090:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8003094:	404a      	eors	r2, r1
 8003096:	615a      	str	r2, [r3, #20]
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	20000004 	.word	0x20000004
 80030a8:	08003970 	.word	0x08003970

080030ac <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80030b0:	4b38      	ldr	r3, [pc, #224]	; (8003194 <Audio_MAL_IRQHandler+0xe8>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b38      	ldr	r3, [pc, #224]	; (8003198 <Audio_MAL_IRQHandler+0xec>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f7ff fe66 	bl	8002d8c <DMA_GetFlagStatus>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d064      	beq.n	8003190 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80030c6:	4b35      	ldr	r3, [pc, #212]	; (800319c <Audio_MAL_IRQHandler+0xf0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d04c      	beq.n	8003168 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80030ce:	bf00      	nop
 80030d0:	4b30      	ldr	r3, [pc, #192]	; (8003194 <Audio_MAL_IRQHandler+0xe8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fe41 	bl	8002d5c <DMA_GetCmdStatus>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f7      	bne.n	80030d0 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80030e0:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <Audio_MAL_IRQHandler+0xe8>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <Audio_MAL_IRQHandler+0xec>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7ff fe8a 	bl	8002e04 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80030f0:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <Audio_MAL_IRQHandler+0xf4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <Audio_MAL_IRQHandler+0xf8>)
 80030f8:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80030fa:	4b28      	ldr	r3, [pc, #160]	; (800319c <Audio_MAL_IRQHandler+0xf0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003102:	4293      	cmp	r3, r2
 8003104:	bf28      	it	cs
 8003106:	4613      	movcs	r3, r2
 8003108:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <Audio_MAL_IRQHandler+0xf8>)
 800310a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800310c:	4b21      	ldr	r3, [pc, #132]	; (8003194 <Audio_MAL_IRQHandler+0xe8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4924      	ldr	r1, [pc, #144]	; (80031a4 <Audio_MAL_IRQHandler+0xf8>)
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fdae 	bl	8002c74 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8003118:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <Audio_MAL_IRQHandler+0xe8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2101      	movs	r1, #1
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fe00 	bl	8002d24 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8003124:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <Audio_MAL_IRQHandler+0xf4>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b1c      	ldr	r3, [pc, #112]	; (800319c <Audio_MAL_IRQHandler+0xf0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003130:	d203      	bcs.n	800313a <Audio_MAL_IRQHandler+0x8e>
 8003132:	4b1a      	ldr	r3, [pc, #104]	; (800319c <Audio_MAL_IRQHandler+0xf0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	e000      	b.n	800313c <Audio_MAL_IRQHandler+0x90>
 800313a:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <Audio_MAL_IRQHandler+0xfc>)
 800313c:	4413      	add	r3, r2
 800313e:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <Audio_MAL_IRQHandler+0xf4>)
 8003140:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8003142:	4b16      	ldr	r3, [pc, #88]	; (800319c <Audio_MAL_IRQHandler+0xf0>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <Audio_MAL_IRQHandler+0xf0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800314e:	428b      	cmp	r3, r1
 8003150:	bf28      	it	cs
 8003152:	460b      	movcs	r3, r1
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	4a11      	ldr	r2, [pc, #68]	; (800319c <Audio_MAL_IRQHandler+0xf0>)
 8003158:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800315a:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <Audio_MAL_IRQHandler+0xe8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2101      	movs	r1, #1
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fddf 	bl	8002d24 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8003166:	e013      	b.n	8003190 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <Audio_MAL_IRQHandler+0xe8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fdd8 	bl	8002d24 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8003174:	4b07      	ldr	r3, [pc, #28]	; (8003194 <Audio_MAL_IRQHandler+0xe8>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b07      	ldr	r3, [pc, #28]	; (8003198 <Audio_MAL_IRQHandler+0xec>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7ff fe40 	bl	8002e04 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <Audio_MAL_IRQHandler+0xf4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f83c 	bl	8003208 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}
 8003194:	2000001c 	.word	0x2000001c
 8003198:	20000020 	.word	0x20000020
 800319c:	20000014 	.word	0x20000014
 80031a0:	200079f0 	.word	0x200079f0
 80031a4:	20007a30 	.word	0x20007a30
 80031a8:	0001fffe 	.word	0x0001fffe

080031ac <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80031b0:	f7ff ff7c 	bl	80030ac <Audio_MAL_IRQHandler>
}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80031bc:	f7ff ff76 	bl	80030ac <Audio_MAL_IRQHandler>
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80031c8:	2102      	movs	r1, #2
 80031ca:	480d      	ldr	r0, [pc, #52]	; (8003200 <SPI3_IRQHandler+0x3c>)
 80031cc:	f7ff ff05 	bl	8002fda <SPI_I2S_GetFlagStatus>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d011      	beq.n	80031fa <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80031d6:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <SPI3_IRQHandler+0x40>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d106      	bne.n	80031ec <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80031de:	f000 f81e 	bl	800321e <EVAL_AUDIO_GetSampleCallBack>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4619      	mov	r1, r3
 80031e6:	2004      	movs	r0, #4
 80031e8:	f7ff fd28 	bl	8002c3c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80031ec:	f000 f817 	bl	800321e <EVAL_AUDIO_GetSampleCallBack>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4619      	mov	r1, r3
 80031f4:	4802      	ldr	r0, [pc, #8]	; (8003200 <SPI3_IRQHandler+0x3c>)
 80031f6:	f7ff fee1 	bl	8002fbc <SPI_I2S_SendData>
  }
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40003c00 	.word	0x40003c00
 8003204:	20000018 	.word	0x20000018

08003208 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8003212:	bf00      	nop
}
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <NVIC_SetPriorityGrouping+0x44>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800324c:	4013      	ands	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8003258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800325c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003262:	4a04      	ldr	r2, [pc, #16]	; (8003274 <NVIC_SetPriorityGrouping+0x44>)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	60d3      	str	r3, [r2, #12]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <main>:


/*-----------------------------------------------------------*/

int main(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af02      	add	r7, sp, #8
	prvSetupHardware();
 800327e:	f000 f9fc 	bl	800367a <prvSetupHardware>

	activeTaskQueueHandle = xQueueCreate( 	mainQUEUE_LENGTH, sizeof( dd_task_t ) );
 8003282:	2200      	movs	r2, #0
 8003284:	2118      	movs	r1, #24
 8003286:	200a      	movs	r0, #10
 8003288:	f7fd fcb8 	bl	8000bfc <xQueueGenericCreate>
 800328c:	4602      	mov	r2, r0
 800328e:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <main+0xd0>)
 8003290:	601a      	str	r2, [r3, #0]
	vQueueAddToRegistry( activeTaskQueueHandle, "ActiveTasks" );
 8003292:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <main+0xd0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	492d      	ldr	r1, [pc, #180]	; (800334c <main+0xd4>)
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe f8b7 	bl	800140c <vQueueAddToRegistry>

	completedTaskQueueHandle = xQueueCreate( 	mainQUEUE_LENGTH, sizeof( dd_task_t ) );
 800329e:	2200      	movs	r2, #0
 80032a0:	2118      	movs	r1, #24
 80032a2:	200a      	movs	r0, #10
 80032a4:	f7fd fcaa 	bl	8000bfc <xQueueGenericCreate>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b29      	ldr	r3, [pc, #164]	; (8003350 <main+0xd8>)
 80032ac:	601a      	str	r2, [r3, #0]
	vQueueAddToRegistry( completedTaskQueueHandle, "CompletedTasks" );
 80032ae:	4b28      	ldr	r3, [pc, #160]	; (8003350 <main+0xd8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4928      	ldr	r1, [pc, #160]	; (8003354 <main+0xdc>)
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fe f8a9 	bl	800140c <vQueueAddToRegistry>

	overdueTaskQueueHandle = xQueueCreate( 	mainQUEUE_LENGTH, sizeof( dd_task_t ) );
 80032ba:	2200      	movs	r2, #0
 80032bc:	2118      	movs	r1, #24
 80032be:	200a      	movs	r0, #10
 80032c0:	f7fd fc9c 	bl	8000bfc <xQueueGenericCreate>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b24      	ldr	r3, [pc, #144]	; (8003358 <main+0xe0>)
 80032c8:	601a      	str	r2, [r3, #0]
	vQueueAddToRegistry( overdueTaskQueueHandle, "OverdueTasks" );
 80032ca:	4b23      	ldr	r3, [pc, #140]	; (8003358 <main+0xe0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4923      	ldr	r1, [pc, #140]	; (800335c <main+0xe4>)
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe f89b 	bl	800140c <vQueueAddToRegistry>

	xTaskCreate( deadlineDrivenScheduler_FTASK, "DDS", configMINIMAL_STACK_SIZE, NULL, PRIORITY_SCHEDULER, NULL);
 80032d6:	2300      	movs	r3, #0
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	2304      	movs	r3, #4
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2300      	movs	r3, #0
 80032e0:	2282      	movs	r2, #130	; 0x82
 80032e2:	491f      	ldr	r1, [pc, #124]	; (8003360 <main+0xe8>)
 80032e4:	481f      	ldr	r0, [pc, #124]	; (8003364 <main+0xec>)
 80032e6:	f7fe f8ed 	bl	80014c4 <xTaskCreate>
	xTaskCreate( monitorTask_FTASK, "MT", configMINIMAL_STACK_SIZE, NULL, PRIORITY_MONITOR, NULL);
 80032ea:	2300      	movs	r3, #0
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	2303      	movs	r3, #3
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	2300      	movs	r3, #0
 80032f4:	2282      	movs	r2, #130	; 0x82
 80032f6:	491c      	ldr	r1, [pc, #112]	; (8003368 <main+0xf0>)
 80032f8:	481c      	ldr	r0, [pc, #112]	; (800336c <main+0xf4>)
 80032fa:	f7fe f8e3 	bl	80014c4 <xTaskCreate>

	xTaskCreate( DDT_GEN_1_FTASK, "DDTG1", configMINIMAL_STACK_SIZE, NULL, PRIORITY_GENERATOR, NULL);
 80032fe:	2300      	movs	r3, #0
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	2302      	movs	r3, #2
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2300      	movs	r3, #0
 8003308:	2282      	movs	r2, #130	; 0x82
 800330a:	4919      	ldr	r1, [pc, #100]	; (8003370 <main+0xf8>)
 800330c:	4819      	ldr	r0, [pc, #100]	; (8003374 <main+0xfc>)
 800330e:	f7fe f8d9 	bl	80014c4 <xTaskCreate>
	xTaskCreate( DDT_GEN_2_FTASK, "DDTG2", configMINIMAL_STACK_SIZE, NULL, PRIORITY_GENERATOR, NULL);
 8003312:	2300      	movs	r3, #0
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	2302      	movs	r3, #2
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2300      	movs	r3, #0
 800331c:	2282      	movs	r2, #130	; 0x82
 800331e:	4916      	ldr	r1, [pc, #88]	; (8003378 <main+0x100>)
 8003320:	4816      	ldr	r0, [pc, #88]	; (800337c <main+0x104>)
 8003322:	f7fe f8cf 	bl	80014c4 <xTaskCreate>
	xTaskCreate( DDT_GEN_3_FTASK, "DDTG3", configMINIMAL_STACK_SIZE, NULL, PRIORITY_GENERATOR, NULL);
 8003326:	2300      	movs	r3, #0
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	2302      	movs	r3, #2
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	2300      	movs	r3, #0
 8003330:	2282      	movs	r2, #130	; 0x82
 8003332:	4913      	ldr	r1, [pc, #76]	; (8003380 <main+0x108>)
 8003334:	4813      	ldr	r0, [pc, #76]	; (8003384 <main+0x10c>)
 8003336:	f7fe f8c5 	bl	80014c4 <xTaskCreate>

	vTaskStartScheduler();
 800333a:	f7fe fbd5 	bl	8001ae8 <vTaskStartScheduler>

	return 0;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200079a4 	.word	0x200079a4
 800334c:	0800390c 	.word	0x0800390c
 8003350:	200079a8 	.word	0x200079a8
 8003354:	08003918 	.word	0x08003918
 8003358:	200079ac 	.word	0x200079ac
 800335c:	08003928 	.word	0x08003928
 8003360:	08003938 	.word	0x08003938
 8003364:	080033e1 	.word	0x080033e1
 8003368:	0800393c 	.word	0x0800393c
 800336c:	08003521 	.word	0x08003521
 8003370:	08003940 	.word	0x08003940
 8003374:	08003531 	.word	0x08003531
 8003378:	08003948 	.word	0x08003948
 800337c:	08003591 	.word	0x08003591
 8003380:	08003950 	.word	0x08003950
 8003384:	080035f1 	.word	0x080035f1

08003388 <create_dd_task>:

void create_dd_task(TaskHandle_t t_handle, task_type_t type, uint32_t task_id)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08c      	sub	sp, #48	; 0x30
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	460b      	mov	r3, r1
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	72fb      	strb	r3, [r7, #11]

	TickType_t currentTicks = xTaskGetTickCount();
 8003396:	f7fe fc9d 	bl	8001cd4 <xTaskGetTickCount>
 800339a:	62f8      	str	r0, [r7, #44]	; 0x2c

	dd_task_t taskToCreate =
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	7afb      	ldrb	r3, [r7, #11]
 80033a2:	763b      	strb	r3, [r7, #24]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	623b      	str	r3, [r7, #32]
	{
			.t_handle = t_handle,
			.type = type,
			.task_id = task_id,
			.release_time = currentTicks,
			.absolute_deadline = currentTicks + TASK1_PERIOD,
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	dd_task_t taskToCreate =
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
 80033b4:	2300      	movs	r3, #0
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
			.completion_time = 0
	};

	xQueueSend(activeTaskQueueHandle, &taskToCreate, (TickType_t) 10);
 80033b8:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <create_dd_task+0x50>)
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	f107 0114 	add.w	r1, r7, #20
 80033c0:	2300      	movs	r3, #0
 80033c2:	220a      	movs	r2, #10
 80033c4:	f7fd fc72 	bl	8000cac <xQueueGenericSend>
	vTaskResume(deadlineDrivenScheduler_FTASK);
 80033c8:	4804      	ldr	r0, [pc, #16]	; (80033dc <create_dd_task+0x54>)
 80033ca:	f7fe fb31 	bl	8001a30 <vTaskResume>
}
 80033ce:	bf00      	nop
 80033d0:	3730      	adds	r7, #48	; 0x30
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200079a4 	.word	0x200079a4
 80033dc:	080033e1 	.word	0x080033e1

080033e0 <deadlineDrivenScheduler_FTASK>:


/*-----------------------------------------------------------*/

static void deadlineDrivenScheduler_FTASK( void *pvParameters )
{
 80033e0:	b5b0      	push	{r4, r5, r7, lr}
 80033e2:	b0ce      	sub	sp, #312	; 0x138
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	6018      	str	r0, [r3, #0]
	{
		dd_task_t tasksToRun[mainQUEUE_LENGTH];
		dd_task_t tempTask;
		dd_task_t minTask;

		int i = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		int minIndex = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130


		while( (xQueueReceive(activeTaskQueueHandle, &tempTask, (TickType_t) 10)) && (i < 10))
 80033f6:	e016      	b.n	8003426 <deadlineDrivenScheduler_FTASK+0x46>
		{
			tasksToRun[i] = tempTask;
 80033f8:	f107 0108 	add.w	r1, r7, #8
 80033fc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	440b      	add	r3, r1
 800340a:	461d      	mov	r5, r3
 800340c:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8003410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003414:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003418:	e885 0003 	stmia.w	r5, {r0, r1}
			i++;
 800341c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003420:	3301      	adds	r3, #1
 8003422:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		while( (xQueueReceive(activeTaskQueueHandle, &tempTask, (TickType_t) 10)) && (i < 10))
 8003426:	4b3d      	ldr	r3, [pc, #244]	; (800351c <deadlineDrivenScheduler_FTASK+0x13c>)
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800342e:	2300      	movs	r3, #0
 8003430:	220a      	movs	r2, #10
 8003432:	f7fd fdc9 	bl	8000fc8 <xQueueGenericReceive>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <deadlineDrivenScheduler_FTASK+0x64>
 800343c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003440:	2b09      	cmp	r3, #9
 8003442:	ddd9      	ble.n	80033f8 <deadlineDrivenScheduler_FTASK+0x18>
		}

		minTask = tempTask;
 8003444:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8003448:	f507 7588 	add.w	r5, r7, #272	; 0x110
 800344c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800344e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003450:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003454:	e884 0003 	stmia.w	r4, {r0, r1}

		for(int j = 0; j < i; j++)
 8003458:	2300      	movs	r3, #0
 800345a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800345e:	e029      	b.n	80034b4 <deadlineDrivenScheduler_FTASK+0xd4>
		{
			if(tasksToRun[j].absolute_deadline < minTask.absolute_deadline)
 8003460:	f107 0108 	add.w	r1, r7, #8
 8003464:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	440b      	add	r3, r1
 8003472:	3310      	adds	r3, #16
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800347a:	429a      	cmp	r2, r3
 800347c:	d215      	bcs.n	80034aa <deadlineDrivenScheduler_FTASK+0xca>
			{
				minTask = tasksToRun[j];
 800347e:	f107 0108 	add.w	r1, r7, #8
 8003482:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	440b      	add	r3, r1
 8003490:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8003494:	461d      	mov	r5, r3
 8003496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800349a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800349e:	e884 0003 	stmia.w	r4, {r0, r1}
				minIndex = j;
 80034a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		for(int j = 0; j < i; j++)
 80034aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034ae:	3301      	adds	r3, #1
 80034b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80034b4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80034b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80034bc:	429a      	cmp	r2, r3
 80034be:	dbcf      	blt.n	8003460 <deadlineDrivenScheduler_FTASK+0x80>
			}
		}

		for(int k = 0; k < i; k++)
 80034c0:	2300      	movs	r3, #0
 80034c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80034c6:	e019      	b.n	80034fc <deadlineDrivenScheduler_FTASK+0x11c>
		{
			if(k != minIndex)
 80034c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80034cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d00e      	beq.n	80034f2 <deadlineDrivenScheduler_FTASK+0x112>
			{
				xQueueSend(activeTaskQueueHandle, &tasksToRun[k], (TickType_t) 10);
 80034d4:	4b11      	ldr	r3, [pc, #68]	; (800351c <deadlineDrivenScheduler_FTASK+0x13c>)
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	f107 0108 	add.w	r1, r7, #8
 80034dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4419      	add	r1, r3
 80034ea:	2300      	movs	r3, #0
 80034ec:	220a      	movs	r2, #10
 80034ee:	f7fd fbdd 	bl	8000cac <xQueueGenericSend>
		for(int k = 0; k < i; k++)
 80034f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034f6:	3301      	adds	r3, #1
 80034f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80034fc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003500:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003504:	429a      	cmp	r2, r3
 8003506:	dbdf      	blt.n	80034c8 <deadlineDrivenScheduler_FTASK+0xe8>
			}
		}

		vTaskResume(minTask.t_handle);
 8003508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe fa8f 	bl	8001a30 <vTaskResume>
		vTaskSuspend(NULL);
 8003512:	2000      	movs	r0, #0
 8003514:	f7fe f9ca 	bl	80018ac <vTaskSuspend>
	{
 8003518:	e767      	b.n	80033ea <deadlineDrivenScheduler_FTASK+0xa>
 800351a:	bf00      	nop
 800351c:	200079a4 	.word	0x200079a4

08003520 <monitorTask_FTASK>:
}

/*-----------------------------------------------------------*/

static void monitorTask_FTASK( void *pvParameters )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(100 / portTICK_RATE_MS);
 8003528:	2064      	movs	r0, #100	; 0x64
 800352a:	f7fe f98b 	bl	8001844 <vTaskDelay>
 800352e:	e7fb      	b.n	8003528 <monitorTask_FTASK+0x8>

08003530 <DDT_GEN_1_FTASK>:
}

/*-----------------------------------------------------------*/

static void DDT_GEN_1_FTASK( void *pvParameters )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af02      	add	r7, sp, #8
 8003536:	6078      	str	r0, [r7, #4]
	while(1)
	{
		TaskHandle_t handle_DDT_RUN_1_FTASK;

		xTaskCreate
 8003538:	f107 030c 	add.w	r3, r7, #12
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	2301      	movs	r3, #1
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	2300      	movs	r3, #0
 8003544:	2282      	movs	r2, #130	; 0x82
 8003546:	4909      	ldr	r1, [pc, #36]	; (800356c <DDT_GEN_1_FTASK+0x3c>)
 8003548:	4809      	ldr	r0, [pc, #36]	; (8003570 <DDT_GEN_1_FTASK+0x40>)
 800354a:	f7fd ffbb 	bl	80014c4 <xTaskCreate>
			NULL,
			PRIORITY_UNSCHEDULED,
			&(handle_DDT_RUN_1_FTASK)
		);

		vTaskSuspend(handle_DDT_RUN_1_FTASK);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4618      	mov	r0, r3
 8003552:	f7fe f9ab 	bl	80018ac <vTaskSuspend>

		create_dd_task(handle_DDT_RUN_1_FTASK, PERIODIC, (uint32_t) 1);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ff13 	bl	8003388 <create_dd_task>

		vTaskDelay(TASK1_PERIOD);
 8003562:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003566:	f7fe f96d 	bl	8001844 <vTaskDelay>
	{
 800356a:	e7e5      	b.n	8003538 <DDT_GEN_1_FTASK+0x8>
 800356c:	08003958 	.word	0x08003958
 8003570:	08003575 	.word	0x08003575

08003574 <DDT_RUN_1_FTASK>:
	}
}

static void DDT_RUN_1_FTASK( void *pvParameters )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		STM_EVAL_LEDToggle(green_led);
 800357c:	2000      	movs	r0, #0
 800357e:	f7ff fd77 	bl	8003070 <STM_EVAL_LEDToggle>
		vTaskDelay(TASK1_EXEC);
 8003582:	205f      	movs	r0, #95	; 0x5f
 8003584:	f7fe f95e 	bl	8001844 <vTaskDelay>
		vTaskDelete(NULL);
 8003588:	2000      	movs	r0, #0
 800358a:	f7fe f8cd 	bl	8001728 <vTaskDelete>
		STM_EVAL_LEDToggle(green_led);
 800358e:	e7f5      	b.n	800357c <DDT_RUN_1_FTASK+0x8>

08003590 <DDT_GEN_2_FTASK>:
}

/*-----------------------------------------------------------*/

static void DDT_GEN_2_FTASK( void *pvParameters )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af02      	add	r7, sp, #8
 8003596:	6078      	str	r0, [r7, #4]
	while(1)
	{
		TaskHandle_t handle_DDT_RUN_2_FTASK;

		xTaskCreate
 8003598:	f107 030c 	add.w	r3, r7, #12
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	2301      	movs	r3, #1
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	2300      	movs	r3, #0
 80035a4:	2282      	movs	r2, #130	; 0x82
 80035a6:	4909      	ldr	r1, [pc, #36]	; (80035cc <DDT_GEN_2_FTASK+0x3c>)
 80035a8:	4809      	ldr	r0, [pc, #36]	; (80035d0 <DDT_GEN_2_FTASK+0x40>)
 80035aa:	f7fd ff8b 	bl	80014c4 <xTaskCreate>
			NULL,
			PRIORITY_UNSCHEDULED,
			&(handle_DDT_RUN_2_FTASK)
		);

		vTaskSuspend(handle_DDT_RUN_2_FTASK);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe f97b 	bl	80018ac <vTaskSuspend>

		create_dd_task(handle_DDT_RUN_2_FTASK, PERIODIC, (uint32_t) 2);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2202      	movs	r2, #2
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fee3 	bl	8003388 <create_dd_task>

		vTaskDelay(TASK2_PERIOD);
 80035c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035c6:	f7fe f93d 	bl	8001844 <vTaskDelay>
	{
 80035ca:	e7e5      	b.n	8003598 <DDT_GEN_2_FTASK+0x8>
 80035cc:	08003960 	.word	0x08003960
 80035d0:	080035d5 	.word	0x080035d5

080035d4 <DDT_RUN_2_FTASK>:
	}
}

static void DDT_RUN_2_FTASK( void *pvParameters )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	while(1)
	{
		STM_EVAL_LEDToggle(red_led);
 80035dc:	2002      	movs	r0, #2
 80035de:	f7ff fd47 	bl	8003070 <STM_EVAL_LEDToggle>
		vTaskDelay(TASK2_EXEC);
 80035e2:	2096      	movs	r0, #150	; 0x96
 80035e4:	f7fe f92e 	bl	8001844 <vTaskDelay>
		vTaskDelete(NULL);
 80035e8:	2000      	movs	r0, #0
 80035ea:	f7fe f89d 	bl	8001728 <vTaskDelete>
		STM_EVAL_LEDToggle(red_led);
 80035ee:	e7f5      	b.n	80035dc <DDT_RUN_2_FTASK+0x8>

080035f0 <DDT_GEN_3_FTASK>:
}

/*-----------------------------------------------------------*/

static void DDT_GEN_3_FTASK( void *pvParameters )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		TaskHandle_t handle_DDT_RUN_3_FTASK;

		xTaskCreate
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	2301      	movs	r3, #1
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	2300      	movs	r3, #0
 8003604:	2282      	movs	r2, #130	; 0x82
 8003606:	4909      	ldr	r1, [pc, #36]	; (800362c <DDT_GEN_3_FTASK+0x3c>)
 8003608:	4809      	ldr	r0, [pc, #36]	; (8003630 <DDT_GEN_3_FTASK+0x40>)
 800360a:	f7fd ff5b 	bl	80014c4 <xTaskCreate>
			NULL,
			PRIORITY_UNSCHEDULED,
			&(handle_DDT_RUN_3_FTASK)
		);

		vTaskSuspend(handle_DDT_RUN_3_FTASK);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe f94b 	bl	80018ac <vTaskSuspend>

		create_dd_task(handle_DDT_RUN_3_FTASK, PERIODIC, (uint32_t) 3);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2203      	movs	r2, #3
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff feb3 	bl	8003388 <create_dd_task>

		vTaskDelay(TASK3_PERIOD);
 8003622:	f240 20ee 	movw	r0, #750	; 0x2ee
 8003626:	f7fe f90d 	bl	8001844 <vTaskDelay>
	{
 800362a:	e7e5      	b.n	80035f8 <DDT_GEN_3_FTASK+0x8>
 800362c:	08003968 	.word	0x08003968
 8003630:	08003635 	.word	0x08003635

08003634 <DDT_RUN_3_FTASK>:
	}
}

static void DDT_RUN_3_FTASK( void *pvParameters )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		STM_EVAL_LEDToggle(blue_led);
 800363c:	2003      	movs	r0, #3
 800363e:	f7ff fd17 	bl	8003070 <STM_EVAL_LEDToggle>
		vTaskDelay(TASK3_EXEC);
 8003642:	20fa      	movs	r0, #250	; 0xfa
 8003644:	f7fe f8fe 	bl	8001844 <vTaskDelay>
		vTaskDelete(NULL);
 8003648:	2000      	movs	r0, #0
 800364a:	f7fe f86d 	bl	8001728 <vTaskDelete>
		STM_EVAL_LEDToggle(blue_led);
 800364e:	e7f5      	b.n	800363c <DDT_RUN_3_FTASK+0x8>

08003650 <vApplicationMallocFailedHook>:
}

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8003654:	e7fe      	b.n	8003654 <vApplicationMallocFailedHook+0x4>

08003656 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8003660:	e7fe      	b.n	8003660 <vApplicationStackOverflowHook+0xa>

08003662 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8003668:	f7fd f998 	bl	800099c <xPortGetFreeHeapSize>
 800366c:	4603      	mov	r3, r0
 800366e:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8003670:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 800367a:	b580      	push	{r7, lr}
 800367c:	af00      	add	r7, sp, #0
	STM_EVAL_LEDInit(orange_led);
 800367e:	2001      	movs	r0, #1
 8003680:	f7ff fcc8 	bl	8003014 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(green_led);
 8003684:	2000      	movs	r0, #0
 8003686:	f7ff fcc5 	bl	8003014 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(red_led);
 800368a:	2002      	movs	r0, #2
 800368c:	f7ff fcc2 	bl	8003014 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(blue_led);
 8003690:	2003      	movs	r0, #3
 8003692:	f7ff fcbf 	bl	8003014 <STM_EVAL_LEDInit>

	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 8003696:	2000      	movs	r0, #0
 8003698:	f7ff fdca 	bl	8003230 <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 800369c:	bf00      	nop
 800369e:	bd80      	pop	{r7, pc}

080036a0 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036a2:	e003      	b.n	80036ac <LoopCopyDataInit>

080036a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80036a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036aa:	3104      	adds	r1, #4

080036ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036ac:	480a      	ldr	r0, [pc, #40]	; (80036d8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80036b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036b4:	d3f6      	bcc.n	80036a4 <CopyDataInit>
  ldr  r2, =_sbss
 80036b6:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80036b8:	e002      	b.n	80036c0 <LoopFillZerobss>

080036ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036bc:	f842 3b04 	str.w	r3, [r2], #4

080036c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036c0:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80036c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036c4:	d3f9      	bcc.n	80036ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036c6:	f000 f82b 	bl	8003720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ca:	f000 f8db 	bl	8003884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ce:	f7ff fdd3 	bl	8003278 <main>
  bx  lr    
 80036d2:	4770      	bx	lr
  ldr  r3, =_sidata
 80036d4:	080039a8 	.word	0x080039a8
  ldr  r0, =_sdata
 80036d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036dc:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 80036e0:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 80036e4:	20007a6c 	.word	0x20007a6c

080036e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036e8:	e7fe      	b.n	80036e8 <ADC_IRQHandler>

080036ea <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0
}
 80036ee:	bf00      	nop
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80036fc:	e7fe      	b.n	80036fc <HardFault_Handler+0x4>

080036fe <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80036fe:	b480      	push	{r7}
 8003700:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003702:	e7fe      	b.n	8003702 <MemManage_Handler+0x4>

08003704 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003708:	e7fe      	b.n	8003708 <BusFault_Handler+0x4>

0800370a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800370a:	b480      	push	{r7}
 800370c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800370e:	e7fe      	b.n	800370e <UsageFault_Handler+0x4>

08003710 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003724:	4a16      	ldr	r2, [pc, #88]	; (8003780 <SystemInit+0x60>)
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <SystemInit+0x60>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003734:	4a13      	ldr	r2, [pc, #76]	; (8003784 <SystemInit+0x64>)
 8003736:	4b13      	ldr	r3, [pc, #76]	; (8003784 <SystemInit+0x64>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003740:	4b10      	ldr	r3, [pc, #64]	; (8003784 <SystemInit+0x64>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003746:	4a0f      	ldr	r2, [pc, #60]	; (8003784 <SystemInit+0x64>)
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <SystemInit+0x64>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <SystemInit+0x64>)
 8003758:	4a0b      	ldr	r2, [pc, #44]	; (8003788 <SystemInit+0x68>)
 800375a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800375c:	4a09      	ldr	r2, [pc, #36]	; (8003784 <SystemInit+0x64>)
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <SystemInit+0x64>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003766:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <SystemInit+0x64>)
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800376e:	f000 f80d 	bl	800378c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003772:	4b03      	ldr	r3, [pc, #12]	; (8003780 <SystemInit+0x60>)
 8003774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003778:	609a      	str	r2, [r3, #8]
#endif
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	e000ed00 	.word	0xe000ed00
 8003784:	40023800 	.word	0x40023800
 8003788:	24003010 	.word	0x24003010

0800378c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	2300      	movs	r3, #0
 8003798:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800379a:	4a36      	ldr	r2, [pc, #216]	; (8003874 <SetSysClock+0xe8>)
 800379c:	4b35      	ldr	r3, [pc, #212]	; (8003874 <SetSysClock+0xe8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80037a6:	4b33      	ldr	r3, [pc, #204]	; (8003874 <SetSysClock+0xe8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3301      	adds	r3, #1
 80037b4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d103      	bne.n	80037c4 <SetSysClock+0x38>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80037c2:	d1f0      	bne.n	80037a6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80037c4:	4b2b      	ldr	r3, [pc, #172]	; (8003874 <SetSysClock+0xe8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80037d0:	2301      	movs	r3, #1
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	e001      	b.n	80037da <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80037d6:	2300      	movs	r3, #0
 80037d8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d142      	bne.n	8003866 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80037e0:	4a24      	ldr	r2, [pc, #144]	; (8003874 <SetSysClock+0xe8>)
 80037e2:	4b24      	ldr	r3, [pc, #144]	; (8003874 <SetSysClock+0xe8>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80037ec:	4a22      	ldr	r2, [pc, #136]	; (8003878 <SetSysClock+0xec>)
 80037ee:	4b22      	ldr	r3, [pc, #136]	; (8003878 <SetSysClock+0xec>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80037f8:	4a1e      	ldr	r2, [pc, #120]	; (8003874 <SetSysClock+0xe8>)
 80037fa:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <SetSysClock+0xe8>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003800:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <SetSysClock+0xe8>)
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <SetSysClock+0xe8>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800380c:	4a19      	ldr	r2, [pc, #100]	; (8003874 <SetSysClock+0xe8>)
 800380e:	4b19      	ldr	r3, [pc, #100]	; (8003874 <SetSysClock+0xe8>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003816:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003818:	4b16      	ldr	r3, [pc, #88]	; (8003874 <SetSysClock+0xe8>)
 800381a:	4a18      	ldr	r2, [pc, #96]	; (800387c <SetSysClock+0xf0>)
 800381c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800381e:	4a15      	ldr	r2, [pc, #84]	; (8003874 <SetSysClock+0xe8>)
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <SetSysClock+0xe8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003828:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800382a:	bf00      	nop
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <SetSysClock+0xe8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f9      	beq.n	800382c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <SetSysClock+0xf4>)
 800383a:	f240 6205 	movw	r2, #1541	; 0x605
 800383e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003840:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <SetSysClock+0xe8>)
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <SetSysClock+0xe8>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800384c:	4a09      	ldr	r2, [pc, #36]	; (8003874 <SetSysClock+0xe8>)
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <SetSysClock+0xe8>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f043 0302 	orr.w	r3, r3, #2
 8003856:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003858:	bf00      	nop
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <SetSysClock+0xe8>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
 8003862:	2b08      	cmp	r3, #8
 8003864:	d1f9      	bne.n	800385a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	40007000 	.word	0x40007000
 800387c:	07405408 	.word	0x07405408
 8003880:	40023c00 	.word	0x40023c00

08003884 <__libc_init_array>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	4e0d      	ldr	r6, [pc, #52]	; (80038bc <__libc_init_array+0x38>)
 8003888:	4c0d      	ldr	r4, [pc, #52]	; (80038c0 <__libc_init_array+0x3c>)
 800388a:	1ba4      	subs	r4, r4, r6
 800388c:	10a4      	asrs	r4, r4, #2
 800388e:	2500      	movs	r5, #0
 8003890:	42a5      	cmp	r5, r4
 8003892:	d109      	bne.n	80038a8 <__libc_init_array+0x24>
 8003894:	4e0b      	ldr	r6, [pc, #44]	; (80038c4 <__libc_init_array+0x40>)
 8003896:	4c0c      	ldr	r4, [pc, #48]	; (80038c8 <__libc_init_array+0x44>)
 8003898:	f000 f876 	bl	8003988 <_init>
 800389c:	1ba4      	subs	r4, r4, r6
 800389e:	10a4      	asrs	r4, r4, #2
 80038a0:	2500      	movs	r5, #0
 80038a2:	42a5      	cmp	r5, r4
 80038a4:	d105      	bne.n	80038b2 <__libc_init_array+0x2e>
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038ac:	4798      	blx	r3
 80038ae:	3501      	adds	r5, #1
 80038b0:	e7ee      	b.n	8003890 <__libc_init_array+0xc>
 80038b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038b6:	4798      	blx	r3
 80038b8:	3501      	adds	r5, #1
 80038ba:	e7f2      	b.n	80038a2 <__libc_init_array+0x1e>
 80038bc:	080039a0 	.word	0x080039a0
 80038c0:	080039a0 	.word	0x080039a0
 80038c4:	080039a0 	.word	0x080039a0
 80038c8:	080039a4 	.word	0x080039a4

080038cc <memcpy>:
 80038cc:	b510      	push	{r4, lr}
 80038ce:	1e43      	subs	r3, r0, #1
 80038d0:	440a      	add	r2, r1
 80038d2:	4291      	cmp	r1, r2
 80038d4:	d100      	bne.n	80038d8 <memcpy+0xc>
 80038d6:	bd10      	pop	{r4, pc}
 80038d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038e0:	e7f7      	b.n	80038d2 <memcpy+0x6>

080038e2 <memset>:
 80038e2:	4402      	add	r2, r0
 80038e4:	4603      	mov	r3, r0
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d100      	bne.n	80038ec <memset+0xa>
 80038ea:	4770      	bx	lr
 80038ec:	f803 1b01 	strb.w	r1, [r3], #1
 80038f0:	e7f9      	b.n	80038e6 <memset+0x4>
 80038f2:	0000      	movs	r0, r0
 80038f4:	454c4449 	.word	0x454c4449
 80038f8:	00000000 	.word	0x00000000
 80038fc:	20726d54 	.word	0x20726d54
 8003900:	00637653 	.word	0x00637653
 8003904:	51726d54 	.word	0x51726d54
 8003908:	00000000 	.word	0x00000000
 800390c:	69746341 	.word	0x69746341
 8003910:	61546576 	.word	0x61546576
 8003914:	00736b73 	.word	0x00736b73
 8003918:	706d6f43 	.word	0x706d6f43
 800391c:	6574656c 	.word	0x6574656c
 8003920:	73615464 	.word	0x73615464
 8003924:	0000736b 	.word	0x0000736b
 8003928:	7265764f 	.word	0x7265764f
 800392c:	54657564 	.word	0x54657564
 8003930:	736b7361 	.word	0x736b7361
 8003934:	00000000 	.word	0x00000000
 8003938:	00534444 	.word	0x00534444
 800393c:	0000544d 	.word	0x0000544d
 8003940:	47544444 	.word	0x47544444
 8003944:	00000031 	.word	0x00000031
 8003948:	47544444 	.word	0x47544444
 800394c:	00000032 	.word	0x00000032
 8003950:	47544444 	.word	0x47544444
 8003954:	00000033 	.word	0x00000033
 8003958:	314e5552 	.word	0x314e5552
 800395c:	00000000 	.word	0x00000000
 8003960:	324e5552 	.word	0x324e5552
 8003964:	00000000 	.word	0x00000000
 8003968:	334e5552 	.word	0x334e5552
 800396c:	00000000 	.word	0x00000000

08003970 <GPIO_PIN>:
 8003970:	20001000 80004000                       ... .@..

08003978 <GPIO_CLK>:
 8003978:	00000008 00000008 00000008 00000008     ................

08003988 <_init>:
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	bf00      	nop
 800398c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398e:	bc08      	pop	{r3}
 8003990:	469e      	mov	lr, r3
 8003992:	4770      	bx	lr

08003994 <_fini>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	bf00      	nop
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr
