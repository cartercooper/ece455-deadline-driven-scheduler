
ECE-455-Traffic-Light-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000458c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  0800471c  0800471c  0001471c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  20000000  08004724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  6 .bss          00001e50  20000080  20000080  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001ed0  20001ed0  00020080  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000eac3  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002531  00000000  00000000  0002eb71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d60  00000000  00000000  000310a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c28  00000000  00000000  00031e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005c55  00000000  00000000  00032a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000481c  00000000  00000000  00038685  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003cea1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000039b8  00000000  00000000  0003cf20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004704 	.word	0x08004704

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08004704 	.word	0x08004704

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	bf14      	ite	ne
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e720      	b.n	8000314 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aedc 	beq.w	80002c2 <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6c1      	b.n	80002c2 <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f103 0208 	add.w	r2, r3, #8
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f103 0208 	add.w	r2, r3, #8
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f103 0208 	add.w	r2, r3, #8
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b085      	sub	sp, #20
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	689a      	ldr	r2, [r3, #8]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	1c5a      	adds	r2, r3, #1
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a56:	b480      	push	{r7}
 8000a58:	b085      	sub	sp, #20
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d103      	bne.n	8000a76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	e00c      	b.n	8000a90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3308      	adds	r3, #8
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e002      	b.n	8000a84 <vListInsert+0x2e>
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d9f6      	bls.n	8000a7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	691b      	ldr	r3, [r3, #16]
 8000ad4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	6892      	ldr	r2, [r2, #8]
 8000ade:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	6852      	ldr	r2, [r2, #4]
 8000ae8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d103      	bne.n	8000afc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	1e5a      	subs	r2, r3, #1
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3b04      	subs	r3, #4
 8000b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	f023 0201 	bic.w	r2, r3, #1
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3b04      	subs	r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <pxPortInitialiseStack+0x64>)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3b14      	subs	r3, #20
 8000b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	3b04      	subs	r3, #4
 8000b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f06f 0202 	mvn.w	r2, #2
 8000b6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	3b20      	subs	r3, #32
 8000b70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	08000b85 	.word	0x08000b85

08000b84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <prvTaskExitError+0x38>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b92:	d009      	beq.n	8000ba8 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b98:	f383 8811 	msr	BASEPRI, r3
 8000b9c:	f3bf 8f6f 	isb	sy
 8000ba0:	f3bf 8f4f 	dsb	sy
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	e7fe      	b.n	8000ba6 <prvTaskExitError+0x22>
 8000ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bac:	f383 8811 	msr	BASEPRI, r3
 8000bb0:	f3bf 8f6f 	isb	sy
 8000bb4:	f3bf 8f4f 	dsb	sy
 8000bb8:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8000bba:	e7fe      	b.n	8000bba <prvTaskExitError+0x36>
 8000bbc:	20000000 	.word	0x20000000

08000bc0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <pxCurrentTCBConst2>)
 8000bc2:	6819      	ldr	r1, [r3, #0]
 8000bc4:	6808      	ldr	r0, [r1, #0]
 8000bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bca:	f380 8809 	msr	PSP, r0
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	f380 8811 	msr	BASEPRI, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f3af 8000 	nop.w

08000be0 <pxCurrentTCBConst2>:
 8000be0:	20001cac 	.word	0x20001cac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop

08000be8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <prvPortStartFirstTask+0x1c>)
 8000bea:	6800      	ldr	r0, [r0, #0]
 8000bec:	6800      	ldr	r0, [r0, #0]
 8000bee:	f380 8808 	msr	MSP, r0
 8000bf2:	b662      	cpsie	i
 8000bf4:	b661      	cpsie	f
 8000bf6:	f3bf 8f4f 	dsb	sy
 8000bfa:	f3bf 8f6f 	isb	sy
 8000bfe:	df00      	svc	0
 8000c00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000c02:	bf00      	nop
 8000c04:	e000ed08 	.word	0xe000ed08

08000c08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000c0e:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <xPortStartScheduler+0xf4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a3b      	ldr	r2, [pc, #236]	; (8000d00 <xPortStartScheduler+0xf8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d109      	bne.n	8000c2c <xPortStartScheduler+0x24>
 8000c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c1c:	f383 8811 	msr	BASEPRI, r3
 8000c20:	f3bf 8f6f 	isb	sy
 8000c24:	f3bf 8f4f 	dsb	sy
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	e7fe      	b.n	8000c2a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <xPortStartScheduler+0xf4>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a34      	ldr	r2, [pc, #208]	; (8000d04 <xPortStartScheduler+0xfc>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d109      	bne.n	8000c4a <xPortStartScheduler+0x42>
 8000c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c3a:	f383 8811 	msr	BASEPRI, r3
 8000c3e:	f3bf 8f6f 	isb	sy
 8000c42:	f3bf 8f4f 	dsb	sy
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	e7fe      	b.n	8000c48 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <xPortStartScheduler+0x100>)
 8000c4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	22ff      	movs	r2, #255	; 0xff
 8000c5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <xPortStartScheduler+0x104>)
 8000c70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <xPortStartScheduler+0x108>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000c78:	e009      	b.n	8000c8e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <xPortStartScheduler+0x108>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	4a23      	ldr	r2, [pc, #140]	; (8000d10 <xPortStartScheduler+0x108>)
 8000c82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c96:	2b80      	cmp	r3, #128	; 0x80
 8000c98:	d0ef      	beq.n	8000c7a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <xPortStartScheduler+0x108>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	021b      	lsls	r3, r3, #8
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <xPortStartScheduler+0x108>)
 8000ca2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <xPortStartScheduler+0x108>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cac:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <xPortStartScheduler+0x108>)
 8000cae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000cb8:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <xPortStartScheduler+0x10c>)
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <xPortStartScheduler+0x10c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000cc4:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <xPortStartScheduler+0x10c>)
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <xPortStartScheduler+0x10c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000cce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000cd0:	f000 f8d2 	bl	8000e78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <xPortStartScheduler+0x110>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000cda:	f000 f8e9 	bl	8000eb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <xPortStartScheduler+0x114>)
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <xPortStartScheduler+0x114>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000ce8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000cea:	f7ff ff7d 	bl	8000be8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8000cee:	f7ff ff49 	bl	8000b84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	e000ed00 	.word	0xe000ed00
 8000d00:	410fc271 	.word	0x410fc271
 8000d04:	410fc270 	.word	0x410fc270
 8000d08:	e000e400 	.word	0xe000e400
 8000d0c:	2000009c 	.word	0x2000009c
 8000d10:	200000a0 	.word	0x200000a0
 8000d14:	e000ed20 	.word	0xe000ed20
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	e000ef34 	.word	0xe000ef34

08000d20 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d2a:	f383 8811 	msr	BASEPRI, r3
 8000d2e:	f3bf 8f6f 	isb	sy
 8000d32:	f3bf 8f4f 	dsb	sy
 8000d36:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <vPortEnterCritical+0x54>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <vPortEnterCritical+0x54>)
 8000d40:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <vPortEnterCritical+0x54>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d10e      	bne.n	8000d68 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <vPortEnterCritical+0x58>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d009      	beq.n	8000d68 <vPortEnterCritical+0x48>
 8000d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d58:	f383 8811 	msr	BASEPRI, r3
 8000d5c:	f3bf 8f6f 	isb	sy
 8000d60:	f3bf 8f4f 	dsb	sy
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	e7fe      	b.n	8000d66 <vPortEnterCritical+0x46>
	}
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	20000000 	.word	0x20000000
 8000d78:	e000ed04 	.word	0xe000ed04

08000d7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <vPortExitCritical+0x4c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d109      	bne.n	8000d9e <vPortExitCritical+0x22>
 8000d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d8e:	f383 8811 	msr	BASEPRI, r3
 8000d92:	f3bf 8f6f 	isb	sy
 8000d96:	f3bf 8f4f 	dsb	sy
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	e7fe      	b.n	8000d9c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <vPortExitCritical+0x4c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <vPortExitCritical+0x4c>)
 8000da6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <vPortExitCritical+0x4c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d104      	bne.n	8000dba <vPortExitCritical+0x3e>
 8000db0:	2300      	movs	r3, #0
 8000db2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000dd0:	f3ef 8009 	mrs	r0, PSP
 8000dd4:	f3bf 8f6f 	isb	sy
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <pxCurrentTCBConst>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f01e 0f10 	tst.w	lr, #16
 8000de0:	bf08      	it	eq
 8000de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dea:	6010      	str	r0, [r2, #0]
 8000dec:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000df4:	f380 8811 	msr	BASEPRI, r0
 8000df8:	f3bf 8f4f 	dsb	sy
 8000dfc:	f3bf 8f6f 	isb	sy
 8000e00:	f001 f934 	bl	800206c <vTaskSwitchContext>
 8000e04:	f04f 0000 	mov.w	r0, #0
 8000e08:	f380 8811 	msr	BASEPRI, r0
 8000e0c:	bc08      	pop	{r3}
 8000e0e:	6819      	ldr	r1, [r3, #0]
 8000e10:	6808      	ldr	r0, [r1, #0]
 8000e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e16:	f01e 0f10 	tst.w	lr, #16
 8000e1a:	bf08      	it	eq
 8000e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000e20:	f380 8809 	msr	PSP, r0
 8000e24:	f3bf 8f6f 	isb	sy
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	f3af 8000 	nop.w

08000e30 <pxCurrentTCBConst>:
 8000e30:	20001cac 	.word	0x20001cac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop

08000e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8000e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e42:	f383 8811 	msr	BASEPRI, r3
 8000e46:	f3bf 8f6f 	isb	sy
 8000e4a:	f3bf 8f4f 	dsb	sy
 8000e4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000e50:	f001 f850 	bl	8001ef4 <xTaskIncrementTick>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <SysTick_Handler+0x3c>)
 8000e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	e000ed04 	.word	0xe000ed04

08000e78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000e7c:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <vPortSetupTimerInterrupt+0x28>)
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <vPortSetupTimerInterrupt+0x2c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4909      	ldr	r1, [pc, #36]	; (8000ea8 <vPortSetupTimerInterrupt+0x30>)
 8000e84:	fba1 1303 	umull	r1, r3, r1, r3
 8000e88:	099b      	lsrs	r3, r3, #6
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <vPortSetupTimerInterrupt+0x34>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e014 	.word	0xe000e014
 8000ea4:	20000018 	.word	0x20000018
 8000ea8:	10624dd3 	.word	0x10624dd3
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000eb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000ec0 <vPortEnableVFP+0x10>
 8000eb4:	6801      	ldr	r1, [r0, #0]
 8000eb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000eba:	6001      	str	r1, [r0, #0]
 8000ebc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000ebe:	bf00      	nop
 8000ec0:	e000ed88 	.word	0xe000ed88

08000ec4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8000eca:	f3ef 8305 	mrs	r3, IPSR
 8000ece:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b0f      	cmp	r3, #15
 8000ed4:	d913      	bls.n	8000efe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <vPortValidateInterruptPriority+0x6c>)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <vPortValidateInterruptPriority+0x70>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	7afa      	ldrb	r2, [r7, #11]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d209      	bcs.n	8000efe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8000eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eee:	f383 8811 	msr	BASEPRI, r3
 8000ef2:	f3bf 8f6f 	isb	sy
 8000ef6:	f3bf 8f4f 	dsb	sy
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	e7fe      	b.n	8000efc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <vPortValidateInterruptPriority+0x74>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <vPortValidateInterruptPriority+0x78>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d909      	bls.n	8000f22 <vPortValidateInterruptPriority+0x5e>
 8000f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f12:	f383 8811 	msr	BASEPRI, r3
 8000f16:	f3bf 8f6f 	isb	sy
 8000f1a:	f3bf 8f4f 	dsb	sy
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	e7fe      	b.n	8000f20 <vPortValidateInterruptPriority+0x5c>
	}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e3f0 	.word	0xe000e3f0
 8000f34:	2000009c 	.word	0x2000009c
 8000f38:	e000ed0c 	.word	0xe000ed0c
 8000f3c:	200000a0 	.word	0x200000a0

08000f40 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f023 0307 	bic.w	r3, r3, #7
 8000f5c:	3308      	adds	r3, #8
 8000f5e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000f60:	f000 ff0e 	bl	8001d80 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <pvPortMalloc+0x88>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d105      	bne.n	8000f78 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <pvPortMalloc+0x8c>)
 8000f6e:	f023 0307 	bic.w	r3, r3, #7
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <pvPortMalloc+0x88>)
 8000f76:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <pvPortMalloc+0x90>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d813      	bhi.n	8000fb0 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <pvPortMalloc+0x90>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	441a      	add	r2, r3
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <pvPortMalloc+0x90>)
 8000f92:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d90b      	bls.n	8000fb0 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <pvPortMalloc+0x88>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <pvPortMalloc+0x90>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <pvPortMalloc+0x90>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <pvPortMalloc+0x90>)
 8000fae:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000fb0:	f000 fef4 	bl	8001d9c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8000fba:	f002 ff3f 	bl	8003e3c <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20001ca8 	.word	0x20001ca8
 8000fcc:	200000ac 	.word	0x200000ac
 8000fd0:	20001ca4 	.word	0x20001ca4

08000fd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d009      	beq.n	8000ff6 <vPortFree+0x22>
 8000fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe6:	f383 8811 	msr	BASEPRI, r3
 8000fea:	f3bf 8f6f 	isb	sy
 8000fee:	f3bf 8f4f 	dsb	sy
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	e7fe      	b.n	8000ff4 <vPortFree+0x20>
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <xPortGetFreeHeapSize+0x18>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 8001010:	3318      	adds	r3, #24
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	20001ca4 	.word	0x20001ca4

08001020 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d109      	bne.n	8001048 <xQueueGenericReset+0x28>
 8001034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001038:	f383 8811 	msr	BASEPRI, r3
 800103c:	f3bf 8f6f 	isb	sy
 8001040:	f3bf 8f4f 	dsb	sy
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	e7fe      	b.n	8001046 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001048:	f7ff fe6a 	bl	8000d20 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001054:	68f9      	ldr	r1, [r7, #12]
 8001056:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001058:	fb01 f303 	mul.w	r3, r1, r3
 800105c:	441a      	add	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001078:	3b01      	subs	r3, #1
 800107a:	68f9      	ldr	r1, [r7, #12]
 800107c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800107e:	fb01 f303 	mul.w	r3, r1, r3
 8001082:	441a      	add	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	22ff      	movs	r2, #255	; 0xff
 800108c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	22ff      	movs	r2, #255	; 0xff
 8001094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d114      	bne.n	80010c8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d01a      	beq.n	80010dc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3310      	adds	r3, #16
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 f8ac 	bl	8002208 <xTaskRemoveFromEventList>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d012      	beq.n	80010dc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <xQueueGenericReset+0xcc>)
 80010b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	f3bf 8f4f 	dsb	sy
 80010c2:	f3bf 8f6f 	isb	sy
 80010c6:	e009      	b.n	80010dc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3310      	adds	r3, #16
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fc71 	bl	80009b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3324      	adds	r3, #36	; 0x24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fc6c 	bl	80009b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80010dc:	f7ff fe4e 	bl	8000d7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000ed04 	.word	0xe000ed04

080010f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d109      	bne.n	8001118 <xQueueGenericCreate+0x28>
 8001104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001108:	f383 8811 	msr	BASEPRI, r3
 800110c:	f3bf 8f6f 	isb	sy
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	e7fe      	b.n	8001116 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e004      	b.n	800112e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3348      	adds	r3, #72	; 0x48
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff04 	bl	8000f40 <pvPortMalloc>
 8001138:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	3348      	adds	r3, #72	; 0x48
 8001144:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001146:	79fa      	ldrb	r2, [r7, #7]
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	4613      	mov	r3, r2
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 f805 	bl	8001162 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8001158:	69bb      	ldr	r3, [r7, #24]
	}
 800115a:	4618      	mov	r0, r3
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e002      	b.n	8001184 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001190:	2101      	movs	r1, #1
 8001192:	69b8      	ldr	r0, [r7, #24]
 8001194:	f7ff ff44 	bl	8001020 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00e      	beq.n	80011cc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80011c0:	2300      	movs	r3, #0
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f81c 	bl	8001204 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80011de:	2301      	movs	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	461a      	mov	r2, r3
 80011ea:	6939      	ldr	r1, [r7, #16]
 80011ec:	6978      	ldr	r0, [r7, #20]
 80011ee:	f7ff ff7f 	bl	80010f0 <xQueueGenericCreate>
 80011f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f7ff ffd3 	bl	80011a0 <prvInitialiseMutex>

		return pxNewQueue;
 80011fa:	68fb      	ldr	r3, [r7, #12]
	}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121c:	2b00      	cmp	r3, #0
 800121e:	d109      	bne.n	8001234 <xQueueGenericSend+0x30>
 8001220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001224:	f383 8811 	msr	BASEPRI, r3
 8001228:	f3bf 8f6f 	isb	sy
 800122c:	f3bf 8f4f 	dsb	sy
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
 8001232:	e7fe      	b.n	8001232 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d103      	bne.n	8001242 <xQueueGenericSend+0x3e>
 800123a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <xQueueGenericSend+0x42>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <xQueueGenericSend+0x44>
 8001246:	2300      	movs	r3, #0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d109      	bne.n	8001260 <xQueueGenericSend+0x5c>
 800124c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001250:	f383 8811 	msr	BASEPRI, r3
 8001254:	f3bf 8f6f 	isb	sy
 8001258:	f3bf 8f4f 	dsb	sy
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
 800125e:	e7fe      	b.n	800125e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d103      	bne.n	800126e <xQueueGenericSend+0x6a>
 8001266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <xQueueGenericSend+0x6e>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <xQueueGenericSend+0x70>
 8001272:	2300      	movs	r3, #0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d109      	bne.n	800128c <xQueueGenericSend+0x88>
 8001278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800127c:	f383 8811 	msr	BASEPRI, r3
 8001280:	f3bf 8f6f 	isb	sy
 8001284:	f3bf 8f4f 	dsb	sy
 8001288:	623b      	str	r3, [r7, #32]
 800128a:	e7fe      	b.n	800128a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800128c:	f001 f978 	bl	8002580 <xTaskGetSchedulerState>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <xQueueGenericSend+0x98>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <xQueueGenericSend+0x9c>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <xQueueGenericSend+0x9e>
 80012a0:	2300      	movs	r3, #0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d109      	bne.n	80012ba <xQueueGenericSend+0xb6>
 80012a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012aa:	f383 8811 	msr	BASEPRI, r3
 80012ae:	f3bf 8f6f 	isb	sy
 80012b2:	f3bf 8f4f 	dsb	sy
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	e7fe      	b.n	80012b8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80012ba:	f7ff fd31 	bl	8000d20 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80012be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d302      	bcc.n	80012d0 <xQueueGenericSend+0xcc>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d129      	bne.n	8001324 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012d6:	f000 fa35 	bl	8001744 <prvCopyDataToQueue>
 80012da:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d010      	beq.n	8001306 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e6:	3324      	adds	r3, #36	; 0x24
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 ff8d 	bl	8002208 <xTaskRemoveFromEventList>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d013      	beq.n	800131c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80012f4:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <xQueueGenericSend+0x1f0>)
 80012f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	f3bf 8f4f 	dsb	sy
 8001300:	f3bf 8f6f 	isb	sy
 8001304:	e00a      	b.n	800131c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001308:	2b00      	cmp	r3, #0
 800130a:	d007      	beq.n	800131c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800130c:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <xQueueGenericSend+0x1f0>)
 800130e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	f3bf 8f4f 	dsb	sy
 8001318:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800131c:	f7ff fd2e 	bl	8000d7c <vPortExitCritical>
				return pdPASS;
 8001320:	2301      	movs	r3, #1
 8001322:	e063      	b.n	80013ec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800132a:	f7ff fd27 	bl	8000d7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800132e:	2300      	movs	r3, #0
 8001330:	e05c      	b.n	80013ec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001334:	2b00      	cmp	r3, #0
 8001336:	d106      	bne.n	8001346 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4618      	mov	r0, r3
 800133e:	f000 ffc5 	bl	80022cc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001342:	2301      	movs	r3, #1
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001346:	f7ff fd19 	bl	8000d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800134a:	f000 fd19 	bl	8001d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800134e:	f7ff fce7 	bl	8000d20 <vPortEnterCritical>
 8001352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001358:	b25b      	sxtb	r3, r3
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135e:	d103      	bne.n	8001368 <xQueueGenericSend+0x164>
 8001360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800136e:	b25b      	sxtb	r3, r3
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d103      	bne.n	800137e <xQueueGenericSend+0x17a>
 8001376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800137e:	f7ff fcfd 	bl	8000d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001382:	1d3a      	adds	r2, r7, #4
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f000 ffc2 	bl	8002314 <xTaskCheckForTimeOut>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d124      	bne.n	80013e0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001396:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001398:	f000 facc 	bl	8001934 <prvIsQueueFull>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d018      	beq.n	80013d4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80013a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a4:	3310      	adds	r3, #16
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fede 	bl	800216c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80013b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013b2:	f000 fa57 	bl	8001864 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80013b6:	f000 fcf1 	bl	8001d9c <xTaskResumeAll>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f47f af7c 	bne.w	80012ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <xQueueGenericSend+0x1f0>)
 80013c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	f3bf 8f4f 	dsb	sy
 80013ce:	f3bf 8f6f 	isb	sy
 80013d2:	e772      	b.n	80012ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80013d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013d6:	f000 fa45 	bl	8001864 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80013da:	f000 fcdf 	bl	8001d9c <xTaskResumeAll>
 80013de:	e76c      	b.n	80012ba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80013e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013e2:	f000 fa3f 	bl	8001864 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80013e6:	f000 fcd9 	bl	8001d9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80013ea:	2300      	movs	r3, #0
		}
	}
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3738      	adds	r7, #56	; 0x38
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	e000ed04 	.word	0xe000ed04

080013f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	; 0x38
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800140a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140c:	2b00      	cmp	r3, #0
 800140e:	d109      	bne.n	8001424 <xQueueGenericSendFromISR+0x2c>
 8001410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001414:	f383 8811 	msr	BASEPRI, r3
 8001418:	f3bf 8f6f 	isb	sy
 800141c:	f3bf 8f4f 	dsb	sy
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
 8001422:	e7fe      	b.n	8001422 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d103      	bne.n	8001432 <xQueueGenericSendFromISR+0x3a>
 800142a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <xQueueGenericSendFromISR+0x3e>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <xQueueGenericSendFromISR+0x40>
 8001436:	2300      	movs	r3, #0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <xQueueGenericSendFromISR+0x58>
 800143c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001440:	f383 8811 	msr	BASEPRI, r3
 8001444:	f3bf 8f6f 	isb	sy
 8001448:	f3bf 8f4f 	dsb	sy
 800144c:	623b      	str	r3, [r7, #32]
 800144e:	e7fe      	b.n	800144e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d103      	bne.n	800145e <xQueueGenericSendFromISR+0x66>
 8001456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <xQueueGenericSendFromISR+0x6a>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <xQueueGenericSendFromISR+0x6c>
 8001462:	2300      	movs	r3, #0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d109      	bne.n	800147c <xQueueGenericSendFromISR+0x84>
 8001468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800146c:	f383 8811 	msr	BASEPRI, r3
 8001470:	f3bf 8f6f 	isb	sy
 8001474:	f3bf 8f4f 	dsb	sy
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	e7fe      	b.n	800147a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800147c:	f7ff fd22 	bl	8000ec4 <vPortValidateInterruptPriority>
	__asm volatile
 8001480:	f3ef 8211 	mrs	r2, BASEPRI
 8001484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001488:	f383 8811 	msr	BASEPRI, r3
 800148c:	f3bf 8f6f 	isb	sy
 8001490:	f3bf 8f4f 	dsb	sy
 8001494:	61ba      	str	r2, [r7, #24]
 8001496:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8001498:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800149c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d302      	bcc.n	80014ae <xQueueGenericSendFromISR+0xb6>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d12c      	bne.n	8001508 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80014ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	68b9      	ldr	r1, [r7, #8]
 80014bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014be:	f000 f941 	bl	8001744 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80014c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80014c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ca:	d112      	bne.n	80014f2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d016      	beq.n	8001502 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d6:	3324      	adds	r3, #36	; 0x24
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fe95 	bl	8002208 <xTaskRemoveFromEventList>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00e      	beq.n	8001502 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00b      	beq.n	8001502 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	e007      	b.n	8001502 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80014f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001502:	2301      	movs	r3, #1
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001506:	e001      	b.n	800150c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001508:	2300      	movs	r3, #0
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001518:	4618      	mov	r0, r3
 800151a:	3738      	adds	r7, #56	; 0x38
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08e      	sub	sp, #56	; 0x38
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800152e:	2300      	movs	r3, #0
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <xQueueGenericReceive+0x30>
	__asm volatile
 800153c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001540:	f383 8811 	msr	BASEPRI, r3
 8001544:	f3bf 8f6f 	isb	sy
 8001548:	f3bf 8f4f 	dsb	sy
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
 800154e:	e7fe      	b.n	800154e <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d103      	bne.n	800155e <xQueueGenericReceive+0x3e>
 8001556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <xQueueGenericReceive+0x42>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <xQueueGenericReceive+0x44>
 8001562:	2300      	movs	r3, #0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d109      	bne.n	800157c <xQueueGenericReceive+0x5c>
 8001568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800156c:	f383 8811 	msr	BASEPRI, r3
 8001570:	f3bf 8f6f 	isb	sy
 8001574:	f3bf 8f4f 	dsb	sy
 8001578:	623b      	str	r3, [r7, #32]
 800157a:	e7fe      	b.n	800157a <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800157c:	f001 f800 	bl	8002580 <xTaskGetSchedulerState>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <xQueueGenericReceive+0x6c>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <xQueueGenericReceive+0x70>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <xQueueGenericReceive+0x72>
 8001590:	2300      	movs	r3, #0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <xQueueGenericReceive+0x8a>
 8001596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800159a:	f383 8811 	msr	BASEPRI, r3
 800159e:	f3bf 8f6f 	isb	sy
 80015a2:	f3bf 8f4f 	dsb	sy
 80015a6:	61fb      	str	r3, [r7, #28]
 80015a8:	e7fe      	b.n	80015a8 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80015aa:	f7ff fbb9 	bl	8000d20 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d046      	beq.n	8001648 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80015ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015c4:	f000 f928 	bl	8001818 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d121      	bne.n	8001612 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d4:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80015d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d104      	bne.n	80015e8 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80015de:	f001 f8e7 	bl	80027b0 <pvTaskIncrementMutexHeldCount>
 80015e2:	4602      	mov	r2, r0
 80015e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e6:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d027      	beq.n	8001640 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f2:	3310      	adds	r3, #16
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fe07 	bl	8002208 <xTaskRemoveFromEventList>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01f      	beq.n	8001640 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8001600:	4b4f      	ldr	r3, [pc, #316]	; (8001740 <xQueueGenericReceive+0x220>)
 8001602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	f3bf 8f4f 	dsb	sy
 800160c:	f3bf 8f6f 	isb	sy
 8001610:	e016      	b.n	8001640 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001616:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00f      	beq.n	8001640 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001622:	3324      	adds	r3, #36	; 0x24
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fdef 	bl	8002208 <xTaskRemoveFromEventList>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d007      	beq.n	8001640 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001630:	4b43      	ldr	r3, [pc, #268]	; (8001740 <xQueueGenericReceive+0x220>)
 8001632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	f3bf 8f4f 	dsb	sy
 800163c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001640:	f7ff fb9c 	bl	8000d7c <vPortExitCritical>
				return pdPASS;
 8001644:	2301      	movs	r3, #1
 8001646:	e077      	b.n	8001738 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d103      	bne.n	8001656 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800164e:	f7ff fb95 	bl	8000d7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001652:	2300      	movs	r3, #0
 8001654:	e070      	b.n	8001738 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	2b00      	cmp	r3, #0
 800165a:	d106      	bne.n	800166a <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4618      	mov	r0, r3
 8001662:	f000 fe33 	bl	80022cc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001666:	2301      	movs	r3, #1
 8001668:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800166a:	f7ff fb87 	bl	8000d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800166e:	f000 fb87 	bl	8001d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001672:	f7ff fb55 	bl	8000d20 <vPortEnterCritical>
 8001676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800167c:	b25b      	sxtb	r3, r3
 800167e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001682:	d103      	bne.n	800168c <xQueueGenericReceive+0x16c>
 8001684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001692:	b25b      	sxtb	r3, r3
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d103      	bne.n	80016a2 <xQueueGenericReceive+0x182>
 800169a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016a2:	f7ff fb6b 	bl	8000d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016a6:	1d3a      	adds	r2, r7, #4
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fe30 	bl	8002314 <xTaskCheckForTimeOut>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d131      	bne.n	800171e <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016bc:	f000 f924 	bl	8001908 <prvIsQueueEmpty>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d025      	beq.n	8001712 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80016c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d108      	bne.n	80016e0 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 80016ce:	f7ff fb27 	bl	8000d20 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80016d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 ff70 	bl	80025bc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80016dc:	f7ff fb4e 	bl	8000d7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80016e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e2:	3324      	adds	r3, #36	; 0x24
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fd3f 	bl	800216c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80016ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016f0:	f000 f8b8 	bl	8001864 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80016f4:	f000 fb52 	bl	8001d9c <xTaskResumeAll>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f47f af55 	bne.w	80015aa <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <xQueueGenericReceive+0x220>)
 8001702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	f3bf 8f4f 	dsb	sy
 800170c:	f3bf 8f6f 	isb	sy
 8001710:	e74b      	b.n	80015aa <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001714:	f000 f8a6 	bl	8001864 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001718:	f000 fb40 	bl	8001d9c <xTaskResumeAll>
 800171c:	e745      	b.n	80015aa <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800171e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001720:	f000 f8a0 	bl	8001864 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001724:	f000 fb3a 	bl	8001d9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800172a:	f000 f8ed 	bl	8001908 <prvIsQueueEmpty>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	f43f af3a 	beq.w	80015aa <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001736:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001738:	4618      	mov	r0, r3
 800173a:	3738      	adds	r7, #56	; 0x38
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	e000ed04 	.word	0xe000ed04

08001744 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001758:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10d      	bne.n	800177e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d14d      	bne.n	8001806 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4618      	mov	r0, r3
 8001770:	f000 ff9a 	bl	80026a8 <xTaskPriorityDisinherit>
 8001774:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	e043      	b.n	8001806 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d119      	bne.n	80017b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6898      	ldr	r0, [r3, #8]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	461a      	mov	r2, r3
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	f002 feb2 	bl	80044f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	441a      	add	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d32b      	bcc.n	8001806 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	e026      	b.n	8001806 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	68d8      	ldr	r0, [r3, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	461a      	mov	r2, r3
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	f002 fe98 	bl	80044f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	425b      	negs	r3, r3
 80017d2:	441a      	add	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d207      	bcs.n	80017f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	425b      	negs	r3, r3
 80017ee:	441a      	add	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d105      	bne.n	8001806 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	3b01      	subs	r3, #1
 8001804:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800180e:	697b      	ldr	r3, [r7, #20]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	2b00      	cmp	r3, #0
 8001828:	d018      	beq.n	800185c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	441a      	add	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	d303      	bcc.n	800184c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68d9      	ldr	r1, [r3, #12]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	461a      	mov	r2, r3
 8001856:	6838      	ldr	r0, [r7, #0]
 8001858:	f002 fe4e 	bl	80044f8 <memcpy>
	}
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800186c:	f7ff fa58 	bl	8000d20 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001876:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001878:	e011      	b.n	800189e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	2b00      	cmp	r3, #0
 8001880:	d012      	beq.n	80018a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3324      	adds	r3, #36	; 0x24
 8001886:	4618      	mov	r0, r3
 8001888:	f000 fcbe 	bl	8002208 <xTaskRemoveFromEventList>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001892:	f000 fd9d 	bl	80023d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	3b01      	subs	r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	dce9      	bgt.n	800187a <prvUnlockQueue+0x16>
 80018a6:	e000      	b.n	80018aa <prvUnlockQueue+0x46>
					break;
 80018a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	22ff      	movs	r2, #255	; 0xff
 80018ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80018b2:	f7ff fa63 	bl	8000d7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80018b6:	f7ff fa33 	bl	8000d20 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80018c2:	e011      	b.n	80018e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d012      	beq.n	80018f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3310      	adds	r3, #16
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fc99 	bl	8002208 <xTaskRemoveFromEventList>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80018dc:	f000 fd78 	bl	80023d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80018e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dce9      	bgt.n	80018c4 <prvUnlockQueue+0x60>
 80018f0:	e000      	b.n	80018f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80018f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	22ff      	movs	r2, #255	; 0xff
 80018f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80018fc:	f7ff fa3e 	bl	8000d7c <vPortExitCritical>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001910:	f7ff fa06 	bl	8000d20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800191c:	2301      	movs	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e001      	b.n	8001926 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001926:	f7ff fa29 	bl	8000d7c <vPortExitCritical>

	return xReturn;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800193c:	f7ff f9f0 	bl	8000d20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001948:	429a      	cmp	r2, r3
 800194a:	d102      	bne.n	8001952 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800194c:	2301      	movs	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e001      	b.n	8001956 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001956:	f7ff fa11 	bl	8000d7c <vPortExitCritical>

	return xReturn;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e014      	b.n	800199e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001974:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <vQueueAddToRegistry+0x4c>)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10b      	bne.n	8001998 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001980:	490b      	ldr	r1, [pc, #44]	; (80019b0 <vQueueAddToRegistry+0x4c>)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800198a:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <vQueueAddToRegistry+0x4c>)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001996:	e005      	b.n	80019a4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3301      	adds	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b07      	cmp	r3, #7
 80019a2:	d9e7      	bls.n	8001974 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	20001e00 	.word	0x20001e00

080019b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80019c4:	f7ff f9ac 	bl	8000d20 <vPortEnterCritical>
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019ce:	b25b      	sxtb	r3, r3
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d4:	d103      	bne.n	80019de <vQueueWaitForMessageRestricted+0x2a>
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ea:	d103      	bne.n	80019f4 <vQueueWaitForMessageRestricted+0x40>
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019f4:	f7ff f9c2 	bl	8000d7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d106      	bne.n	8001a0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3324      	adds	r3, #36	; 0x24
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fbd3 	bl	80021b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001a0e:	6978      	ldr	r0, [r7, #20]
 8001a10:	f7ff ff28 	bl	8001864 <prvUnlockQueue>
	}
 8001a14:	bf00      	nop
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08c      	sub	sp, #48	; 0x30
 8001a20:	af04      	add	r7, sp, #16
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fa85 	bl	8000f40 <pvPortMalloc>
 8001a36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00e      	beq.n	8001a5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001a3e:	2050      	movs	r0, #80	; 0x50
 8001a40:	f7ff fa7e 	bl	8000f40 <pvPortMalloc>
 8001a44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	631a      	str	r2, [r3, #48]	; 0x30
 8001a52:	e005      	b.n	8001a60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001a54:	6978      	ldr	r0, [r7, #20]
 8001a56:	f7ff fabd 	bl	8000fd4 <vPortFree>
 8001a5a:	e001      	b.n	8001a60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d013      	beq.n	8001a8e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001a66:	88fa      	ldrh	r2, [r7, #6]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9303      	str	r3, [sp, #12]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f80e 	bl	8001a9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001a82:	69f8      	ldr	r0, [r7, #28]
 8001a84:	f000 f892 	bl	8001bac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	e002      	b.n	8001a94 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001a94:	69bb      	ldr	r3, [r7, #24]
	}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b088      	sub	sp, #32
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	21a5      	movs	r1, #165	; 0xa5
 8001ab8:	f002 fd29 	bl	800450e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f023 0307 	bic.w	r3, r3, #7
 8001ad4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d009      	beq.n	8001af4 <prvInitialiseNewTask+0x56>
 8001ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae4:	f383 8811 	msr	BASEPRI, r3
 8001ae8:	f3bf 8f6f 	isb	sy
 8001aec:	f3bf 8f4f 	dsb	sy
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e7fe      	b.n	8001af2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	e012      	b.n	8001b20 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	4413      	add	r3, r2
 8001b00:	7819      	ldrb	r1, [r3, #0]
 8001b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	4413      	add	r3, r2
 8001b08:	3334      	adds	r3, #52	; 0x34
 8001b0a:	460a      	mov	r2, r1
 8001b0c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	2b09      	cmp	r3, #9
 8001b24:	d9e9      	bls.n	8001afa <prvInitialiseNewTask+0x5c>
 8001b26:	e000      	b.n	8001b2a <prvInitialiseNewTask+0x8c>
		{
			break;
 8001b28:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d901      	bls.n	8001b3c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b38:	2304      	movs	r3, #4
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b50:	3304      	adds	r3, #4
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe ff4e 	bl	80009f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5a:	3318      	adds	r3, #24
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe ff49 	bl	80009f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6a:	f1c3 0205 	rsb	r2, r3, #5
 8001b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	68f9      	ldr	r1, [r7, #12]
 8001b8a:	69b8      	ldr	r0, [r7, #24]
 8001b8c:	f7fe ffc6 	bl	8000b1c <pxPortInitialiseStack>
 8001b90:	4602      	mov	r2, r0
 8001b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b94:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ba0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ba2:	bf00      	nop
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001bb4:	f7ff f8b4 	bl	8000d20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <prvAddNewTaskToReadyList+0xb8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	4a29      	ldr	r2, [pc, #164]	; (8001c64 <prvAddNewTaskToReadyList+0xb8>)
 8001bc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <prvAddNewTaskToReadyList+0xbc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001bca:	4a27      	ldr	r2, [pc, #156]	; (8001c68 <prvAddNewTaskToReadyList+0xbc>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <prvAddNewTaskToReadyList+0xb8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d110      	bne.n	8001bfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001bd8:	f000 fc20 	bl	800241c <prvInitialiseTaskLists>
 8001bdc:	e00d      	b.n	8001bfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <prvAddNewTaskToReadyList+0xc0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <prvAddNewTaskToReadyList+0xbc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d802      	bhi.n	8001bfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001bf4:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <prvAddNewTaskToReadyList+0xbc>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <prvAddNewTaskToReadyList+0xc4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <prvAddNewTaskToReadyList+0xc4>)
 8001c02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	2201      	movs	r2, #1
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <prvAddNewTaskToReadyList+0xc8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <prvAddNewTaskToReadyList+0xc8>)
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <prvAddNewTaskToReadyList+0xcc>)
 8001c24:	441a      	add	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	f7fe feee 	bl	8000a0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001c32:	f7ff f8a3 	bl	8000d7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <prvAddNewTaskToReadyList+0xc0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00e      	beq.n	8001c5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <prvAddNewTaskToReadyList+0xbc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d207      	bcs.n	8001c5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <prvAddNewTaskToReadyList+0xd0>)
 8001c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f3bf 8f4f 	dsb	sy
 8001c58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20001d84 	.word	0x20001d84
 8001c68:	20001cac 	.word	0x20001cac
 8001c6c:	20001d90 	.word	0x20001d90
 8001c70:	20001da0 	.word	0x20001da0
 8001c74:	20001d8c 	.word	0x20001d8c
 8001c78:	20001cb0 	.word	0x20001cb0
 8001c7c:	e000ed04 	.word	0xe000ed04

08001c80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d016      	beq.n	8001cc0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <vTaskDelay+0x60>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <vTaskDelay+0x2e>
 8001c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9e:	f383 8811 	msr	BASEPRI, r3
 8001ca2:	f3bf 8f6f 	isb	sy
 8001ca6:	f3bf 8f4f 	dsb	sy
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	e7fe      	b.n	8001cac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001cae:	f000 f867 	bl	8001d80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 fd8f 	bl	80027d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001cba:	f000 f86f 	bl	8001d9c <xTaskResumeAll>
 8001cbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d107      	bne.n	8001cd6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <vTaskDelay+0x64>)
 8001cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	f3bf 8f4f 	dsb	sy
 8001cd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20001dac 	.word	0x20001dac
 8001ce4:	e000ed04 	.word	0xe000ed04

08001ce8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <vTaskStartScheduler+0x80>)
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	2282      	movs	r2, #130	; 0x82
 8001cfa:	491c      	ldr	r1, [pc, #112]	; (8001d6c <vTaskStartScheduler+0x84>)
 8001cfc:	481c      	ldr	r0, [pc, #112]	; (8001d70 <vTaskStartScheduler+0x88>)
 8001cfe:	f7ff fe8d 	bl	8001a1c <xTaskCreate>
 8001d02:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d102      	bne.n	8001d10 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001d0a:	f000 fdcb 	bl	80028a4 <xTimerCreateTimerTask>
 8001d0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d115      	bne.n	8001d42 <vTaskStartScheduler+0x5a>
 8001d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1a:	f383 8811 	msr	BASEPRI, r3
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	f3bf 8f4f 	dsb	sy
 8001d26:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <vTaskStartScheduler+0x8c>)
 8001d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <vTaskStartScheduler+0x90>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <vTaskStartScheduler+0x94>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001d3c:	f7fe ff64 	bl	8000c08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001d40:	e00d      	b.n	8001d5e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d109      	bne.n	8001d5e <vTaskStartScheduler+0x76>
 8001d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	e7fe      	b.n	8001d5c <vTaskStartScheduler+0x74>
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20001da8 	.word	0x20001da8
 8001d6c:	08004684 	.word	0x08004684
 8001d70:	080023e9 	.word	0x080023e9
 8001d74:	20001da4 	.word	0x20001da4
 8001d78:	20001d90 	.word	0x20001d90
 8001d7c:	20001d88 	.word	0x20001d88

08001d80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <vTaskSuspendAll+0x18>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <vTaskSuspendAll+0x18>)
 8001d8c:	6013      	str	r3, [r2, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	20001dac 	.word	0x20001dac

08001d9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001daa:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <xTaskResumeAll+0x114>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <xTaskResumeAll+0x2a>
 8001db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db6:	f383 8811 	msr	BASEPRI, r3
 8001dba:	f3bf 8f6f 	isb	sy
 8001dbe:	f3bf 8f4f 	dsb	sy
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	e7fe      	b.n	8001dc4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001dc6:	f7fe ffab 	bl	8000d20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <xTaskResumeAll+0x114>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	4a37      	ldr	r2, [pc, #220]	; (8001eb0 <xTaskResumeAll+0x114>)
 8001dd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dd4:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <xTaskResumeAll+0x114>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d161      	bne.n	8001ea0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001ddc:	4b35      	ldr	r3, [pc, #212]	; (8001eb4 <xTaskResumeAll+0x118>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d05d      	beq.n	8001ea0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001de4:	e02e      	b.n	8001e44 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001de6:	4b34      	ldr	r3, [pc, #208]	; (8001eb8 <xTaskResumeAll+0x11c>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3318      	adds	r3, #24
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fe68 	bl	8000ac8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fe63 	bl	8000ac8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	2201      	movs	r2, #1
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <xTaskResumeAll+0x120>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	4a2a      	ldr	r2, [pc, #168]	; (8001ebc <xTaskResumeAll+0x120>)
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <xTaskResumeAll+0x124>)
 8001e22:	441a      	add	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3304      	adds	r3, #4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	f7fe fdef 	bl	8000a0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e34:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <xTaskResumeAll+0x128>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d302      	bcc.n	8001e44 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <xTaskResumeAll+0x12c>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e44:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <xTaskResumeAll+0x11c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1cc      	bne.n	8001de6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001e52:	f000 fb6f 	bl	8002534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <xTaskResumeAll+0x130>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d010      	beq.n	8001e84 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001e62:	f000 f847 	bl	8001ef4 <xTaskIncrementTick>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001e6c:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <xTaskResumeAll+0x12c>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f1      	bne.n	8001e62 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <xTaskResumeAll+0x130>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <xTaskResumeAll+0x12c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <xTaskResumeAll+0x134>)
 8001e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001ea0:	f7fe ff6c 	bl	8000d7c <vPortExitCritical>

	return xAlreadyYielded;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20001dac 	.word	0x20001dac
 8001eb4:	20001d84 	.word	0x20001d84
 8001eb8:	20001d44 	.word	0x20001d44
 8001ebc:	20001d8c 	.word	0x20001d8c
 8001ec0:	20001cb0 	.word	0x20001cb0
 8001ec4:	20001cac 	.word	0x20001cac
 8001ec8:	20001d98 	.word	0x20001d98
 8001ecc:	20001d94 	.word	0x20001d94
 8001ed0:	e000ed04 	.word	0xe000ed04

08001ed4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <xTaskGetTickCount+0x1c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001ee0:	687b      	ldr	r3, [r7, #4]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20001d88 	.word	0x20001d88

08001ef4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001efe:	4b50      	ldr	r3, [pc, #320]	; (8002040 <xTaskIncrementTick+0x14c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 808c 	bne.w	8002020 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001f08:	4b4e      	ldr	r3, [pc, #312]	; (8002044 <xTaskIncrementTick+0x150>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001f10:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <xTaskIncrementTick+0x150>)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d11f      	bne.n	8001f5c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001f1c:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <xTaskIncrementTick+0x154>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <xTaskIncrementTick+0x46>
 8001f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2a:	f383 8811 	msr	BASEPRI, r3
 8001f2e:	f3bf 8f6f 	isb	sy
 8001f32:	f3bf 8f4f 	dsb	sy
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	e7fe      	b.n	8001f38 <xTaskIncrementTick+0x44>
 8001f3a:	4b43      	ldr	r3, [pc, #268]	; (8002048 <xTaskIncrementTick+0x154>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	4b42      	ldr	r3, [pc, #264]	; (800204c <xTaskIncrementTick+0x158>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a40      	ldr	r2, [pc, #256]	; (8002048 <xTaskIncrementTick+0x154>)
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4a40      	ldr	r2, [pc, #256]	; (800204c <xTaskIncrementTick+0x158>)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b40      	ldr	r3, [pc, #256]	; (8002050 <xTaskIncrementTick+0x15c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	4a3e      	ldr	r2, [pc, #248]	; (8002050 <xTaskIncrementTick+0x15c>)
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	f000 faec 	bl	8002534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001f5c:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <xTaskIncrementTick+0x160>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d34d      	bcc.n	8002002 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f66:	4b38      	ldr	r3, [pc, #224]	; (8002048 <xTaskIncrementTick+0x154>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <xTaskIncrementTick+0x80>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <xTaskIncrementTick+0x82>
 8001f74:	2300      	movs	r3, #0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d004      	beq.n	8001f84 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f7a:	4b36      	ldr	r3, [pc, #216]	; (8002054 <xTaskIncrementTick+0x160>)
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	601a      	str	r2, [r3, #0]
					break;
 8001f82:	e03e      	b.n	8002002 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f84:	4b30      	ldr	r3, [pc, #192]	; (8002048 <xTaskIncrementTick+0x154>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d203      	bcs.n	8001fa4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001f9c:	4a2d      	ldr	r2, [pc, #180]	; (8002054 <xTaskIncrementTick+0x160>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]
						break;
 8001fa2:	e02e      	b.n	8002002 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fd8d 	bl	8000ac8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d004      	beq.n	8001fc0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3318      	adds	r3, #24
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fd84 	bl	8000ac8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	4b23      	ldr	r3, [pc, #140]	; (8002058 <xTaskIncrementTick+0x164>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	4a22      	ldr	r2, [pc, #136]	; (8002058 <xTaskIncrementTick+0x164>)
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4a1f      	ldr	r2, [pc, #124]	; (800205c <xTaskIncrementTick+0x168>)
 8001fe0:	441a      	add	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4610      	mov	r0, r2
 8001fea:	f7fe fd10 	bl	8000a0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <xTaskIncrementTick+0x16c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d3b4      	bcc.n	8001f66 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002000:	e7b1      	b.n	8001f66 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <xTaskIncrementTick+0x16c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002008:	4914      	ldr	r1, [pc, #80]	; (800205c <xTaskIncrementTick+0x168>)
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d907      	bls.n	800202a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800201a:	2301      	movs	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e004      	b.n	800202a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002020:	4b10      	ldr	r3, [pc, #64]	; (8002064 <xTaskIncrementTick+0x170>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <xTaskIncrementTick+0x170>)
 8002028:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <xTaskIncrementTick+0x174>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002032:	2301      	movs	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002036:	697b      	ldr	r3, [r7, #20]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20001dac 	.word	0x20001dac
 8002044:	20001d88 	.word	0x20001d88
 8002048:	20001d3c 	.word	0x20001d3c
 800204c:	20001d40 	.word	0x20001d40
 8002050:	20001d9c 	.word	0x20001d9c
 8002054:	20001da4 	.word	0x20001da4
 8002058:	20001d8c 	.word	0x20001d8c
 800205c:	20001cb0 	.word	0x20001cb0
 8002060:	20001cac 	.word	0x20001cac
 8002064:	20001d94 	.word	0x20001d94
 8002068:	20001d98 	.word	0x20001d98

0800206c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002072:	4b39      	ldr	r3, [pc, #228]	; (8002158 <vTaskSwitchContext+0xec>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <vTaskSwitchContext+0xf0>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002080:	e065      	b.n	800214e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <vTaskSwitchContext+0xf0>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002088:	4b35      	ldr	r3, [pc, #212]	; (8002160 <vTaskSwitchContext+0xf4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	429a      	cmp	r2, r3
 800209e:	d111      	bne.n	80020c4 <vTaskSwitchContext+0x58>
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	3304      	adds	r3, #4
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d10b      	bne.n	80020c4 <vTaskSwitchContext+0x58>
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	3308      	adds	r3, #8
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d105      	bne.n	80020c4 <vTaskSwitchContext+0x58>
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	330c      	adds	r3, #12
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d008      	beq.n	80020d6 <vTaskSwitchContext+0x6a>
 80020c4:	4b26      	ldr	r3, [pc, #152]	; (8002160 <vTaskSwitchContext+0xf4>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b25      	ldr	r3, [pc, #148]	; (8002160 <vTaskSwitchContext+0xf4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3334      	adds	r3, #52	; 0x34
 80020ce:	4619      	mov	r1, r3
 80020d0:	4610      	mov	r0, r2
 80020d2:	f001 feb6 	bl	8003e42 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <vTaskSwitchContext+0xf8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80020e4:	7afb      	ldrb	r3, [r7, #11]
 80020e6:	f1c3 031f 	rsb	r3, r3, #31
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	491e      	ldr	r1, [pc, #120]	; (8002168 <vTaskSwitchContext+0xfc>)
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d109      	bne.n	8002114 <vTaskSwitchContext+0xa8>
	__asm volatile
 8002100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002104:	f383 8811 	msr	BASEPRI, r3
 8002108:	f3bf 8f6f 	isb	sy
 800210c:	f3bf 8f4f 	dsb	sy
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	e7fe      	b.n	8002112 <vTaskSwitchContext+0xa6>
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4a12      	ldr	r2, [pc, #72]	; (8002168 <vTaskSwitchContext+0xfc>)
 8002120:	4413      	add	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	3308      	adds	r3, #8
 8002136:	429a      	cmp	r2, r3
 8002138:	d104      	bne.n	8002144 <vTaskSwitchContext+0xd8>
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <vTaskSwitchContext+0xf4>)
 800214c:	6013      	str	r3, [r2, #0]
}
 800214e:	bf00      	nop
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20001dac 	.word	0x20001dac
 800215c:	20001d98 	.word	0x20001d98
 8002160:	20001cac 	.word	0x20001cac
 8002164:	20001d8c 	.word	0x20001d8c
 8002168:	20001cb0 	.word	0x20001cb0

0800216c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <vTaskPlaceOnEventList+0x24>
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e7fe      	b.n	800218e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <vTaskPlaceOnEventList+0x44>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3318      	adds	r3, #24
 8002196:	4619      	mov	r1, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7fe fc5c 	bl	8000a56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800219e:	2101      	movs	r1, #1
 80021a0:	6838      	ldr	r0, [r7, #0]
 80021a2:	f000 fb19 	bl	80027d8 <prvAddCurrentTaskToDelayedList>
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20001cac 	.word	0x20001cac

080021b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d109      	bne.n	80021da <vTaskPlaceOnEventListRestricted+0x26>
 80021c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ca:	f383 8811 	msr	BASEPRI, r3
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	e7fe      	b.n	80021d8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <vTaskPlaceOnEventListRestricted+0x50>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3318      	adds	r3, #24
 80021e0:	4619      	mov	r1, r3
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7fe fc13 	bl	8000a0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	68b8      	ldr	r0, [r7, #8]
 80021f8:	f000 faee 	bl	80027d8 <prvAddCurrentTaskToDelayedList>
	}
 80021fc:	bf00      	nop
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20001cac 	.word	0x20001cac

08002208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <xTaskRemoveFromEventList+0x2a>
 800221e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002222:	f383 8811 	msr	BASEPRI, r3
 8002226:	f3bf 8f6f 	isb	sy
 800222a:	f3bf 8f4f 	dsb	sy
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e7fe      	b.n	8002230 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	3318      	adds	r3, #24
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fc46 	bl	8000ac8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <xTaskRemoveFromEventList+0xac>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d11c      	bne.n	800227e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	3304      	adds	r3, #4
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fc3d 	bl	8000ac8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	2201      	movs	r2, #1
 8002254:	409a      	lsls	r2, r3
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <xTaskRemoveFromEventList+0xb0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	4a16      	ldr	r2, [pc, #88]	; (80022b8 <xTaskRemoveFromEventList+0xb0>)
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4a13      	ldr	r2, [pc, #76]	; (80022bc <xTaskRemoveFromEventList+0xb4>)
 800226e:	441a      	add	r2, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	3304      	adds	r3, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f7fe fbc9 	bl	8000a0e <vListInsertEnd>
 800227c:	e005      	b.n	800228a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	3318      	adds	r3, #24
 8002282:	4619      	mov	r1, r3
 8002284:	480e      	ldr	r0, [pc, #56]	; (80022c0 <xTaskRemoveFromEventList+0xb8>)
 8002286:	f7fe fbc2 	bl	8000a0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <xTaskRemoveFromEventList+0xbc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	429a      	cmp	r2, r3
 8002296:	d905      	bls.n	80022a4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002298:	2301      	movs	r3, #1
 800229a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <xTaskRemoveFromEventList+0xc0>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e001      	b.n	80022a8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80022a8:	697b      	ldr	r3, [r7, #20]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20001dac 	.word	0x20001dac
 80022b8:	20001d8c 	.word	0x20001d8c
 80022bc:	20001cb0 	.word	0x20001cb0
 80022c0:	20001d44 	.word	0x20001d44
 80022c4:	20001cac 	.word	0x20001cac
 80022c8:	20001d98 	.word	0x20001d98

080022cc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <vTaskSetTimeOutState+0x22>
 80022da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022de:	f383 8811 	msr	BASEPRI, r3
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	f3bf 8f4f 	dsb	sy
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	e7fe      	b.n	80022ec <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <vTaskSetTimeOutState+0x40>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <vTaskSetTimeOutState+0x44>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	605a      	str	r2, [r3, #4]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20001d9c 	.word	0x20001d9c
 8002310:	20001d88 	.word	0x20001d88

08002314 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <xTaskCheckForTimeOut+0x24>
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	e7fe      	b.n	8002336 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <xTaskCheckForTimeOut+0x3e>
 800233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002342:	f383 8811 	msr	BASEPRI, r3
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	e7fe      	b.n	8002350 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002352:	f7fe fce5 	bl	8000d20 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002356:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <xTaskCheckForTimeOut+0xb4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d102      	bne.n	800236c <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	e026      	b.n	80023ba <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b16      	ldr	r3, [pc, #88]	; (80023cc <xTaskCheckForTimeOut+0xb8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d007      	beq.n	8002388 <xTaskCheckForTimeOut+0x74>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	429a      	cmp	r2, r3
 8002380:	d802      	bhi.n	8002388 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002382:	2301      	movs	r3, #1
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e018      	b.n	80023ba <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	1ad2      	subs	r2, r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d20e      	bcs.n	80023b6 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1acb      	subs	r3, r1, r3
 80023a4:	441a      	add	r2, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ff8e 	bl	80022cc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	e001      	b.n	80023ba <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80023ba:	f7fe fcdf 	bl	8000d7c <vPortExitCritical>

	return xReturn;
 80023be:	697b      	ldr	r3, [r7, #20]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20001d88 	.word	0x20001d88
 80023cc:	20001d9c 	.word	0x20001d9c

080023d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <vTaskMissedYield+0x14>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	20001d98 	.word	0x20001d98

080023e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80023f0:	f000 f854 	bl	800249c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <prvIdleTask+0x2c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d907      	bls.n	800240c <prvIdleTask+0x24>
			{
				taskYIELD();
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <prvIdleTask+0x30>)
 80023fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800240c:	f001 fd1f 	bl	8003e4e <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002410:	e7ee      	b.n	80023f0 <prvIdleTask+0x8>
 8002412:	bf00      	nop
 8002414:	20001cb0 	.word	0x20001cb0
 8002418:	e000ed04 	.word	0xe000ed04

0800241c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	e00c      	b.n	8002442 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4a12      	ldr	r2, [pc, #72]	; (800247c <prvInitialiseTaskLists+0x60>)
 8002434:	4413      	add	r3, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fabc 	bl	80009b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3301      	adds	r3, #1
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b04      	cmp	r3, #4
 8002446:	d9ef      	bls.n	8002428 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002448:	480d      	ldr	r0, [pc, #52]	; (8002480 <prvInitialiseTaskLists+0x64>)
 800244a:	f7fe fab3 	bl	80009b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800244e:	480d      	ldr	r0, [pc, #52]	; (8002484 <prvInitialiseTaskLists+0x68>)
 8002450:	f7fe fab0 	bl	80009b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002454:	480c      	ldr	r0, [pc, #48]	; (8002488 <prvInitialiseTaskLists+0x6c>)
 8002456:	f7fe faad 	bl	80009b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800245a:	480c      	ldr	r0, [pc, #48]	; (800248c <prvInitialiseTaskLists+0x70>)
 800245c:	f7fe faaa 	bl	80009b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002460:	480b      	ldr	r0, [pc, #44]	; (8002490 <prvInitialiseTaskLists+0x74>)
 8002462:	f7fe faa7 	bl	80009b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <prvInitialiseTaskLists+0x78>)
 8002468:	4a05      	ldr	r2, [pc, #20]	; (8002480 <prvInitialiseTaskLists+0x64>)
 800246a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <prvInitialiseTaskLists+0x7c>)
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <prvInitialiseTaskLists+0x68>)
 8002470:	601a      	str	r2, [r3, #0]
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20001cb0 	.word	0x20001cb0
 8002480:	20001d14 	.word	0x20001d14
 8002484:	20001d28 	.word	0x20001d28
 8002488:	20001d44 	.word	0x20001d44
 800248c:	20001d58 	.word	0x20001d58
 8002490:	20001d70 	.word	0x20001d70
 8002494:	20001d3c 	.word	0x20001d3c
 8002498:	20001d40 	.word	0x20001d40

0800249c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024a2:	e028      	b.n	80024f6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80024a4:	f7ff fc6c 	bl	8001d80 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <prvCheckTasksWaitingTermination+0x6c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80024b8:	f7ff fc70 	bl	8001d9c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d119      	bne.n	80024f6 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80024c2:	f7fe fc2d 	bl	8000d20 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <prvCheckTasksWaitingTermination+0x6c>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	3304      	adds	r3, #4
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe faf8 	bl	8000ac8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <prvCheckTasksWaitingTermination+0x70>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3b01      	subs	r3, #1
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <prvCheckTasksWaitingTermination+0x70>)
 80024e0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <prvCheckTasksWaitingTermination+0x74>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	4a09      	ldr	r2, [pc, #36]	; (8002510 <prvCheckTasksWaitingTermination+0x74>)
 80024ea:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80024ec:	f7fe fc46 	bl	8000d7c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80024f0:	6838      	ldr	r0, [r7, #0]
 80024f2:	f000 f80f 	bl	8002514 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <prvCheckTasksWaitingTermination+0x74>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1d2      	bne.n	80024a4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20001d58 	.word	0x20001d58
 800250c:	20001d84 	.word	0x20001d84
 8002510:	20001d6c 	.word	0x20001d6c

08002514 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe fd57 	bl	8000fd4 <vPortFree>
			vPortFree( pxTCB );
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fd54 	bl	8000fd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <prvResetNextTaskUnblockTime+0x44>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <prvResetNextTaskUnblockTime+0x14>
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <prvResetNextTaskUnblockTime+0x16>
 8002548:	2300      	movs	r3, #0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d004      	beq.n	8002558 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <prvResetNextTaskUnblockTime+0x48>)
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002556:	e008      	b.n	800256a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <prvResetNextTaskUnblockTime+0x44>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <prvResetNextTaskUnblockTime+0x48>)
 8002568:	6013      	str	r3, [r2, #0]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20001d3c 	.word	0x20001d3c
 800257c:	20001da4 	.word	0x20001da4

08002580 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <xTaskGetSchedulerState+0x34>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800258e:	2301      	movs	r3, #1
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	e008      	b.n	80025a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <xTaskGetSchedulerState+0x38>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d102      	bne.n	80025a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800259c:	2302      	movs	r3, #2
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	e001      	b.n	80025a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80025a6:	687b      	ldr	r3, [r7, #4]
	}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	20001d90 	.word	0x20001d90
 80025b8:	20001dac 	.word	0x20001dac

080025bc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d062      	beq.n	8002694 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d2:	4b32      	ldr	r3, [pc, #200]	; (800269c <vTaskPriorityInherit+0xe0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	429a      	cmp	r2, r3
 80025da:	d25b      	bcs.n	8002694 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db06      	blt.n	80025f2 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <vTaskPriorityInherit+0xe0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f1c3 0205 	rsb	r2, r3, #5
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6959      	ldr	r1, [r3, #20]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4a27      	ldr	r2, [pc, #156]	; (80026a0 <vTaskPriorityInherit+0xe4>)
 8002604:	4413      	add	r3, r2
 8002606:	4299      	cmp	r1, r3
 8002608:	d101      	bne.n	800260e <vTaskPriorityInherit+0x52>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <vTaskPriorityInherit+0x54>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d03a      	beq.n	800268a <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3304      	adds	r3, #4
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fa55 	bl	8000ac8 <uxListRemove>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d115      	bne.n	8002650 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002628:	491d      	ldr	r1, [pc, #116]	; (80026a0 <vTaskPriorityInherit+0xe4>)
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10a      	bne.n	8002650 <vTaskPriorityInherit+0x94>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	2201      	movs	r2, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43da      	mvns	r2, r3
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <vTaskPriorityInherit+0xe8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4013      	ands	r3, r2
 800264c:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <vTaskPriorityInherit+0xe8>)
 800264e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <vTaskPriorityInherit+0xe0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	2201      	movs	r2, #1
 8002660:	409a      	lsls	r2, r3
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <vTaskPriorityInherit+0xe8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <vTaskPriorityInherit+0xe8>)
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <vTaskPriorityInherit+0xe4>)
 800267a:	441a      	add	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3304      	adds	r3, #4
 8002680:	4619      	mov	r1, r3
 8002682:	4610      	mov	r0, r2
 8002684:	f7fe f9c3 	bl	8000a0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002688:	e004      	b.n	8002694 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <vTaskPriorityInherit+0xe0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20001cac 	.word	0x20001cac
 80026a0:	20001cb0 	.word	0x20001cb0
 80026a4:	20001d8c 	.word	0x20001d8c

080026a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d06c      	beq.n	8002798 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80026be:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <xTaskPriorityDisinherit+0xfc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d009      	beq.n	80026dc <xTaskPriorityDisinherit+0x34>
 80026c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	e7fe      	b.n	80026da <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d109      	bne.n	80026f8 <xTaskPriorityDisinherit+0x50>
 80026e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e8:	f383 8811 	msr	BASEPRI, r3
 80026ec:	f3bf 8f6f 	isb	sy
 80026f0:	f3bf 8f4f 	dsb	sy
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	e7fe      	b.n	80026f6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	1e5a      	subs	r2, r3, #1
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	429a      	cmp	r2, r3
 800270c:	d044      	beq.n	8002798 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	2b00      	cmp	r3, #0
 8002714:	d140      	bne.n	8002798 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	3304      	adds	r3, #4
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe f9d4 	bl	8000ac8 <uxListRemove>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d115      	bne.n	8002752 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272a:	491f      	ldr	r1, [pc, #124]	; (80027a8 <xTaskPriorityDisinherit+0x100>)
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <xTaskPriorityDisinherit+0xaa>
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	2201      	movs	r2, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	4b18      	ldr	r3, [pc, #96]	; (80027ac <xTaskPriorityDisinherit+0x104>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4013      	ands	r3, r2
 800274e:	4a17      	ldr	r2, [pc, #92]	; (80027ac <xTaskPriorityDisinherit+0x104>)
 8002750:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	f1c3 0205 	rsb	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	2201      	movs	r2, #1
 800276c:	409a      	lsls	r2, r3
 800276e:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <xTaskPriorityDisinherit+0x104>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <xTaskPriorityDisinherit+0x104>)
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <xTaskPriorityDisinherit+0x100>)
 8002786:	441a      	add	r2, r3
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	3304      	adds	r3, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f7fe f93d 	bl	8000a0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002794:	2301      	movs	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002798:	697b      	ldr	r3, [r7, #20]
	}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20001cac 	.word	0x20001cac
 80027a8:	20001cb0 	.word	0x20001cb0
 80027ac:	20001d8c 	.word	0x20001d8c

080027b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027c2:	3201      	adds	r2, #1
 80027c4:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 80027c6:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80027c8:	681b      	ldr	r3, [r3, #0]
	}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	20001cac 	.word	0x20001cac

080027d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80027e2:	4b29      	ldr	r3, [pc, #164]	; (8002888 <prvAddCurrentTaskToDelayedList+0xb0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027e8:	4b28      	ldr	r3, [pc, #160]	; (800288c <prvAddCurrentTaskToDelayedList+0xb4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3304      	adds	r3, #4
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe f96a 	bl	8000ac8 <uxListRemove>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10b      	bne.n	8002812 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <prvAddCurrentTaskToDelayedList+0xb4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	2201      	movs	r2, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43da      	mvns	r2, r3
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <prvAddCurrentTaskToDelayedList+0xb8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4013      	ands	r3, r2
 800280e:	4a20      	ldr	r2, [pc, #128]	; (8002890 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002810:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d10a      	bne.n	8002830 <prvAddCurrentTaskToDelayedList+0x58>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002820:	4b1a      	ldr	r3, [pc, #104]	; (800288c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3304      	adds	r3, #4
 8002826:	4619      	mov	r1, r3
 8002828:	481a      	ldr	r0, [pc, #104]	; (8002894 <prvAddCurrentTaskToDelayedList+0xbc>)
 800282a:	f7fe f8f0 	bl	8000a0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800282e:	e026      	b.n	800287e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <prvAddCurrentTaskToDelayedList+0xb4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d209      	bcs.n	800285c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <prvAddCurrentTaskToDelayedList+0xc0>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <prvAddCurrentTaskToDelayedList+0xb4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	3304      	adds	r3, #4
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f7fe f8fe 	bl	8000a56 <vListInsert>
}
 800285a:	e010      	b.n	800287e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <prvAddCurrentTaskToDelayedList+0xc4>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	3304      	adds	r3, #4
 8002866:	4619      	mov	r1, r3
 8002868:	4610      	mov	r0, r2
 800286a:	f7fe f8f4 	bl	8000a56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	429a      	cmp	r2, r3
 8002876:	d202      	bcs.n	800287e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002878:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	6013      	str	r3, [r2, #0]
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20001d88 	.word	0x20001d88
 800288c:	20001cac 	.word	0x20001cac
 8002890:	20001d8c 	.word	0x20001d8c
 8002894:	20001d70 	.word	0x20001d70
 8002898:	20001d40 	.word	0x20001d40
 800289c:	20001d3c 	.word	0x20001d3c
 80028a0:	20001da4 	.word	0x20001da4

080028a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80028ae:	f000 fadd 	bl	8002e6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <xTimerCreateTimerTask+0x54>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <xTimerCreateTimerTask+0x58>)
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	2303      	movs	r3, #3
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2300      	movs	r3, #0
 80028c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028c8:	490d      	ldr	r1, [pc, #52]	; (8002900 <xTimerCreateTimerTask+0x5c>)
 80028ca:	480e      	ldr	r0, [pc, #56]	; (8002904 <xTimerCreateTimerTask+0x60>)
 80028cc:	f7ff f8a6 	bl	8001a1c <xTaskCreate>
 80028d0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d109      	bne.n	80028ec <xTimerCreateTimerTask+0x48>
 80028d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028dc:	f383 8811 	msr	BASEPRI, r3
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	e7fe      	b.n	80028ea <xTimerCreateTimerTask+0x46>
	return xReturn;
 80028ec:	687b      	ldr	r3, [r7, #4]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20001de0 	.word	0x20001de0
 80028fc:	20001de4 	.word	0x20001de4
 8002900:	0800468c 	.word	0x0800468c
 8002904:	08002abd 	.word	0x08002abd

08002908 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002916:	2028      	movs	r0, #40	; 0x28
 8002918:	f7fe fb12 	bl	8000f40 <pvPortMalloc>
 800291c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d009      	beq.n	8002938 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f805 	bl	8002942 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8002938:	697b      	ldr	r3, [r7, #20]
	}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <prvInitialiseNewTimer+0x28>
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e7fe      	b.n	8002968 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	2b00      	cmp	r3, #0
 800296e:	d015      	beq.n	800299c <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8002970:	f000 fa7c 	bl	8002e6c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	6a3a      	ldr	r2, [r7, #32]
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	3304      	adds	r3, #4
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe f82c 	bl	80009f4 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800299c:	bf00      	nop
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d109      	bne.n	80029d0 <xTimerGenericCommand+0x2c>
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	623b      	str	r3, [r7, #32]
 80029ce:	e7fe      	b.n	80029ce <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <xTimerGenericCommand+0x94>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d02a      	beq.n	8002a2e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	dc18      	bgt.n	8002a1c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80029ea:	f7ff fdc9 	bl	8002580 <xTaskGetSchedulerState>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d109      	bne.n	8002a08 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <xTimerGenericCommand+0x94>)
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	f107 0114 	add.w	r1, r7, #20
 80029fc:	2300      	movs	r3, #0
 80029fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a00:	f7fe fc00 	bl	8001204 <xQueueGenericSend>
 8002a04:	6278      	str	r0, [r7, #36]	; 0x24
 8002a06:	e012      	b.n	8002a2e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <xTimerGenericCommand+0x94>)
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	f107 0114 	add.w	r1, r7, #20
 8002a10:	2300      	movs	r3, #0
 8002a12:	2200      	movs	r2, #0
 8002a14:	f7fe fbf6 	bl	8001204 <xQueueGenericSend>
 8002a18:	6278      	str	r0, [r7, #36]	; 0x24
 8002a1a:	e008      	b.n	8002a2e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <xTimerGenericCommand+0x94>)
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	f107 0114 	add.w	r1, r7, #20
 8002a24:	2300      	movs	r3, #0
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	f7fe fce6 	bl	80013f8 <xQueueGenericSendFromISR>
 8002a2c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3728      	adds	r7, #40	; 0x28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20001de0 	.word	0x20001de0

08002a3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a46:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <prvProcessExpiredTimer+0x7c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe f837 	bl	8000ac8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d121      	bne.n	8002aa6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	18d1      	adds	r1, r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	6978      	ldr	r0, [r7, #20]
 8002a70:	f000 f8c8 	bl	8002c04 <prvInsertTimerInActiveList>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d015      	beq.n	8002aa6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	2100      	movs	r1, #0
 8002a84:	6978      	ldr	r0, [r7, #20]
 8002a86:	f7ff ff8d 	bl	80029a4 <xTimerGenericCommand>
 8002a8a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <prvProcessExpiredTimer+0x6a>
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e7fe      	b.n	8002aa4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	4798      	blx	r3
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20001dd8 	.word	0x20001dd8

08002abc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002ac4:	f107 0308 	add.w	r3, r7, #8
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f857 	bl	8002b7c <prvGetNextExpireTime>
 8002ace:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f803 	bl	8002ae0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002ada:	f000 f8d5 	bl	8002c88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002ade:	e7f1      	b.n	8002ac4 <prvTimerTask+0x8>

08002ae0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002aea:	f7ff f949 	bl	8001d80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002aee:	f107 0308 	add.w	r3, r7, #8
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f866 	bl	8002bc4 <prvSampleTimeNow>
 8002af8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d130      	bne.n	8002b62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <prvProcessTimerOrBlockTask+0x3c>
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d806      	bhi.n	8002b1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002b0e:	f7ff f945 	bl	8001d9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002b12:	68f9      	ldr	r1, [r7, #12]
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ff91 	bl	8002a3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002b1a:	e024      	b.n	8002b66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002b22:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <prvProcessTimerOrBlockTask+0x90>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <prvProcessTimerOrBlockTask+0x94>)
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	4619      	mov	r1, r3
 8002b42:	f7fe ff37 	bl	80019b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002b46:	f7ff f929 	bl	8001d9c <xTaskResumeAll>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <prvProcessTimerOrBlockTask+0x98>)
 8002b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	f3bf 8f6f 	isb	sy
}
 8002b60:	e001      	b.n	8002b66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002b62:	f7ff f91b 	bl	8001d9c <xTaskResumeAll>
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20001ddc 	.word	0x20001ddc
 8002b74:	20001de0 	.word	0x20001de0
 8002b78:	e000ed04 	.word	0xe000ed04

08002b7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <prvGetNextExpireTime+0x44>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf0c      	ite	eq
 8002b8e:	2301      	moveq	r3, #1
 8002b90:	2300      	movne	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d105      	bne.n	8002bae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ba2:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <prvGetNextExpireTime+0x44>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	e001      	b.n	8002bb2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	20001dd8 	.word	0x20001dd8

08002bc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002bcc:	f7ff f982 	bl	8001ed4 <xTaskGetTickCount>
 8002bd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <prvSampleTimeNow+0x3c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d205      	bcs.n	8002be8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002bdc:	f000 f8e6 	bl	8002dac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e002      	b.n	8002bee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002bee:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <prvSampleTimeNow+0x3c>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20001de8 	.word	0x20001de8

08002c04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d812      	bhi.n	8002c50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	1ad2      	subs	r2, r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d302      	bcc.n	8002c3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	e01b      	b.n	8002c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <prvInsertTimerInActiveList+0x7c>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3304      	adds	r3, #4
 8002c46:	4619      	mov	r1, r3
 8002c48:	4610      	mov	r0, r2
 8002c4a:	f7fd ff04 	bl	8000a56 <vListInsert>
 8002c4e:	e012      	b.n	8002c76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d206      	bcs.n	8002c66 <prvInsertTimerInActiveList+0x62>
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d302      	bcc.n	8002c66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002c60:	2301      	movs	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e007      	b.n	8002c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <prvInsertTimerInActiveList+0x80>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4610      	mov	r0, r2
 8002c72:	f7fd fef0 	bl	8000a56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002c76:	697b      	ldr	r3, [r7, #20]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20001ddc 	.word	0x20001ddc
 8002c84:	20001dd8 	.word	0x20001dd8

08002c88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08c      	sub	sp, #48	; 0x30
 8002c8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c8e:	e07a      	b.n	8002d86 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db77      	blt.n	8002d86 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd ff0e 	bl	8000ac8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff88 	bl	8002bc4 <prvSampleTimeNow>
 8002cb4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b09      	cmp	r3, #9
 8002cba:	d863      	bhi.n	8002d84 <prvProcessReceivedCommands+0xfc>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <prvProcessReceivedCommands+0x3c>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002ced 	.word	0x08002ced
 8002cc8:	08002ced 	.word	0x08002ced
 8002ccc:	08002ced 	.word	0x08002ced
 8002cd0:	08002d87 	.word	0x08002d87
 8002cd4:	08002d47 	.word	0x08002d47
 8002cd8:	08002d7d 	.word	0x08002d7d
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002ced 	.word	0x08002ced
 8002ce4:	08002d87 	.word	0x08002d87
 8002ce8:	08002d47 	.word	0x08002d47
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	18d1      	adds	r1, r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a3a      	ldr	r2, [r7, #32]
 8002cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cfa:	f7ff ff83 	bl	8002c04 <prvInsertTimerInActiveList>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d040      	beq.n	8002d86 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d0a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d138      	bne.n	8002d86 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	441a      	add	r2, r3
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2300      	movs	r3, #0
 8002d22:	2100      	movs	r1, #0
 8002d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d26:	f7ff fe3d 	bl	80029a4 <xTimerGenericCommand>
 8002d2a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d129      	bne.n	8002d86 <prvProcessReceivedCommands+0xfe>
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	e7fe      	b.n	8002d44 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <prvProcessReceivedCommands+0xe0>
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e7fe      	b.n	8002d66 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	18d1      	adds	r1, r2, r3
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	6a3a      	ldr	r2, [r7, #32]
 8002d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d76:	f7ff ff45 	bl	8002c04 <prvInsertTimerInActiveList>
					break;
 8002d7a:	e004      	b.n	8002d86 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002d7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d7e:	f7fe f929 	bl	8000fd4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002d82:	e000      	b.n	8002d86 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002d84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <prvProcessReceivedCommands+0x120>)
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	f107 0108 	add.w	r1, r7, #8
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2200      	movs	r2, #0
 8002d92:	f7fe fbc5 	bl	8001520 <xQueueGenericReceive>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f47f af79 	bne.w	8002c90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002d9e:	bf00      	nop
 8002da0:	3728      	adds	r7, #40	; 0x28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20001de0 	.word	0x20001de0

08002dac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002db2:	e044      	b.n	8002e3e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002db4:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <prvSwitchTimerLists+0xb8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002dbe:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <prvSwitchTimerLists+0xb8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fe7b 	bl	8000ac8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	6938      	ldr	r0, [r7, #16]
 8002dd8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d12d      	bne.n	8002e3e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	4413      	add	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d90e      	bls.n	8002e12 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e00:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <prvSwitchTimerLists+0xb8>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	3304      	adds	r3, #4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f7fd fe23 	bl	8000a56 <vListInsert>
 8002e10:	e015      	b.n	8002e3e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002e12:	2300      	movs	r3, #0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2300      	movs	r3, #0
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	6938      	ldr	r0, [r7, #16]
 8002e1e:	f7ff fdc1 	bl	80029a4 <xTimerGenericCommand>
 8002e22:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <prvSwitchTimerLists+0x92>
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	e7fe      	b.n	8002e3c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <prvSwitchTimerLists+0xb8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1b5      	bne.n	8002db4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <prvSwitchTimerLists+0xb8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <prvSwitchTimerLists+0xbc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <prvSwitchTimerLists+0xb8>)
 8002e54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002e56:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <prvSwitchTimerLists+0xbc>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6013      	str	r3, [r2, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20001dd8 	.word	0x20001dd8
 8002e68:	20001ddc 	.word	0x20001ddc

08002e6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002e70:	f7fd ff56 	bl	8000d20 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <prvCheckForValidListAndQueue+0x54>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11d      	bne.n	8002eb8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002e7c:	4811      	ldr	r0, [pc, #68]	; (8002ec4 <prvCheckForValidListAndQueue+0x58>)
 8002e7e:	f7fd fd99 	bl	80009b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002e82:	4811      	ldr	r0, [pc, #68]	; (8002ec8 <prvCheckForValidListAndQueue+0x5c>)
 8002e84:	f7fd fd96 	bl	80009b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002e88:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <prvCheckForValidListAndQueue+0x60>)
 8002e8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <prvCheckForValidListAndQueue+0x58>)
 8002e8c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <prvCheckForValidListAndQueue+0x64>)
 8002e90:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <prvCheckForValidListAndQueue+0x5c>)
 8002e92:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002e94:	2200      	movs	r2, #0
 8002e96:	210c      	movs	r1, #12
 8002e98:	2005      	movs	r0, #5
 8002e9a:	f7fe f929 	bl	80010f0 <xQueueGenericCreate>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <prvCheckForValidListAndQueue+0x54>)
 8002ea2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <prvCheckForValidListAndQueue+0x54>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <prvCheckForValidListAndQueue+0x54>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <prvCheckForValidListAndQueue+0x68>)
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fd56 	bl	8001964 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002eb8:	f7fd ff60 	bl	8000d7c <vPortExitCritical>
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20001de0 	.word	0x20001de0
 8002ec4:	20001db0 	.word	0x20001db0
 8002ec8:	20001dc4 	.word	0x20001dc4
 8002ecc:	20001dd8 	.word	0x20001dd8
 8002ed0:	20001ddc 	.word	0x20001ddc
 8002ed4:	08004694 	.word	0x08004694

08002ed8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002ef6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002efa:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	791b      	ldrb	r3, [r3, #4]
 8002f00:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8002f06:	4313      	orrs	r3, r2
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <ADC_Init+0xa8>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002f2a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8002f30:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	795b      	ldrb	r3, [r3, #5]
 8002f36:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f52:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	7d1b      	ldrb	r3, [r3, #20]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	7afb      	ldrb	r3, [r7, #11]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8002f62:	7afb      	ldrb	r3, [r7, #11]
 8002f64:	051b      	lsls	r3, r3, #20
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	c0fff7fd 	.word	0xc0fff7fd

08002f84 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f043 0201 	orr.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8002fa2:	e005      	b.n	8002fb0 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 0201 	bic.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	70fb      	strb	r3, [r7, #3]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	70bb      	strb	r3, [r7, #2]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	2b09      	cmp	r3, #9
 8002fe2:	d923      	bls.n	800302c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	f1a3 020a 	sub.w	r2, r3, #10
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	2207      	movs	r2, #7
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	43db      	mvns	r3, r3
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4013      	ands	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8003008:	7879      	ldrb	r1, [r7, #1]
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	f1a3 020a 	sub.w	r2, r3, #10
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	e01e      	b.n	800306a <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	2207      	movs	r2, #7
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	43db      	mvns	r3, r3
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4013      	ands	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800304c:	7879      	ldrb	r1, [r7, #1]
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800306a:	78bb      	ldrb	r3, [r7, #2]
 800306c:	2b06      	cmp	r3, #6
 800306e:	d821      	bhi.n	80030b4 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003074:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8003076:	78bb      	ldrb	r3, [r7, #2]
 8003078:	1e5a      	subs	r2, r3, #1
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	221f      	movs	r2, #31
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	43db      	mvns	r3, r3
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4013      	ands	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8003092:	78f9      	ldrb	r1, [r7, #3]
 8003094:	78bb      	ldrb	r3, [r7, #2]
 8003096:	1e5a      	subs	r2, r3, #1
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80030b2:	e047      	b.n	8003144 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80030b4:	78bb      	ldrb	r3, [r7, #2]
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	d821      	bhi.n	80030fe <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80030c0:	78bb      	ldrb	r3, [r7, #2]
 80030c2:	1fda      	subs	r2, r3, #7
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	221f      	movs	r2, #31
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4013      	ands	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80030dc:	78f9      	ldrb	r1, [r7, #3]
 80030de:	78bb      	ldrb	r3, [r7, #2]
 80030e0:	1fda      	subs	r2, r3, #7
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030fc:	e022      	b.n	8003144 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8003104:	78bb      	ldrb	r3, [r7, #2]
 8003106:	f1a3 020d 	sub.w	r2, r3, #13
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	221f      	movs	r2, #31
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	43db      	mvns	r3, r3
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4013      	ands	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8003122:	78f9      	ldrb	r1, [r7, #3]
 8003124:	78bb      	ldrb	r3, [r7, #2]
 8003126:	f1a3 020d 	sub.w	r2, r3, #13
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	609a      	str	r2, [r3, #8]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317c:	b29b      	uxth	r3, r3
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800318a:	b480      	push	{r7}
 800318c:	b085      	sub	sp, #20
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	e001      	b.n	80031b0 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <DAC_SetChannel1Data+0x34>)
 80031d2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	3308      	adds	r3, #8
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	461a      	mov	r2, r3
 80031e2:	887b      	ldrh	r3, [r7, #2]
 80031e4:	6013      	str	r3, [r2, #0]
}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40007400 	.word	0x40007400

080031f8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <DMA_Init+0xac>)
 8003210:	4013      	ands	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003222:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800322e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800323a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003246:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0307 	bic.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	4313      	orrs	r3, r2
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60da      	str	r2, [r3, #12]
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	f01c803f 	.word	0xf01c803f

080032a8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d006      	beq.n	80032c8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80032c6:	e005      	b.n	80032d4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 0201 	bic.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	601a      	str	r2, [r3, #0]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
 80032fc:	e001      	b.n	8003302 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8003302:	7bfb      	ldrb	r3, [r7, #15]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a15      	ldr	r2, [pc, #84]	; (800337c <DMA_GetFlagStatus+0x6c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d802      	bhi.n	8003330 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <DMA_GetFlagStatus+0x70>)
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	e001      	b.n	8003334 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8003330:	4b14      	ldr	r3, [pc, #80]	; (8003384 <DMA_GetFlagStatus+0x74>)
 8003332:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	e002      	b.n	800334c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003352:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003356:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
 8003366:	e001      	b.n	800336c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8003368:	2300      	movs	r3, #0
 800336a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800336c:	7dfb      	ldrb	r3, [r7, #23]
}
 800336e:	4618      	mov	r0, r3
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	4002640f 	.word	0x4002640f
 8003380:	40026000 	.word	0x40026000
 8003384:	40026400 	.word	0x40026400

08003388 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a10      	ldr	r2, [pc, #64]	; (80033d8 <DMA_ClearFlag+0x50>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d802      	bhi.n	80033a0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <DMA_ClearFlag+0x54>)
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e001      	b.n	80033a4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80033a0:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <DMA_ClearFlag+0x58>)
 80033a2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80033b4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80033bc:	e006      	b.n	80033cc <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80033c4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	6093      	str	r3, [r2, #8]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	4002640f 	.word	0x4002640f
 80033dc:	40026000 	.word	0x40026000
 80033e0:	40026400 	.word	0x40026400

080033e4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	e076      	b.n	80034ee <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003400:	2201      	movs	r2, #1
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	429a      	cmp	r2, r3
 800341a:	d165      	bne.n	80034e8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	2103      	movs	r1, #3
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	401a      	ands	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	791b      	ldrb	r3, [r3, #4]
 800343a:	4619      	mov	r1, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	791b      	ldrb	r3, [r3, #4]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d003      	beq.n	800345a <GPIO_Init+0x76>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	791b      	ldrb	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d12e      	bne.n	80034b8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2103      	movs	r1, #3
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	401a      	ands	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	795b      	ldrb	r3, [r3, #5]
 8003478:	4619      	mov	r1, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	b29b      	uxth	r3, r3
 8003490:	4619      	mov	r1, r3
 8003492:	2301      	movs	r3, #1
 8003494:	408b      	lsls	r3, r1
 8003496:	43db      	mvns	r3, r3
 8003498:	401a      	ands	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	7992      	ldrb	r2, [r2, #6]
 80034a6:	4611      	mov	r1, r2
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	b292      	uxth	r2, r2
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	b292      	uxth	r2, r2
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2103      	movs	r1, #3
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	401a      	ands	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	79db      	ldrb	r3, [r3, #7]
 80034d8:	4619      	mov	r1, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3301      	adds	r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d985      	bls.n	8003400 <GPIO_Init+0x1c>
    }
  }
}
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	831a      	strh	r2, [r3, #24]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	887a      	ldrh	r2, [r7, #2]
 800352e:	835a      	strh	r2, [r3, #26]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800354e:	490a      	ldr	r1, [pc, #40]	; (8003578 <RCC_AHB1PeriphClockCmd+0x3c>)
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <RCC_AHB1PeriphClockCmd+0x3c>)
 8003552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4313      	orrs	r3, r2
 8003558:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800355a:	e006      	b.n	800356a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800355c:	4906      	ldr	r1, [pc, #24]	; (8003578 <RCC_AHB1PeriphClockCmd+0x3c>)
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <RCC_AHB1PeriphClockCmd+0x3c>)
 8003560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	43db      	mvns	r3, r3
 8003566:	4013      	ands	r3, r2
 8003568:	630b      	str	r3, [r1, #48]	; 0x30
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800

0800357c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800358e:	490a      	ldr	r1, [pc, #40]	; (80035b8 <RCC_APB2PeriphClockCmd+0x3c>)
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <RCC_APB2PeriphClockCmd+0x3c>)
 8003592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4313      	orrs	r3, r2
 8003598:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800359a:	e006      	b.n	80035aa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800359c:	4906      	ldr	r1, [pc, #24]	; (80035b8 <RCC_APB2PeriphClockCmd+0x3c>)
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <RCC_APB2PeriphClockCmd+0x3c>)
 80035a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	4013      	ands	r3, r2
 80035a8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800

080035bc <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	887a      	ldrh	r2, [r7, #2]
 80035cc:	819a      	strh	r2, [r3, #12]
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80035da:	b480      	push	{r7}
 80035dc:	b085      	sub	sp, #20
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	460b      	mov	r3, r1
 80035e4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	891b      	ldrh	r3, [r3, #8]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	887b      	ldrh	r3, [r7, #2]
 80035f2:	4013      	ands	r3, r2
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e001      	b.n	8003604 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8003600:	2300      	movs	r3, #0
 8003602:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8003604:	7bfb      	ldrb	r3, [r7, #15]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8003618:	4b38      	ldr	r3, [pc, #224]	; (80036fc <Audio_MAL_IRQHandler+0xe8>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4b38      	ldr	r3, [pc, #224]	; (8003700 <Audio_MAL_IRQHandler+0xec>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4619      	mov	r1, r3
 8003622:	4610      	mov	r0, r2
 8003624:	f7ff fe74 	bl	8003310 <DMA_GetFlagStatus>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d064      	beq.n	80036f8 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800362e:	4b35      	ldr	r3, [pc, #212]	; (8003704 <Audio_MAL_IRQHandler+0xf0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d04c      	beq.n	80036d0 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8003636:	bf00      	nop
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <Audio_MAL_IRQHandler+0xe8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fe4f 	bl	80032e0 <DMA_GetCmdStatus>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f7      	bne.n	8003638 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8003648:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <Audio_MAL_IRQHandler+0xe8>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <Audio_MAL_IRQHandler+0xec>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f7ff fe98 	bl	8003388 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8003658:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <Audio_MAL_IRQHandler+0xf4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b2b      	ldr	r3, [pc, #172]	; (800370c <Audio_MAL_IRQHandler+0xf8>)
 8003660:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8003662:	4b28      	ldr	r3, [pc, #160]	; (8003704 <Audio_MAL_IRQHandler+0xf0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800366a:	4293      	cmp	r3, r2
 800366c:	bf28      	it	cs
 800366e:	4613      	movcs	r3, r2
 8003670:	4a26      	ldr	r2, [pc, #152]	; (800370c <Audio_MAL_IRQHandler+0xf8>)
 8003672:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8003674:	4b21      	ldr	r3, [pc, #132]	; (80036fc <Audio_MAL_IRQHandler+0xe8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4924      	ldr	r1, [pc, #144]	; (800370c <Audio_MAL_IRQHandler+0xf8>)
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fdbc 	bl	80031f8 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8003680:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <Audio_MAL_IRQHandler+0xe8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2101      	movs	r1, #1
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fe0e 	bl	80032a8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 800368c:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <Audio_MAL_IRQHandler+0xf4>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <Audio_MAL_IRQHandler+0xf0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d203      	bcs.n	80036a2 <Audio_MAL_IRQHandler+0x8e>
 800369a:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <Audio_MAL_IRQHandler+0xf0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	e000      	b.n	80036a4 <Audio_MAL_IRQHandler+0x90>
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <Audio_MAL_IRQHandler+0xfc>)
 80036a4:	4413      	add	r3, r2
 80036a6:	4a18      	ldr	r2, [pc, #96]	; (8003708 <Audio_MAL_IRQHandler+0xf4>)
 80036a8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <Audio_MAL_IRQHandler+0xf0>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <Audio_MAL_IRQHandler+0xf0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036b6:	428b      	cmp	r3, r1
 80036b8:	bf28      	it	cs
 80036ba:	460b      	movcs	r3, r1
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	4a11      	ldr	r2, [pc, #68]	; (8003704 <Audio_MAL_IRQHandler+0xf0>)
 80036c0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80036c2:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <Audio_MAL_IRQHandler+0xe8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2101      	movs	r1, #1
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fded 	bl	80032a8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80036ce:	e013      	b.n	80036f8 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80036d0:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <Audio_MAL_IRQHandler+0xe8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fde6 	bl	80032a8 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80036dc:	4b07      	ldr	r3, [pc, #28]	; (80036fc <Audio_MAL_IRQHandler+0xe8>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <Audio_MAL_IRQHandler+0xec>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f7ff fe4e 	bl	8003388 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <Audio_MAL_IRQHandler+0xf4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2100      	movs	r1, #0
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f83c 	bl	8003770 <EVAL_AUDIO_TransferComplete_CallBack>
}
 80036f8:	bf00      	nop
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	2000000c 	.word	0x2000000c
 8003700:	20000010 	.word	0x20000010
 8003704:	20000004 	.word	0x20000004
 8003708:	20001e40 	.word	0x20001e40
 800370c:	20001e80 	.word	0x20001e80
 8003710:	0001fffe 	.word	0x0001fffe

08003714 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003718:	f7ff ff7c 	bl	8003614 <Audio_MAL_IRQHandler>
}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}

08003720 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003724:	f7ff ff76 	bl	8003614 <Audio_MAL_IRQHandler>
}
 8003728:	bf00      	nop
 800372a:	bd80      	pop	{r7, pc}

0800372c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8003730:	2102      	movs	r1, #2
 8003732:	480d      	ldr	r0, [pc, #52]	; (8003768 <SPI3_IRQHandler+0x3c>)
 8003734:	f7ff ff51 	bl	80035da <SPI_I2S_GetFlagStatus>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d011      	beq.n	8003762 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <SPI3_IRQHandler+0x40>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d106      	bne.n	8003754 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8003746:	f000 f81e 	bl	8003786 <EVAL_AUDIO_GetSampleCallBack>
 800374a:	4603      	mov	r3, r0
 800374c:	4619      	mov	r1, r3
 800374e:	2004      	movs	r0, #4
 8003750:	f7ff fd36 	bl	80031c0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8003754:	f000 f817 	bl	8003786 <EVAL_AUDIO_GetSampleCallBack>
 8003758:	4603      	mov	r3, r0
 800375a:	4619      	mov	r1, r3
 800375c:	4802      	ldr	r0, [pc, #8]	; (8003768 <SPI3_IRQHandler+0x3c>)
 800375e:	f7ff ff2d 	bl	80035bc <SPI_I2S_SendData>
  }
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40003c00 	.word	0x40003c00
 800376c:	20000008 	.word	0x20000008

08003770 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800377a:	bf00      	nop
}
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <NVIC_SetPriorityGrouping+0x44>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b4:	4013      	ands	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 80037c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ca:	4a04      	ldr	r2, [pc, #16]	; (80037dc <NVIC_SetPriorityGrouping+0x44>)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	60d3      	str	r3, [r2, #12]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <main>:


/*-----------------------------------------------------------*/

int main(void)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af02      	add	r7, sp, #8
	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 80037e6:	f000 fb3e 	bl	8003e66 <prvSetupHardware>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80037ea:	2101      	movs	r1, #1
 80037ec:	2004      	movs	r0, #4
 80037ee:	f7ff fea5 	bl	800353c <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80037f2:	2101      	movs	r1, #1
 80037f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80037f8:	f7ff fec0 	bl	800357c <RCC_APB2PeriphClockCmd>

	adcInit();
 80037fc:	f000 f880 	bl	8003900 <adcInit>
	gpioInit();
 8003800:	f000 f8b4 	bl	800396c <gpioInit>

	displayTimer = xTimerCreate(
 8003804:	4b32      	ldr	r3, [pc, #200]	; (80038d0 <main+0xf0>)
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	2300      	movs	r3, #0
 800380a:	2201      	movs	r2, #1
 800380c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003810:	4830      	ldr	r0, [pc, #192]	; (80038d4 <main+0xf4>)
 8003812:	f7ff f879 	bl	8002908 <xTimerCreate>
 8003816:	4602      	mov	r2, r0
 8003818:	4b2f      	ldr	r3, [pc, #188]	; (80038d8 <main+0xf8>)
 800381a:	601a      	str	r2, [r3, #0]
			pdTRUE,
			(void*)0,
			SystemDisplay
	);

	xTimerStart(displayTimer, portMAX_DELAY);
 800381c:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <main+0xf8>)
 800381e:	681c      	ldr	r4, [r3, #0]
 8003820:	f7fe fb58 	bl	8001ed4 <xTaskGetTickCount>
 8003824:	4602      	mov	r2, r0
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	2101      	movs	r1, #1
 8003830:	4620      	mov	r0, r4
 8003832:	f7ff f8b7 	bl	80029a4 <xTimerGenericCommand>

	trafficOutputMutex = xSemaphoreCreateMutex();
 8003836:	2001      	movs	r0, #1
 8003838:	f7fd fccc 	bl	80011d4 <xQueueCreateMutex>
 800383c:	4602      	mov	r2, r0
 800383e:	4b27      	ldr	r3, [pc, #156]	; (80038dc <main+0xfc>)
 8003840:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(trafficOutputMutex);
 8003842:	4b26      	ldr	r3, [pc, #152]	; (80038dc <main+0xfc>)
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	2300      	movs	r3, #0
 8003848:	2200      	movs	r2, #0
 800384a:	2100      	movs	r1, #0
 800384c:	f7fd fcda 	bl	8001204 <xQueueGenericSend>

	potValueMutex = xSemaphoreCreateMutex();
 8003850:	2001      	movs	r0, #1
 8003852:	f7fd fcbf 	bl	80011d4 <xQueueCreateMutex>
 8003856:	4602      	mov	r2, r0
 8003858:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <main+0x100>)
 800385a:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(potValueMutex);
 800385c:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <main+0x100>)
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	2300      	movs	r3, #0
 8003862:	2200      	movs	r2, #0
 8003864:	2100      	movs	r1, #0
 8003866:	f7fd fccd 	bl	8001204 <xQueueGenericSend>

	trafficLightMutex = xSemaphoreCreateMutex();
 800386a:	2001      	movs	r0, #1
 800386c:	f7fd fcb2 	bl	80011d4 <xQueueCreateMutex>
 8003870:	4602      	mov	r2, r0
 8003872:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <main+0x104>)
 8003874:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(trafficLightMutex);
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <main+0x104>)
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	2300      	movs	r3, #0
 800387c:	2200      	movs	r2, #0
 800387e:	2100      	movs	r1, #0
 8003880:	f7fd fcc0 	bl	8001204 <xQueueGenericSend>

	xTaskCreate( TrafficFlowAdjustment, "Traffic Flow", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8003884:	2300      	movs	r3, #0
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	2302      	movs	r3, #2
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2300      	movs	r3, #0
 800388e:	2282      	movs	r2, #130	; 0x82
 8003890:	4915      	ldr	r1, [pc, #84]	; (80038e8 <main+0x108>)
 8003892:	4816      	ldr	r0, [pc, #88]	; (80038ec <main+0x10c>)
 8003894:	f7fe f8c2 	bl	8001a1c <xTaskCreate>
	xTaskCreate( TrafficGenerator, "Traffic Generator", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8003898:	2300      	movs	r3, #0
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	2302      	movs	r3, #2
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	2282      	movs	r2, #130	; 0x82
 80038a4:	4912      	ldr	r1, [pc, #72]	; (80038f0 <main+0x110>)
 80038a6:	4813      	ldr	r0, [pc, #76]	; (80038f4 <main+0x114>)
 80038a8:	f7fe f8b8 	bl	8001a1c <xTaskCreate>
	xTaskCreate( LightState, "Traffic Light", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 80038ac:	2300      	movs	r3, #0
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	2302      	movs	r3, #2
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	2300      	movs	r3, #0
 80038b6:	2282      	movs	r2, #130	; 0x82
 80038b8:	490f      	ldr	r1, [pc, #60]	; (80038f8 <main+0x118>)
 80038ba:	4810      	ldr	r0, [pc, #64]	; (80038fc <main+0x11c>)
 80038bc:	f7fe f8ae 	bl	8001a1c <xTaskCreate>
//	xTaskCreate( SystemDisplay, "System Display", configMINIMAL_STACK_SIZE, NULL, 2, NULL);

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 80038c0:	f7fe fa12 	bl	8001ce8 <vTaskStartScheduler>

	return 0;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3704      	adds	r7, #4
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd90      	pop	{r4, r7, pc}
 80038ce:	bf00      	nop
 80038d0:	08003ca5 	.word	0x08003ca5
 80038d4:	0800469c 	.word	0x0800469c
 80038d8:	20001ec4 	.word	0x20001ec4
 80038dc:	20001ec8 	.word	0x20001ec8
 80038e0:	20001ec0 	.word	0x20001ec0
 80038e4:	20001ebc 	.word	0x20001ebc
 80038e8:	080046ac 	.word	0x080046ac
 80038ec:	080039c9 	.word	0x080039c9
 80038f0:	080046bc 	.word	0x080046bc
 80038f4:	08003a11 	.word	0x08003a11
 80038f8:	080046d0 	.word	0x080046d0
 80038fc:	08003b45 	.word	0x08003b45

08003900 <adcInit>:


/*-----------------------------------------------------------*/

static void adcInit(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpioInit =
 8003906:	4a16      	ldr	r2, [pc, #88]	; (8003960 <adcInit+0x60>)
 8003908:	f107 0318 	add.w	r3, r7, #24
 800390c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003910:	e883 0003 	stmia.w	r3, {r0, r1}
			.GPIO_Speed = GPIO_Speed_100MHz,
			.GPIO_OType = GPIO_OType_PP,
			.GPIO_PuPd = GPIO_PuPd_NOPULL
	};

	GPIO_Init(GPIOC, &gpioInit);
 8003914:	f107 0318 	add.w	r3, r7, #24
 8003918:	4619      	mov	r1, r3
 800391a:	4812      	ldr	r0, [pc, #72]	; (8003964 <adcInit+0x64>)
 800391c:	f7ff fd62 	bl	80033e4 <GPIO_Init>

	ADC_InitTypeDef adcInit =
 8003920:	463b      	mov	r3, r7
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	605a      	str	r2, [r3, #4]
 8003928:	609a      	str	r2, [r3, #8]
 800392a:	60da      	str	r2, [r3, #12]
 800392c:	611a      	str	r2, [r3, #16]
 800392e:	615a      	str	r2, [r3, #20]
 8003930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	2301      	movs	r3, #1
 8003938:	717b      	strb	r3, [r7, #5]
			.ADC_Resolution = ADC_Resolution_10b,
			.ADC_ContinuousConvMode = ENABLE,
			.ADC_DataAlign = ADC_DataAlign_Right
	};

	ADC_Init(ADC1, &adcInit);
 800393a:	463b      	mov	r3, r7
 800393c:	4619      	mov	r1, r3
 800393e:	480a      	ldr	r0, [pc, #40]	; (8003968 <adcInit+0x68>)
 8003940:	f7ff faca 	bl	8002ed8 <ADC_Init>

	ADC_Cmd(ADC1, ENABLE);
 8003944:	2101      	movs	r1, #1
 8003946:	4808      	ldr	r0, [pc, #32]	; (8003968 <adcInit+0x68>)
 8003948:	f7ff fb1c 	bl	8002f84 <ADC_Cmd>

	ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 0x00000001, ADC_SampleTime_15Cycles);
 800394c:	2301      	movs	r3, #1
 800394e:	2201      	movs	r2, #1
 8003950:	210d      	movs	r1, #13
 8003952:	4805      	ldr	r0, [pc, #20]	; (8003968 <adcInit+0x68>)
 8003954:	f7ff fb32 	bl	8002fbc <ADC_RegularChannelConfig>

}
 8003958:	bf00      	nop
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	080046e0 	.word	0x080046e0
 8003964:	40020800 	.word	0x40020800
 8003968:	40012000 	.word	0x40012000

0800396c <gpioInit>:

static void gpioInit(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpioInit =
 8003972:	4a07      	ldr	r2, [pc, #28]	; (8003990 <gpioInit+0x24>)
 8003974:	463b      	mov	r3, r7
 8003976:	e892 0003 	ldmia.w	r2, {r0, r1}
 800397a:	e883 0003 	stmia.w	r3, {r0, r1}
			.GPIO_OType = GPIO_OType_PP,
			.GPIO_PuPd = GPIO_PuPd_NOPULL

	};

	GPIO_Init(GPIOC, &gpioInit);
 800397e:	463b      	mov	r3, r7
 8003980:	4619      	mov	r1, r3
 8003982:	4804      	ldr	r0, [pc, #16]	; (8003994 <gpioInit+0x28>)
 8003984:	f7ff fd2e 	bl	80033e4 <GPIO_Init>

}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	080046e8 	.word	0x080046e8
 8003994:	40020800 	.word	0x40020800

08003998 <getADC>:

static uint16_t getADC(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
	ADC_SoftwareStartConv(ADC1);
 800399c:	4809      	ldr	r0, [pc, #36]	; (80039c4 <getADC+0x2c>)
 800399e:	f7ff fbd7 	bl	8003150 <ADC_SoftwareStartConv>

	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC))
 80039a2:	e002      	b.n	80039aa <getADC+0x12>
	{
		vTaskDelay(100);
 80039a4:	2064      	movs	r0, #100	; 0x64
 80039a6:	f7fe f96b 	bl	8001c80 <vTaskDelay>
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC))
 80039aa:	2102      	movs	r1, #2
 80039ac:	4805      	ldr	r0, [pc, #20]	; (80039c4 <getADC+0x2c>)
 80039ae:	f7ff fbec 	bl	800318a <ADC_GetFlagStatus>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f5      	beq.n	80039a4 <getADC+0xc>
	}

	return ADC_GetConversionValue(ADC1);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <getADC+0x2c>)
 80039ba:	f7ff fbd9 	bl	8003170 <ADC_GetConversionValue>
 80039be:	4603      	mov	r3, r0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40012000 	.word	0x40012000

080039c8 <TrafficFlowAdjustment>:

static void TrafficFlowAdjustment( void *pvParameters )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	uint16_t rawADC;
	while(1)
	{
		rawADC = getADC();
 80039d0:	f7ff ffe2 	bl	8003998 <getADC>
 80039d4:	4603      	mov	r3, r0
 80039d6:	81fb      	strh	r3, [r7, #14]
//		printf("%d\n", rawADC);

		xSemaphoreTake(potValueMutex, portMAX_DELAY);
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <TrafficFlowAdjustment+0x40>)
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	2300      	movs	r3, #0
 80039de:	f04f 32ff 	mov.w	r2, #4294967295
 80039e2:	2100      	movs	r1, #0
 80039e4:	f7fd fd9c 	bl	8001520 <xQueueGenericReceive>
		potValue = rawADC;
 80039e8:	89fb      	ldrh	r3, [r7, #14]
 80039ea:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <TrafficFlowAdjustment+0x44>)
 80039ec:	6013      	str	r3, [r2, #0]
		xSemaphoreGive(potValueMutex);
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <TrafficFlowAdjustment+0x40>)
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	2200      	movs	r2, #0
 80039f6:	2100      	movs	r1, #0
 80039f8:	f7fd fc04 	bl	8001204 <xQueueGenericSend>

		vTaskDelay(500 / portTICK_RATE_MS);
 80039fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a00:	f7fe f93e 	bl	8001c80 <vTaskDelay>
		rawADC = getADC();
 8003a04:	e7e4      	b.n	80039d0 <TrafficFlowAdjustment+0x8>
 8003a06:	bf00      	nop
 8003a08:	20001ec0 	.word	0x20001ec0
 8003a0c:	20001df0 	.word	0x20001df0

08003a10 <TrafficGenerator>:
}

/*-----------------------------------------------------------*/

static void TrafficGenerator( void *pvParameters )
{
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	while(1)
	{
		uint8_t tempState;
		xSemaphoreTake(trafficLightMutex, portMAX_DELAY);
 8003a18:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <TrafficGenerator+0x110>)
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a22:	2100      	movs	r1, #0
 8003a24:	f7fd fd7c 	bl	8001520 <xQueueGenericReceive>
		tempState = trafficLight;
 8003a28:	4b3e      	ldr	r3, [pc, #248]	; (8003b24 <TrafficGenerator+0x114>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	75fb      	strb	r3, [r7, #23]
		xSemaphoreGive(trafficLightMutex);
 8003a2e:	4b3c      	ldr	r3, [pc, #240]	; (8003b20 <TrafficGenerator+0x110>)
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	2300      	movs	r3, #0
 8003a34:	2200      	movs	r2, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	f7fd fbe4 	bl	8001204 <xQueueGenericSend>

		uint16_t tempADC;
		xSemaphoreTake(potValueMutex, portMAX_DELAY);
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <TrafficGenerator+0x118>)
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	2300      	movs	r3, #0
 8003a42:	f04f 32ff 	mov.w	r2, #4294967295
 8003a46:	2100      	movs	r1, #0
 8003a48:	f7fd fd6a 	bl	8001520 <xQueueGenericReceive>
		tempADC = potValue;
 8003a4c:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <TrafficGenerator+0x11c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	82bb      	strh	r3, [r7, #20]
		xSemaphoreGive(potValueMutex);
 8003a52:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <TrafficGenerator+0x118>)
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	f7fd fbd2 	bl	8001204 <xQueueGenericSend>

		int flowRate = (int) ( 6500 - (5.5 * tempADC) );
 8003a60:	8abb      	ldrh	r3, [r7, #20]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fc fd06 	bl	8000474 <__aeabi_i2d>
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	4b30      	ldr	r3, [pc, #192]	; (8003b30 <TrafficGenerator+0x120>)
 8003a6e:	f7fc fd67 	bl	8000540 <__aeabi_dmul>
 8003a72:	4603      	mov	r3, r0
 8003a74:	460c      	mov	r4, r1
 8003a76:	461a      	mov	r2, r3
 8003a78:	4623      	mov	r3, r4
 8003a7a:	a127      	add	r1, pc, #156	; (adr r1, 8003b18 <TrafficGenerator+0x108>)
 8003a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a80:	f7fc fbaa 	bl	80001d8 <__aeabi_dsub>
 8003a84:	4603      	mov	r3, r0
 8003a86:	460c      	mov	r4, r1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	f7fc ff6a 	bl	8000964 <__aeabi_d2iz>
 8003a90:	4603      	mov	r3, r0
 8003a92:	613b      	str	r3, [r7, #16]
		float tempRand = (rand() % 6 ) * 50;
 8003a94:	f000 fd44 	bl	8004520 <rand>
 8003a98:	4601      	mov	r1, r0
 8003a9a:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <TrafficGenerator+0x124>)
 8003a9c:	fb83 3201 	smull	r3, r2, r3, r1
 8003aa0:	17cb      	asrs	r3, r1, #31
 8003aa2:	1ad2      	subs	r2, r2, r3
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	1aca      	subs	r2, r1, r3
 8003aae:	2332      	movs	r3, #50	; 0x32
 8003ab0:	fb03 f302 	mul.w	r3, r3, r2
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003abc:	edc7 7a03 	vstr	s15, [r7, #12]

		int generationDelay = (int)flowRate + tempRand;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aca:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ad6:	ee17 3a90 	vmov	r3, s15
 8003ada:	60bb      	str	r3, [r7, #8]

		printf("%d \n", generationDelay);
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	4816      	ldr	r0, [pc, #88]	; (8003b38 <TrafficGenerator+0x128>)
 8003ae0:	f000 fc9c 	bl	800441c <printf>

		vTaskDelay(generationDelay / portTICK_RATE_MS);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe f8ca 	bl	8001c80 <vTaskDelay>

		xSemaphoreTake(trafficOutputMutex, portMAX_DELAY);
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <TrafficGenerator+0x12c>)
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	2300      	movs	r3, #0
 8003af2:	f04f 32ff 	mov.w	r2, #4294967295
 8003af6:	2100      	movs	r1, #0
 8003af8:	f7fd fd12 	bl	8001520 <xQueueGenericReceive>
		trafficOutput |= 0x0001;
 8003afc:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <TrafficGenerator+0x130>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	4a0e      	ldr	r2, [pc, #56]	; (8003b40 <TrafficGenerator+0x130>)
 8003b06:	6013      	str	r3, [r2, #0]
		xSemaphoreGive(trafficOutputMutex);
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <TrafficGenerator+0x12c>)
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2100      	movs	r1, #0
 8003b12:	f7fd fb77 	bl	8001204 <xQueueGenericSend>
	{
 8003b16:	e77f      	b.n	8003a18 <TrafficGenerator+0x8>
 8003b18:	00000000 	.word	0x00000000
 8003b1c:	40b96400 	.word	0x40b96400
 8003b20:	20001ebc 	.word	0x20001ebc
 8003b24:	20000014 	.word	0x20000014
 8003b28:	20001ec0 	.word	0x20001ec0
 8003b2c:	20001df0 	.word	0x20001df0
 8003b30:	40160000 	.word	0x40160000
 8003b34:	2aaaaaab 	.word	0x2aaaaaab
 8003b38:	080046f0 	.word	0x080046f0
 8003b3c:	20001ec8 	.word	0x20001ec8
 8003b40:	20001dec 	.word	0x20001dec

08003b44 <LightState>:


/*-----------------------------------------------------------*/

static void LightState( void *pvParameters )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		uint8_t tempState;
		xSemaphoreTake(trafficLightMutex, portMAX_DELAY);
 8003b4c:	4b4f      	ldr	r3, [pc, #316]	; (8003c8c <LightState+0x148>)
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	2300      	movs	r3, #0
 8003b52:	f04f 32ff 	mov.w	r2, #4294967295
 8003b56:	2100      	movs	r1, #0
 8003b58:	f7fd fce2 	bl	8001520 <xQueueGenericReceive>
		tempState = trafficLight;
 8003b5c:	4b4c      	ldr	r3, [pc, #304]	; (8003c90 <LightState+0x14c>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	75fb      	strb	r3, [r7, #23]
		xSemaphoreGive(trafficLightMutex);
 8003b62:	4b4a      	ldr	r3, [pc, #296]	; (8003c8c <LightState+0x148>)
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	2300      	movs	r3, #0
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	f7fd fb4a 	bl	8001204 <xQueueGenericSend>

		uint16_t tempADC;
		xSemaphoreTake(potValueMutex, portMAX_DELAY);
 8003b70:	4b48      	ldr	r3, [pc, #288]	; (8003c94 <LightState+0x150>)
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	f7fd fcd0 	bl	8001520 <xQueueGenericReceive>
		tempADC = potValue;
 8003b80:	4b45      	ldr	r3, [pc, #276]	; (8003c98 <LightState+0x154>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	82bb      	strh	r3, [r7, #20]
		xSemaphoreGive(potValueMutex);
 8003b86:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <LightState+0x150>)
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2100      	movs	r1, #0
 8003b90:	f7fd fb38 	bl	8001204 <xQueueGenericSend>

		int flowRate = (int) ( 7500 - (5 * tempADC) );
 8003b94:	8aba      	ldrh	r2, [r7, #20]
 8003b96:	4613      	mov	r3, r2
 8003b98:	079b      	lsls	r3, r3, #30
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	613b      	str	r3, [r7, #16]
		int inverseFlowRate = (int) ( 2500 + (5 * tempADC) );
 8003ba8:	8aba      	ldrh	r2, [r7, #20]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8003bb4:	60fb      	str	r3, [r7, #12]

		printf("%d, %d \n", flowRate, inverseFlowRate);
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	6939      	ldr	r1, [r7, #16]
 8003bba:	4838      	ldr	r0, [pc, #224]	; (8003c9c <LightState+0x158>)
 8003bbc:	f000 fc2e 	bl	800441c <printf>

		switch (tempState)
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d023      	beq.n	8003c0e <LightState+0xca>
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d040      	beq.n	8003c4c <LightState+0x108>
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d000      	beq.n	8003bd0 <LightState+0x8c>
				xSemaphoreGive(trafficLightMutex);

				break;

			default:
				break;
 8003bce:	e05c      	b.n	8003c8a <LightState+0x146>
				GPIO_ResetBits(GPIOC, RED_PIN | YELLOW_PIN | GREEN_PIN);
 8003bd0:	2107      	movs	r1, #7
 8003bd2:	4833      	ldr	r0, [pc, #204]	; (8003ca0 <LightState+0x15c>)
 8003bd4:	f7ff fca3 	bl	800351e <GPIO_ResetBits>
				GPIO_SetBits(GPIOC, RED_PIN);
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4831      	ldr	r0, [pc, #196]	; (8003ca0 <LightState+0x15c>)
 8003bdc:	f7ff fc90 	bl	8003500 <GPIO_SetBits>
				vTaskDelay( flowRate / portTICK_RATE_MS);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe f84c 	bl	8001c80 <vTaskDelay>
				xSemaphoreTake(trafficLightMutex, portMAX_DELAY);
 8003be8:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <LightState+0x148>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	f7fd fc94 	bl	8001520 <xQueueGenericReceive>
				trafficLight = GREEN_STATE;
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <LightState+0x14c>)
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(trafficLightMutex);
 8003bfe:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <LightState+0x148>)
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	2200      	movs	r2, #0
 8003c06:	2100      	movs	r1, #0
 8003c08:	f7fd fafc 	bl	8001204 <xQueueGenericSend>
				break;
 8003c0c:	e03d      	b.n	8003c8a <LightState+0x146>
				GPIO_ResetBits(GPIOC, RED_PIN | YELLOW_PIN | GREEN_PIN);
 8003c0e:	2107      	movs	r1, #7
 8003c10:	4823      	ldr	r0, [pc, #140]	; (8003ca0 <LightState+0x15c>)
 8003c12:	f7ff fc84 	bl	800351e <GPIO_ResetBits>
				GPIO_SetBits(GPIOC, YELLOW_PIN);
 8003c16:	2102      	movs	r1, #2
 8003c18:	4821      	ldr	r0, [pc, #132]	; (8003ca0 <LightState+0x15c>)
 8003c1a:	f7ff fc71 	bl	8003500 <GPIO_SetBits>
				vTaskDelay(2000 / portTICK_RATE_MS);
 8003c1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003c22:	f7fe f82d 	bl	8001c80 <vTaskDelay>
				xSemaphoreTake(trafficLightMutex, portMAX_DELAY);
 8003c26:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <LightState+0x148>)
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	2100      	movs	r1, #0
 8003c32:	f7fd fc75 	bl	8001520 <xQueueGenericReceive>
				trafficLight = RED_STATE;
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <LightState+0x14c>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(trafficLightMutex);
 8003c3c:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <LightState+0x148>)
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	2300      	movs	r3, #0
 8003c42:	2200      	movs	r2, #0
 8003c44:	2100      	movs	r1, #0
 8003c46:	f7fd fadd 	bl	8001204 <xQueueGenericSend>
				break;
 8003c4a:	e01e      	b.n	8003c8a <LightState+0x146>
				GPIO_ResetBits(GPIOC, RED_PIN | YELLOW_PIN | GREEN_PIN);
 8003c4c:	2107      	movs	r1, #7
 8003c4e:	4814      	ldr	r0, [pc, #80]	; (8003ca0 <LightState+0x15c>)
 8003c50:	f7ff fc65 	bl	800351e <GPIO_ResetBits>
				GPIO_SetBits(GPIOC, GREEN_PIN);
 8003c54:	2104      	movs	r1, #4
 8003c56:	4812      	ldr	r0, [pc, #72]	; (8003ca0 <LightState+0x15c>)
 8003c58:	f7ff fc52 	bl	8003500 <GPIO_SetBits>
				vTaskDelay(inverseFlowRate / portTICK_RATE_MS);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe f80e 	bl	8001c80 <vTaskDelay>
				xSemaphoreTake(trafficLightMutex, portMAX_DELAY);
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <LightState+0x148>)
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6e:	2100      	movs	r1, #0
 8003c70:	f7fd fc56 	bl	8001520 <xQueueGenericReceive>
				trafficLight = YELLOW_STATE;
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <LightState+0x14c>)
 8003c76:	2202      	movs	r2, #2
 8003c78:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(trafficLightMutex);
 8003c7a:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <LightState+0x148>)
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2200      	movs	r2, #0
 8003c82:	2100      	movs	r1, #0
 8003c84:	f7fd fabe 	bl	8001204 <xQueueGenericSend>
				break;
 8003c88:	bf00      	nop
	{
 8003c8a:	e75f      	b.n	8003b4c <LightState+0x8>
 8003c8c:	20001ebc 	.word	0x20001ebc
 8003c90:	20000014 	.word	0x20000014
 8003c94:	20001ec0 	.word	0x20001ec0
 8003c98:	20001df0 	.word	0x20001df0
 8003c9c:	080046f8 	.word	0x080046f8
 8003ca0:	40020800 	.word	0x40020800

08003ca4 <SystemDisplay>:
}

/*-----------------------------------------------------------*/

static void SystemDisplay( TimerHandle_t xTimer )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GPIO_ResetBits(GPIOC, RESET_PIN);
 8003cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cb0:	485d      	ldr	r0, [pc, #372]	; (8003e28 <SystemDisplay+0x184>)
 8003cb2:	f7ff fc34 	bl	800351e <GPIO_ResetBits>
		vTaskDelay(1 / portTICK_RATE_MS);
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	f7fd ffe2 	bl	8001c80 <vTaskDelay>
		GPIO_SetBits(GPIOC, RESET_PIN);
 8003cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cc0:	4859      	ldr	r0, [pc, #356]	; (8003e28 <SystemDisplay+0x184>)
 8003cc2:	f7ff fc1d 	bl	8003500 <GPIO_SetBits>

		uint32_t tempTraffic;
		xSemaphoreTake(trafficOutputMutex, portMAX_DELAY);
 8003cc6:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <SystemDisplay+0x188>)
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	f7fd fc25 	bl	8001520 <xQueueGenericReceive>
		tempTraffic = trafficOutput;
 8003cd6:	4b56      	ldr	r3, [pc, #344]	; (8003e30 <SystemDisplay+0x18c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	613b      	str	r3, [r7, #16]
		xSemaphoreGive(trafficOutputMutex);
 8003cdc:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <SystemDisplay+0x188>)
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	f7fd fa8d 	bl	8001204 <xQueueGenericSend>

		for(int i = 0; i < 20; i++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	e01c      	b.n	8003d2a <SystemDisplay+0x86>
		{
			GPIO_SetBits(GPIOC, CLOCK_PIN);
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	484d      	ldr	r0, [pc, #308]	; (8003e28 <SystemDisplay+0x184>)
 8003cf4:	f7ff fc04 	bl	8003500 <GPIO_SetBits>

			if(tempTraffic & (0x00000001 << i))
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <SystemDisplay+0x70>
			{
				GPIO_SetBits(GPIOC, DATA_PIN);
 8003d0a:	2140      	movs	r1, #64	; 0x40
 8003d0c:	4846      	ldr	r0, [pc, #280]	; (8003e28 <SystemDisplay+0x184>)
 8003d0e:	f7ff fbf7 	bl	8003500 <GPIO_SetBits>
 8003d12:	e003      	b.n	8003d1c <SystemDisplay+0x78>
			}
			else
			{
				GPIO_ResetBits(GPIOC, DATA_PIN);
 8003d14:	2140      	movs	r1, #64	; 0x40
 8003d16:	4844      	ldr	r0, [pc, #272]	; (8003e28 <SystemDisplay+0x184>)
 8003d18:	f7ff fc01 	bl	800351e <GPIO_ResetBits>
			}

			GPIO_ResetBits(GPIOC, CLOCK_PIN);
 8003d1c:	2180      	movs	r1, #128	; 0x80
 8003d1e:	4842      	ldr	r0, [pc, #264]	; (8003e28 <SystemDisplay+0x184>)
 8003d20:	f7ff fbfd 	bl	800351e <GPIO_ResetBits>
		for(int i = 0; i < 20; i++)
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	3301      	adds	r3, #1
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	2b13      	cmp	r3, #19
 8003d2e:	dddf      	ble.n	8003cf0 <SystemDisplay+0x4c>
		}
		GPIO_ResetBits(GPIOC, DATA_PIN);
 8003d30:	2140      	movs	r1, #64	; 0x40
 8003d32:	483d      	ldr	r0, [pc, #244]	; (8003e28 <SystemDisplay+0x184>)
 8003d34:	f7ff fbf3 	bl	800351e <GPIO_ResetBits>

		uint8_t tempState;
		xSemaphoreTake(trafficLightMutex, portMAX_DELAY);
 8003d38:	4b3e      	ldr	r3, [pc, #248]	; (8003e34 <SystemDisplay+0x190>)
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d42:	2100      	movs	r1, #0
 8003d44:	f7fd fbec 	bl	8001520 <xQueueGenericReceive>
		tempState = trafficLight;
 8003d48:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <SystemDisplay+0x194>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(trafficLightMutex);
 8003d4e:	4b39      	ldr	r3, [pc, #228]	; (8003e34 <SystemDisplay+0x190>)
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	2300      	movs	r3, #0
 8003d54:	2200      	movs	r2, #0
 8003d56:	2100      	movs	r1, #0
 8003d58:	f7fd fa54 	bl	8001204 <xQueueGenericSend>

		if(tempState == GREEN_STATE)
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d114      	bne.n	8003d8c <SystemDisplay+0xe8>
		{
			xSemaphoreTake(trafficOutputMutex, portMAX_DELAY);
 8003d62:	4b32      	ldr	r3, [pc, #200]	; (8003e2c <SystemDisplay+0x188>)
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	2300      	movs	r3, #0
 8003d68:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	f7fd fbd7 	bl	8001520 <xQueueGenericReceive>
			trafficOutput = trafficOutput << 1;
 8003d72:	4b2f      	ldr	r3, [pc, #188]	; (8003e30 <SystemDisplay+0x18c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4a2d      	ldr	r2, [pc, #180]	; (8003e30 <SystemDisplay+0x18c>)
 8003d7a:	6013      	str	r3, [r2, #0]
			xSemaphoreGive(trafficOutputMutex);
 8003d7c:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <SystemDisplay+0x188>)
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	2300      	movs	r3, #0
 8003d82:	2200      	movs	r2, #0
 8003d84:	2100      	movs	r1, #0
 8003d86:	f7fd fa3d 	bl	8001204 <xQueueGenericSend>
 8003d8a:	e047      	b.n	8003e1c <SystemDisplay+0x178>
		}
		else
		{
			xSemaphoreTake(trafficOutputMutex, portMAX_DELAY);
 8003d8c:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <SystemDisplay+0x188>)
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	2300      	movs	r3, #0
 8003d92:	f04f 32ff 	mov.w	r2, #4294967295
 8003d96:	2100      	movs	r1, #0
 8003d98:	f7fd fbc2 	bl	8001520 <xQueueGenericReceive>

			uint32_t postLight = trafficOutput & 0xFFFFFF00;
 8003d9c:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <SystemDisplay+0x18c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003da4:	60bb      	str	r3, [r7, #8]
			uint8_t preLight = trafficOutput & 0xFF;
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <SystemDisplay+0x18c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	76fb      	strb	r3, [r7, #27]

			for(int i = 7; i >= 0; i--)
 8003dac:	2307      	movs	r3, #7
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e024      	b.n	8003dfc <SystemDisplay+0x158>
			{
				if( !(preLight & (0x01 << i) ))
 8003db2:	7efa      	ldrb	r2, [r7, #27]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	fa42 f303 	asr.w	r3, r2, r3
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d119      	bne.n	8003df6 <SystemDisplay+0x152>
				{
//					preLight = ((preLight & (((0x00FF << (i-1)) & 0xFF00))) << 1) & (0xFF00 >> (8-i));
					preLight = ((preLight & ((((0x00FF << (i-1)) & 0xFF00) >> 8 )) << 1) & (0xFF00 >> (8-i)) );
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	22ff      	movs	r2, #255	; 0xff
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	121b      	asrs	r3, r3, #8
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	7efb      	ldrb	r3, [r7, #27]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	f023 0301 	bic.w	r3, r3, #1
 8003dde:	b25a      	sxtb	r2, r3
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f1c3 0308 	rsb	r3, r3, #8
 8003de6:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8003dea:	fa41 f303 	asr.w	r3, r1, r3
 8003dee:	b25b      	sxtb	r3, r3
 8003df0:	4013      	ands	r3, r2
 8003df2:	b25b      	sxtb	r3, r3
 8003df4:	76fb      	strb	r3, [r7, #27]
			for(int i = 7; i >= 0; i--)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	dad7      	bge.n	8003db2 <SystemDisplay+0x10e>
				}
			}

			trafficOutput = (postLight << 1) | preLight;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	005a      	lsls	r2, r3, #1
 8003e06:	7efb      	ldrb	r3, [r7, #27]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	4a09      	ldr	r2, [pc, #36]	; (8003e30 <SystemDisplay+0x18c>)
 8003e0c:	6013      	str	r3, [r2, #0]

			xSemaphoreGive(trafficOutputMutex);
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <SystemDisplay+0x188>)
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	2200      	movs	r2, #0
 8003e16:	2100      	movs	r1, #0
 8003e18:	f7fd f9f4 	bl	8001204 <xQueueGenericSend>
		}

		vTaskDelay(1000);
 8003e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e20:	f7fd ff2e 	bl	8001c80 <vTaskDelay>
	{
 8003e24:	e742      	b.n	8003cac <SystemDisplay+0x8>
 8003e26:	bf00      	nop
 8003e28:	40020800 	.word	0x40020800
 8003e2c:	20001ec8 	.word	0x20001ec8
 8003e30:	20001dec 	.word	0x20001dec
 8003e34:	20001ebc 	.word	0x20001ebc
 8003e38:	20000014 	.word	0x20000014

08003e3c <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8003e40:	e7fe      	b.n	8003e40 <vApplicationMallocFailedHook+0x4>

08003e42 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8003e4c:	e7fe      	b.n	8003e4c <vApplicationStackOverflowHook+0xa>

08003e4e <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8003e54:	f7fd f8d6 	bl	8001004 <xPortGetFreeHeapSize>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8003e5c:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f7ff fc94 	bl	8003798 <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 8003e70:	bf00      	nop
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e76:	e003      	b.n	8003e80 <LoopCopyDataInit>

08003e78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003e7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e7e:	3104      	adds	r1, #4

08003e80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e80:	480a      	ldr	r0, [pc, #40]	; (8003eac <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003e84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e88:	d3f6      	bcc.n	8003e78 <CopyDataInit>
  ldr  r2, =_sbss
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003e8c:	e002      	b.n	8003e94 <LoopFillZerobss>

08003e8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e90:	f842 3b04 	str.w	r3, [r2], #4

08003e94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e94:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003e96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e98:	d3f9      	bcc.n	8003e8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e9a:	f000 f897 	bl	8003fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e9e:	f000 fb07 	bl	80044b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ea2:	f7ff fc9d 	bl	80037e0 <main>
  bx  lr    
 8003ea6:	4770      	bx	lr
  ldr  r3, =_sidata
 8003ea8:	08004724 	.word	0x08004724
  ldr  r0, =_sdata
 8003eac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003eb0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8003eb4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8003eb8:	20001ed0 	.word	0x20001ed0

08003ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ebc:	e7fe      	b.n	8003ebc <ADC_IRQHandler>

08003ebe <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	af00      	add	r7, sp, #0
}
 8003ec2:	bf00      	nop
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003ed0:	e7fe      	b.n	8003ed0 <HardFault_Handler+0x4>

08003ed2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003ed6:	e7fe      	b.n	8003ed6 <MemManage_Handler+0x4>

08003ed8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003edc:	e7fe      	b.n	8003edc <BusFault_Handler+0x4>

08003ede <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003ee2:	e7fe      	b.n	8003ee2 <UsageFault_Handler+0x4>

08003ee4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
	...

08003ef4 <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003efc:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <ITM_SendChar+0x58>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01a      	beq.n	8003f3e <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003f08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f0c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003f10:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d012      	beq.n	8003f3e <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8003f18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f1c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003f20:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 8003f28:	bf00      	nop
 8003f2a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0fa      	beq.n	8003f2a <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8003f34:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003f3e:	687b      	ldr	r3, [r7, #4]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	e000edf0 	.word	0xe000edf0

08003f50 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	e009      	b.n	8003f7a <_write+0x2a>
	 ITM_SendChar((*ptr++));
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	60ba      	str	r2, [r7, #8]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ffc0 	bl	8003ef4 <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	3301      	adds	r3, #1
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	dbf1      	blt.n	8003f66 <_write+0x16>
 return len;
 8003f82:	687b      	ldr	r3, [r7, #4]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <_sbrk>:


void * _sbrk(int32_t incr)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003f94:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <_sbrk+0x38>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <_sbrk+0x16>
		heap_end = & end;
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <_sbrk+0x38>)
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <_sbrk+0x3c>)
 8003fa0:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <_sbrk+0x38>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <_sbrk+0x38>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4413      	add	r3, r2
 8003fb0:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <_sbrk+0x38>)
 8003fb2:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20001df4 	.word	0x20001df4
 8003fc8:	20001ed0 	.word	0x20001ed0

08003fcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fd0:	4a16      	ldr	r2, [pc, #88]	; (800402c <SystemInit+0x60>)
 8003fd2:	4b16      	ldr	r3, [pc, #88]	; (800402c <SystemInit+0x60>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003fe0:	4a13      	ldr	r2, [pc, #76]	; (8004030 <SystemInit+0x64>)
 8003fe2:	4b13      	ldr	r3, [pc, #76]	; (8004030 <SystemInit+0x64>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fec:	4b10      	ldr	r3, [pc, #64]	; (8004030 <SystemInit+0x64>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003ff2:	4a0f      	ldr	r2, [pc, #60]	; (8004030 <SystemInit+0x64>)
 8003ff4:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <SystemInit+0x64>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004002:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <SystemInit+0x64>)
 8004004:	4a0b      	ldr	r2, [pc, #44]	; (8004034 <SystemInit+0x68>)
 8004006:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004008:	4a09      	ldr	r2, [pc, #36]	; (8004030 <SystemInit+0x64>)
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <SystemInit+0x64>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004012:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <SystemInit+0x64>)
 8004016:	2200      	movs	r2, #0
 8004018:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800401a:	f000 f80d 	bl	8004038 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800401e:	4b03      	ldr	r3, [pc, #12]	; (800402c <SystemInit+0x60>)
 8004020:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004024:	609a      	str	r2, [r3, #8]
#endif
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	e000ed00 	.word	0xe000ed00
 8004030:	40023800 	.word	0x40023800
 8004034:	24003010 	.word	0x24003010

08004038 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	2300      	movs	r3, #0
 8004044:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004046:	4a36      	ldr	r2, [pc, #216]	; (8004120 <SetSysClock+0xe8>)
 8004048:	4b35      	ldr	r3, [pc, #212]	; (8004120 <SetSysClock+0xe8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004052:	4b33      	ldr	r3, [pc, #204]	; (8004120 <SetSysClock+0xe8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3301      	adds	r3, #1
 8004060:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d103      	bne.n	8004070 <SetSysClock+0x38>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800406e:	d1f0      	bne.n	8004052 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004070:	4b2b      	ldr	r3, [pc, #172]	; (8004120 <SetSysClock+0xe8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800407c:	2301      	movs	r3, #1
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	e001      	b.n	8004086 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004082:	2300      	movs	r3, #0
 8004084:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d142      	bne.n	8004112 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800408c:	4a24      	ldr	r2, [pc, #144]	; (8004120 <SetSysClock+0xe8>)
 800408e:	4b24      	ldr	r3, [pc, #144]	; (8004120 <SetSysClock+0xe8>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004096:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8004098:	4a22      	ldr	r2, [pc, #136]	; (8004124 <SetSysClock+0xec>)
 800409a:	4b22      	ldr	r3, [pc, #136]	; (8004124 <SetSysClock+0xec>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040a2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80040a4:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <SetSysClock+0xe8>)
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <SetSysClock+0xe8>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80040ac:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <SetSysClock+0xe8>)
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <SetSysClock+0xe8>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80040b8:	4a19      	ldr	r2, [pc, #100]	; (8004120 <SetSysClock+0xe8>)
 80040ba:	4b19      	ldr	r3, [pc, #100]	; (8004120 <SetSysClock+0xe8>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80040c2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80040c4:	4b16      	ldr	r3, [pc, #88]	; (8004120 <SetSysClock+0xe8>)
 80040c6:	4a18      	ldr	r2, [pc, #96]	; (8004128 <SetSysClock+0xf0>)
 80040c8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80040ca:	4a15      	ldr	r2, [pc, #84]	; (8004120 <SetSysClock+0xe8>)
 80040cc:	4b14      	ldr	r3, [pc, #80]	; (8004120 <SetSysClock+0xe8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80040d6:	bf00      	nop
 80040d8:	4b11      	ldr	r3, [pc, #68]	; (8004120 <SetSysClock+0xe8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0f9      	beq.n	80040d8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <SetSysClock+0xf4>)
 80040e6:	f240 6205 	movw	r2, #1541	; 0x605
 80040ea:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80040ec:	4a0c      	ldr	r2, [pc, #48]	; (8004120 <SetSysClock+0xe8>)
 80040ee:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <SetSysClock+0xe8>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <SetSysClock+0xe8>)
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <SetSysClock+0xe8>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f043 0302 	orr.w	r3, r3, #2
 8004102:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8004104:	bf00      	nop
 8004106:	4b06      	ldr	r3, [pc, #24]	; (8004120 <SetSysClock+0xe8>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b08      	cmp	r3, #8
 8004110:	d1f9      	bne.n	8004106 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800
 8004124:	40007000 	.word	0x40007000
 8004128:	07405408 	.word	0x07405408
 800412c:	40023c00 	.word	0x40023c00

08004130 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
	int div = 1;
 800413c:	2301      	movs	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004140:	e004      	b.n	800414c <ts_itoa+0x1c>
		div *= base;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	fbb2 f2f3 	udiv	r2, r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	429a      	cmp	r2, r3
 8004158:	d2f3      	bcs.n	8004142 <ts_itoa+0x12>

	while (div != 0)
 800415a:	e029      	b.n	80041b0 <ts_itoa+0x80>
	{
		int num = d/div;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	613b      	str	r3, [r7, #16]
		d = d%div;
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	fbb3 f1f2 	udiv	r1, r3, r2
 800416e:	fb02 f201 	mul.w	r2, r2, r1
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	60bb      	str	r3, [r7, #8]
		div /= base;
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	fb92 f3f3 	sdiv	r3, r2, r3
 800417e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b09      	cmp	r3, #9
 8004184:	dd0a      	ble.n	800419c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	1c59      	adds	r1, r3, #1
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	6011      	str	r1, [r2, #0]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	3237      	adds	r2, #55	; 0x37
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	e009      	b.n	80041b0 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	1c59      	adds	r1, r3, #1
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	6011      	str	r1, [r2, #0]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	3230      	adds	r2, #48	; 0x30
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1d2      	bne.n	800415c <ts_itoa+0x2c>
	}
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b088      	sub	sp, #32
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80041d2:	e07d      	b.n	80042d0 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b25      	cmp	r3, #37	; 0x25
 80041da:	d171      	bne.n	80042c0 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	3301      	adds	r3, #1
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d01e      	beq.n	8004228 <ts_formatstring+0x66>
 80041ea:	2b64      	cmp	r3, #100	; 0x64
 80041ec:	dc06      	bgt.n	80041fc <ts_formatstring+0x3a>
 80041ee:	2b58      	cmp	r3, #88	; 0x58
 80041f0:	d050      	beq.n	8004294 <ts_formatstring+0xd2>
 80041f2:	2b63      	cmp	r3, #99	; 0x63
 80041f4:	d00e      	beq.n	8004214 <ts_formatstring+0x52>
 80041f6:	2b25      	cmp	r3, #37	; 0x25
 80041f8:	d058      	beq.n	80042ac <ts_formatstring+0xea>
 80041fa:	e05d      	b.n	80042b8 <ts_formatstring+0xf6>
 80041fc:	2b73      	cmp	r3, #115	; 0x73
 80041fe:	d02b      	beq.n	8004258 <ts_formatstring+0x96>
 8004200:	2b73      	cmp	r3, #115	; 0x73
 8004202:	dc02      	bgt.n	800420a <ts_formatstring+0x48>
 8004204:	2b69      	cmp	r3, #105	; 0x69
 8004206:	d00f      	beq.n	8004228 <ts_formatstring+0x66>
 8004208:	e056      	b.n	80042b8 <ts_formatstring+0xf6>
 800420a:	2b75      	cmp	r3, #117	; 0x75
 800420c:	d037      	beq.n	800427e <ts_formatstring+0xbc>
 800420e:	2b78      	cmp	r3, #120	; 0x78
 8004210:	d040      	beq.n	8004294 <ts_formatstring+0xd2>
 8004212:	e051      	b.n	80042b8 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	60fa      	str	r2, [r7, #12]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	1d11      	adds	r1, r2, #4
 800421e:	6079      	str	r1, [r7, #4]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]
				break;
 8004226:	e047      	b.n	80042b8 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	1d1a      	adds	r2, r3, #4
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	2b00      	cmp	r3, #0
 8004236:	da07      	bge.n	8004248 <ts_formatstring+0x86>
					{
						val *= -1;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	425b      	negs	r3, r3
 800423c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	60fa      	str	r2, [r7, #12]
 8004244:	222d      	movs	r2, #45	; 0x2d
 8004246:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004248:	69f9      	ldr	r1, [r7, #28]
 800424a:	f107 030c 	add.w	r3, r7, #12
 800424e:	220a      	movs	r2, #10
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff ff6d 	bl	8004130 <ts_itoa>
				}
				break;
 8004256:	e02f      	b.n	80042b8 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	1d1a      	adds	r2, r3, #4
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004262:	e007      	b.n	8004274 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	60fa      	str	r2, [r7, #12]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	1c51      	adds	r1, r2, #1
 800426e:	61b9      	str	r1, [r7, #24]
 8004270:	7812      	ldrb	r2, [r2, #0]
 8004272:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f3      	bne.n	8004264 <ts_formatstring+0xa2>
					}
				}
				break;
 800427c:	e01c      	b.n	80042b8 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	1d1a      	adds	r2, r3, #4
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	6819      	ldr	r1, [r3, #0]
 8004286:	f107 030c 	add.w	r3, r7, #12
 800428a:	220a      	movs	r2, #10
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff4f 	bl	8004130 <ts_itoa>
				break;
 8004292:	e011      	b.n	80042b8 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	1d1a      	adds	r2, r3, #4
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4619      	mov	r1, r3
 800429e:	f107 030c 	add.w	r3, r7, #12
 80042a2:	2210      	movs	r2, #16
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff43 	bl	8004130 <ts_itoa>
				break;
 80042aa:	e005      	b.n	80042b8 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	60fa      	str	r2, [r7, #12]
 80042b2:	2225      	movs	r2, #37	; 0x25
 80042b4:	701a      	strb	r2, [r3, #0]
				  break;
 80042b6:	bf00      	nop
			}
			fmt++;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	3301      	adds	r3, #1
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	e007      	b.n	80042d0 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	60fa      	str	r2, [r7, #12]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	1c51      	adds	r1, r2, #1
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	7812      	ldrb	r2, [r2, #0]
 80042ce:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f47f af7d 	bne.w	80041d4 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	461a      	mov	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	1ad3      	subs	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3720      	adds	r7, #32
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
	int length = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80042fe:	e081      	b.n	8004404 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b25      	cmp	r3, #37	; 0x25
 8004306:	d177      	bne.n	80043f8 <ts_formatlength+0x108>
		{
			++fmt;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3301      	adds	r3, #1
 800430c:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	3b58      	subs	r3, #88	; 0x58
 8004314:	2b20      	cmp	r3, #32
 8004316:	d86a      	bhi.n	80043ee <ts_formatlength+0xfe>
 8004318:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <ts_formatlength+0x30>)
 800431a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431e:	bf00      	nop
 8004320:	080043e1 	.word	0x080043e1
 8004324:	080043ef 	.word	0x080043ef
 8004328:	080043ef 	.word	0x080043ef
 800432c:	080043ef 	.word	0x080043ef
 8004330:	080043ef 	.word	0x080043ef
 8004334:	080043ef 	.word	0x080043ef
 8004338:	080043ef 	.word	0x080043ef
 800433c:	080043ef 	.word	0x080043ef
 8004340:	080043ef 	.word	0x080043ef
 8004344:	080043ef 	.word	0x080043ef
 8004348:	080043ef 	.word	0x080043ef
 800434c:	080043a5 	.word	0x080043a5
 8004350:	080043b3 	.word	0x080043b3
 8004354:	080043ef 	.word	0x080043ef
 8004358:	080043ef 	.word	0x080043ef
 800435c:	080043ef 	.word	0x080043ef
 8004360:	080043ef 	.word	0x080043ef
 8004364:	080043b3 	.word	0x080043b3
 8004368:	080043ef 	.word	0x080043ef
 800436c:	080043ef 	.word	0x080043ef
 8004370:	080043ef 	.word	0x080043ef
 8004374:	080043ef 	.word	0x080043ef
 8004378:	080043ef 	.word	0x080043ef
 800437c:	080043ef 	.word	0x080043ef
 8004380:	080043ef 	.word	0x080043ef
 8004384:	080043ef 	.word	0x080043ef
 8004388:	080043ef 	.word	0x080043ef
 800438c:	080043c1 	.word	0x080043c1
 8004390:	080043ef 	.word	0x080043ef
 8004394:	080043b3 	.word	0x080043b3
 8004398:	080043ef 	.word	0x080043ef
 800439c:	080043ef 	.word	0x080043ef
 80043a0:	080043e1 	.word	0x080043e1
			{
			  case 'c':
		  		  va_arg(va, int);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	3304      	adds	r3, #4
 80043a8:	603b      	str	r3, [r7, #0]
				  ++length;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3301      	adds	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
				  break;
 80043b0:	e025      	b.n	80043fe <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	330b      	adds	r3, #11
 80043b6:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	3304      	adds	r3, #4
 80043bc:	603b      	str	r3, [r7, #0]
				  break;
 80043be:	e01e      	b.n	80043fe <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	1d1a      	adds	r2, r3, #4
 80043c4:	603a      	str	r2, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80043ca:	e002      	b.n	80043d2 <ts_formatlength+0xe2>
			  			  ++length;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3301      	adds	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	60ba      	str	r2, [r7, #8]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f6      	bne.n	80043cc <ts_formatlength+0xdc>
			  	  }
				  break;
 80043de:	e00e      	b.n	80043fe <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3308      	adds	r3, #8
 80043e4:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	3304      	adds	r3, #4
 80043ea:	603b      	str	r3, [r7, #0]
				  break;
 80043ec:	e007      	b.n	80043fe <ts_formatlength+0x10e>
			  default:
				  ++length;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
				  break;
 80043f4:	bf00      	nop
 80043f6:	e002      	b.n	80043fe <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3301      	adds	r3, #1
 8004402:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f47f af79 	bne.w	8004300 <ts_formatlength+0x10>
	}
	return length;
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 800441c:	b40f      	push	{r0, r1, r2, r3}
 800441e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
	int length = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 800442a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800442e:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8004430:	6839      	ldr	r1, [r7, #0]
 8004432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004434:	f7ff ff5c 	bl	80042f0 <ts_formatlength>
 8004438:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 800443a:	466b      	mov	r3, sp
 800443c:	461e      	mov	r6, r3
		char buf[length];
 800443e:	68f9      	ldr	r1, [r7, #12]
 8004440:	1e4b      	subs	r3, r1, #1
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	460b      	mov	r3, r1
 8004446:	461a      	mov	r2, r3
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8004450:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8004454:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8004458:	460b      	mov	r3, r1
 800445a:	461a      	mov	r2, r3
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	00dd      	lsls	r5, r3, #3
 8004462:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004466:	00d4      	lsls	r4, r2, #3
 8004468:	460b      	mov	r3, r1
 800446a:	3307      	adds	r3, #7
 800446c:	08db      	lsrs	r3, r3, #3
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	ebad 0d03 	sub.w	sp, sp, r3
 8004474:	466b      	mov	r3, sp
 8004476:	3300      	adds	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 800447a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800447e:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fe9b 	bl	80041c2 <ts_formatstring>
 800448c:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4619      	mov	r1, r3
 8004494:	2001      	movs	r0, #1
 8004496:	f7ff fd5b 	bl	8003f50 <_write>
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800449e:	68fb      	ldr	r3, [r7, #12]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044aa:	b004      	add	sp, #16
 80044ac:	4770      	bx	lr
	...

080044b0 <__libc_init_array>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	4e0d      	ldr	r6, [pc, #52]	; (80044e8 <__libc_init_array+0x38>)
 80044b4:	4c0d      	ldr	r4, [pc, #52]	; (80044ec <__libc_init_array+0x3c>)
 80044b6:	1ba4      	subs	r4, r4, r6
 80044b8:	10a4      	asrs	r4, r4, #2
 80044ba:	2500      	movs	r5, #0
 80044bc:	42a5      	cmp	r5, r4
 80044be:	d109      	bne.n	80044d4 <__libc_init_array+0x24>
 80044c0:	4e0b      	ldr	r6, [pc, #44]	; (80044f0 <__libc_init_array+0x40>)
 80044c2:	4c0c      	ldr	r4, [pc, #48]	; (80044f4 <__libc_init_array+0x44>)
 80044c4:	f000 f91e 	bl	8004704 <_init>
 80044c8:	1ba4      	subs	r4, r4, r6
 80044ca:	10a4      	asrs	r4, r4, #2
 80044cc:	2500      	movs	r5, #0
 80044ce:	42a5      	cmp	r5, r4
 80044d0:	d105      	bne.n	80044de <__libc_init_array+0x2e>
 80044d2:	bd70      	pop	{r4, r5, r6, pc}
 80044d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044d8:	4798      	blx	r3
 80044da:	3501      	adds	r5, #1
 80044dc:	e7ee      	b.n	80044bc <__libc_init_array+0xc>
 80044de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044e2:	4798      	blx	r3
 80044e4:	3501      	adds	r5, #1
 80044e6:	e7f2      	b.n	80044ce <__libc_init_array+0x1e>
 80044e8:	0800471c 	.word	0x0800471c
 80044ec:	0800471c 	.word	0x0800471c
 80044f0:	0800471c 	.word	0x0800471c
 80044f4:	08004720 	.word	0x08004720

080044f8 <memcpy>:
 80044f8:	b510      	push	{r4, lr}
 80044fa:	1e43      	subs	r3, r0, #1
 80044fc:	440a      	add	r2, r1
 80044fe:	4291      	cmp	r1, r2
 8004500:	d100      	bne.n	8004504 <memcpy+0xc>
 8004502:	bd10      	pop	{r4, pc}
 8004504:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004508:	f803 4f01 	strb.w	r4, [r3, #1]!
 800450c:	e7f7      	b.n	80044fe <memcpy+0x6>

0800450e <memset>:
 800450e:	4402      	add	r2, r0
 8004510:	4603      	mov	r3, r0
 8004512:	4293      	cmp	r3, r2
 8004514:	d100      	bne.n	8004518 <memset+0xa>
 8004516:	4770      	bx	lr
 8004518:	f803 1b01 	strb.w	r1, [r3], #1
 800451c:	e7f9      	b.n	8004512 <memset+0x4>
	...

08004520 <rand>:
 8004520:	4b19      	ldr	r3, [pc, #100]	; (8004588 <rand+0x68>)
 8004522:	b510      	push	{r4, lr}
 8004524:	681c      	ldr	r4, [r3, #0]
 8004526:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004528:	b9d3      	cbnz	r3, 8004560 <rand+0x40>
 800452a:	2018      	movs	r0, #24
 800452c:	f000 f832 	bl	8004594 <malloc>
 8004530:	f243 330e 	movw	r3, #13070	; 0x330e
 8004534:	63a0      	str	r0, [r4, #56]	; 0x38
 8004536:	8003      	strh	r3, [r0, #0]
 8004538:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800453c:	8043      	strh	r3, [r0, #2]
 800453e:	f241 2334 	movw	r3, #4660	; 0x1234
 8004542:	8083      	strh	r3, [r0, #4]
 8004544:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8004548:	80c3      	strh	r3, [r0, #6]
 800454a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800454e:	8103      	strh	r3, [r0, #8]
 8004550:	2305      	movs	r3, #5
 8004552:	8143      	strh	r3, [r0, #10]
 8004554:	230b      	movs	r3, #11
 8004556:	8183      	strh	r3, [r0, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	2300      	movs	r3, #0
 800455c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004560:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004562:	480a      	ldr	r0, [pc, #40]	; (800458c <rand+0x6c>)
 8004564:	690a      	ldr	r2, [r1, #16]
 8004566:	694b      	ldr	r3, [r1, #20]
 8004568:	4c09      	ldr	r4, [pc, #36]	; (8004590 <rand+0x70>)
 800456a:	4350      	muls	r0, r2
 800456c:	fb04 0003 	mla	r0, r4, r3, r0
 8004570:	fba2 2304 	umull	r2, r3, r2, r4
 8004574:	3201      	adds	r2, #1
 8004576:	4403      	add	r3, r0
 8004578:	f143 0300 	adc.w	r3, r3, #0
 800457c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004580:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8004584:	bd10      	pop	{r4, pc}
 8004586:	bf00      	nop
 8004588:	2000001c 	.word	0x2000001c
 800458c:	5851f42d 	.word	0x5851f42d
 8004590:	4c957f2d 	.word	0x4c957f2d

08004594 <malloc>:
 8004594:	4b02      	ldr	r3, [pc, #8]	; (80045a0 <malloc+0xc>)
 8004596:	4601      	mov	r1, r0
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	f000 b803 	b.w	80045a4 <_malloc_r>
 800459e:	bf00      	nop
 80045a0:	2000001c 	.word	0x2000001c

080045a4 <_malloc_r>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	1ccd      	adds	r5, r1, #3
 80045a8:	f025 0503 	bic.w	r5, r5, #3
 80045ac:	3508      	adds	r5, #8
 80045ae:	2d0c      	cmp	r5, #12
 80045b0:	bf38      	it	cc
 80045b2:	250c      	movcc	r5, #12
 80045b4:	2d00      	cmp	r5, #0
 80045b6:	4606      	mov	r6, r0
 80045b8:	db01      	blt.n	80045be <_malloc_r+0x1a>
 80045ba:	42a9      	cmp	r1, r5
 80045bc:	d903      	bls.n	80045c6 <_malloc_r+0x22>
 80045be:	230c      	movs	r3, #12
 80045c0:	6033      	str	r3, [r6, #0]
 80045c2:	2000      	movs	r0, #0
 80045c4:	bd70      	pop	{r4, r5, r6, pc}
 80045c6:	f000 f85b 	bl	8004680 <__malloc_lock>
 80045ca:	4a23      	ldr	r2, [pc, #140]	; (8004658 <_malloc_r+0xb4>)
 80045cc:	6814      	ldr	r4, [r2, #0]
 80045ce:	4621      	mov	r1, r4
 80045d0:	b991      	cbnz	r1, 80045f8 <_malloc_r+0x54>
 80045d2:	4c22      	ldr	r4, [pc, #136]	; (800465c <_malloc_r+0xb8>)
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	b91b      	cbnz	r3, 80045e0 <_malloc_r+0x3c>
 80045d8:	4630      	mov	r0, r6
 80045da:	f000 f841 	bl	8004660 <_sbrk_r>
 80045de:	6020      	str	r0, [r4, #0]
 80045e0:	4629      	mov	r1, r5
 80045e2:	4630      	mov	r0, r6
 80045e4:	f000 f83c 	bl	8004660 <_sbrk_r>
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	d126      	bne.n	800463a <_malloc_r+0x96>
 80045ec:	230c      	movs	r3, #12
 80045ee:	6033      	str	r3, [r6, #0]
 80045f0:	4630      	mov	r0, r6
 80045f2:	f000 f846 	bl	8004682 <__malloc_unlock>
 80045f6:	e7e4      	b.n	80045c2 <_malloc_r+0x1e>
 80045f8:	680b      	ldr	r3, [r1, #0]
 80045fa:	1b5b      	subs	r3, r3, r5
 80045fc:	d41a      	bmi.n	8004634 <_malloc_r+0x90>
 80045fe:	2b0b      	cmp	r3, #11
 8004600:	d90f      	bls.n	8004622 <_malloc_r+0x7e>
 8004602:	600b      	str	r3, [r1, #0]
 8004604:	50cd      	str	r5, [r1, r3]
 8004606:	18cc      	adds	r4, r1, r3
 8004608:	4630      	mov	r0, r6
 800460a:	f000 f83a 	bl	8004682 <__malloc_unlock>
 800460e:	f104 000b 	add.w	r0, r4, #11
 8004612:	1d23      	adds	r3, r4, #4
 8004614:	f020 0007 	bic.w	r0, r0, #7
 8004618:	1ac3      	subs	r3, r0, r3
 800461a:	d01b      	beq.n	8004654 <_malloc_r+0xb0>
 800461c:	425a      	negs	r2, r3
 800461e:	50e2      	str	r2, [r4, r3]
 8004620:	bd70      	pop	{r4, r5, r6, pc}
 8004622:	428c      	cmp	r4, r1
 8004624:	bf0d      	iteet	eq
 8004626:	6863      	ldreq	r3, [r4, #4]
 8004628:	684b      	ldrne	r3, [r1, #4]
 800462a:	6063      	strne	r3, [r4, #4]
 800462c:	6013      	streq	r3, [r2, #0]
 800462e:	bf18      	it	ne
 8004630:	460c      	movne	r4, r1
 8004632:	e7e9      	b.n	8004608 <_malloc_r+0x64>
 8004634:	460c      	mov	r4, r1
 8004636:	6849      	ldr	r1, [r1, #4]
 8004638:	e7ca      	b.n	80045d0 <_malloc_r+0x2c>
 800463a:	1cc4      	adds	r4, r0, #3
 800463c:	f024 0403 	bic.w	r4, r4, #3
 8004640:	42a0      	cmp	r0, r4
 8004642:	d005      	beq.n	8004650 <_malloc_r+0xac>
 8004644:	1a21      	subs	r1, r4, r0
 8004646:	4630      	mov	r0, r6
 8004648:	f000 f80a 	bl	8004660 <_sbrk_r>
 800464c:	3001      	adds	r0, #1
 800464e:	d0cd      	beq.n	80045ec <_malloc_r+0x48>
 8004650:	6025      	str	r5, [r4, #0]
 8004652:	e7d9      	b.n	8004608 <_malloc_r+0x64>
 8004654:	bd70      	pop	{r4, r5, r6, pc}
 8004656:	bf00      	nop
 8004658:	20001df8 	.word	0x20001df8
 800465c:	20001dfc 	.word	0x20001dfc

08004660 <_sbrk_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4c06      	ldr	r4, [pc, #24]	; (800467c <_sbrk_r+0x1c>)
 8004664:	2300      	movs	r3, #0
 8004666:	4605      	mov	r5, r0
 8004668:	4608      	mov	r0, r1
 800466a:	6023      	str	r3, [r4, #0]
 800466c:	f7ff fc8e 	bl	8003f8c <_sbrk>
 8004670:	1c43      	adds	r3, r0, #1
 8004672:	d102      	bne.n	800467a <_sbrk_r+0x1a>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	b103      	cbz	r3, 800467a <_sbrk_r+0x1a>
 8004678:	602b      	str	r3, [r5, #0]
 800467a:	bd38      	pop	{r3, r4, r5, pc}
 800467c:	20001ecc 	.word	0x20001ecc

08004680 <__malloc_lock>:
 8004680:	4770      	bx	lr

08004682 <__malloc_unlock>:
 8004682:	4770      	bx	lr
 8004684:	454c4449 	.word	0x454c4449
 8004688:	00000000 	.word	0x00000000
 800468c:	20726d54 	.word	0x20726d54
 8004690:	00637653 	.word	0x00637653
 8004694:	51726d54 	.word	0x51726d54
 8004698:	00000000 	.word	0x00000000
 800469c:	70736964 	.word	0x70736964
 80046a0:	5479616c 	.word	0x5479616c
 80046a4:	72656d69 	.word	0x72656d69
 80046a8:	00000000 	.word	0x00000000
 80046ac:	66617254 	.word	0x66617254
 80046b0:	20636966 	.word	0x20636966
 80046b4:	776f6c46 	.word	0x776f6c46
 80046b8:	00000000 	.word	0x00000000
 80046bc:	66617254 	.word	0x66617254
 80046c0:	20636966 	.word	0x20636966
 80046c4:	656e6547 	.word	0x656e6547
 80046c8:	6f746172 	.word	0x6f746172
 80046cc:	00000072 	.word	0x00000072
 80046d0:	66617254 	.word	0x66617254
 80046d4:	20636966 	.word	0x20636966
 80046d8:	6867694c 	.word	0x6867694c
 80046dc:	00000074 	.word	0x00000074
 80046e0:	00000008 	.word	0x00000008
 80046e4:	00000303 	.word	0x00000303
 80046e8:	000001c7 	.word	0x000001c7
 80046ec:	00000301 	.word	0x00000301
 80046f0:	0a206425 	.word	0x0a206425
 80046f4:	00000000 	.word	0x00000000
 80046f8:	202c6425 	.word	0x202c6425
 80046fc:	0a206425 	.word	0x0a206425
 8004700:	00000000 	.word	0x00000000

08004704 <_init>:
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	bf00      	nop
 8004708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470a:	bc08      	pop	{r3}
 800470c:	469e      	mov	lr, r3
 800470e:	4770      	bx	lr

08004710 <_fini>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	bf00      	nop
 8004714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004716:	bc08      	pop	{r3}
 8004718:	469e      	mov	lr, r3
 800471a:	4770      	bx	lr
